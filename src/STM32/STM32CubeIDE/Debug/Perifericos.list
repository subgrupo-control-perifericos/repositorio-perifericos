
Perifericos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008100  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  080082d0  080082d0  000182d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008448  08008448  000200c8  2**0
                  CONTENTS
  4 .ARM          00000008  08008448  08008448  00018448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008450  08008450  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008450  08008450  00018450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008454  08008454  00018454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  08008458  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  200000c8  08008520  000200c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003a4  08008520  000203a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019cdd  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000438a  00000000  00000000  00039dd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001368  00000000  00000000  0003e160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001118  00000000  00000000  0003f4c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027e60  00000000  00000000  000405e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e862  00000000  00000000  00068440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2852  00000000  00000000  00086ca2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001694f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005040  00000000  00000000  00169544  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000c8 	.word	0x200000c8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080082b8 	.word	0x080082b8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000cc 	.word	0x200000cc
 800020c:	080082b8 	.word	0x080082b8

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b20:	f000 b974 	b.w	8000e0c <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9d08      	ldr	r5, [sp, #32]
 8000b42:	4604      	mov	r4, r0
 8000b44:	468e      	mov	lr, r1
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d14d      	bne.n	8000be6 <__udivmoddi4+0xaa>
 8000b4a:	428a      	cmp	r2, r1
 8000b4c:	4694      	mov	ip, r2
 8000b4e:	d969      	bls.n	8000c24 <__udivmoddi4+0xe8>
 8000b50:	fab2 f282 	clz	r2, r2
 8000b54:	b152      	cbz	r2, 8000b6c <__udivmoddi4+0x30>
 8000b56:	fa01 f302 	lsl.w	r3, r1, r2
 8000b5a:	f1c2 0120 	rsb	r1, r2, #32
 8000b5e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b62:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b66:	ea41 0e03 	orr.w	lr, r1, r3
 8000b6a:	4094      	lsls	r4, r2
 8000b6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b70:	0c21      	lsrs	r1, r4, #16
 8000b72:	fbbe f6f8 	udiv	r6, lr, r8
 8000b76:	fa1f f78c 	uxth.w	r7, ip
 8000b7a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b7e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b82:	fb06 f107 	mul.w	r1, r6, r7
 8000b86:	4299      	cmp	r1, r3
 8000b88:	d90a      	bls.n	8000ba0 <__udivmoddi4+0x64>
 8000b8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b8e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b92:	f080 811f 	bcs.w	8000dd4 <__udivmoddi4+0x298>
 8000b96:	4299      	cmp	r1, r3
 8000b98:	f240 811c 	bls.w	8000dd4 <__udivmoddi4+0x298>
 8000b9c:	3e02      	subs	r6, #2
 8000b9e:	4463      	add	r3, ip
 8000ba0:	1a5b      	subs	r3, r3, r1
 8000ba2:	b2a4      	uxth	r4, r4
 8000ba4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ba8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bb0:	fb00 f707 	mul.w	r7, r0, r7
 8000bb4:	42a7      	cmp	r7, r4
 8000bb6:	d90a      	bls.n	8000bce <__udivmoddi4+0x92>
 8000bb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bbc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bc0:	f080 810a 	bcs.w	8000dd8 <__udivmoddi4+0x29c>
 8000bc4:	42a7      	cmp	r7, r4
 8000bc6:	f240 8107 	bls.w	8000dd8 <__udivmoddi4+0x29c>
 8000bca:	4464      	add	r4, ip
 8000bcc:	3802      	subs	r0, #2
 8000bce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bd2:	1be4      	subs	r4, r4, r7
 8000bd4:	2600      	movs	r6, #0
 8000bd6:	b11d      	cbz	r5, 8000be0 <__udivmoddi4+0xa4>
 8000bd8:	40d4      	lsrs	r4, r2
 8000bda:	2300      	movs	r3, #0
 8000bdc:	e9c5 4300 	strd	r4, r3, [r5]
 8000be0:	4631      	mov	r1, r6
 8000be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d909      	bls.n	8000bfe <__udivmoddi4+0xc2>
 8000bea:	2d00      	cmp	r5, #0
 8000bec:	f000 80ef 	beq.w	8000dce <__udivmoddi4+0x292>
 8000bf0:	2600      	movs	r6, #0
 8000bf2:	e9c5 0100 	strd	r0, r1, [r5]
 8000bf6:	4630      	mov	r0, r6
 8000bf8:	4631      	mov	r1, r6
 8000bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfe:	fab3 f683 	clz	r6, r3
 8000c02:	2e00      	cmp	r6, #0
 8000c04:	d14a      	bne.n	8000c9c <__udivmoddi4+0x160>
 8000c06:	428b      	cmp	r3, r1
 8000c08:	d302      	bcc.n	8000c10 <__udivmoddi4+0xd4>
 8000c0a:	4282      	cmp	r2, r0
 8000c0c:	f200 80f9 	bhi.w	8000e02 <__udivmoddi4+0x2c6>
 8000c10:	1a84      	subs	r4, r0, r2
 8000c12:	eb61 0303 	sbc.w	r3, r1, r3
 8000c16:	2001      	movs	r0, #1
 8000c18:	469e      	mov	lr, r3
 8000c1a:	2d00      	cmp	r5, #0
 8000c1c:	d0e0      	beq.n	8000be0 <__udivmoddi4+0xa4>
 8000c1e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c22:	e7dd      	b.n	8000be0 <__udivmoddi4+0xa4>
 8000c24:	b902      	cbnz	r2, 8000c28 <__udivmoddi4+0xec>
 8000c26:	deff      	udf	#255	; 0xff
 8000c28:	fab2 f282 	clz	r2, r2
 8000c2c:	2a00      	cmp	r2, #0
 8000c2e:	f040 8092 	bne.w	8000d56 <__udivmoddi4+0x21a>
 8000c32:	eba1 010c 	sub.w	r1, r1, ip
 8000c36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3a:	fa1f fe8c 	uxth.w	lr, ip
 8000c3e:	2601      	movs	r6, #1
 8000c40:	0c20      	lsrs	r0, r4, #16
 8000c42:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c46:	fb07 1113 	mls	r1, r7, r3, r1
 8000c4a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c4e:	fb0e f003 	mul.w	r0, lr, r3
 8000c52:	4288      	cmp	r0, r1
 8000c54:	d908      	bls.n	8000c68 <__udivmoddi4+0x12c>
 8000c56:	eb1c 0101 	adds.w	r1, ip, r1
 8000c5a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c5e:	d202      	bcs.n	8000c66 <__udivmoddi4+0x12a>
 8000c60:	4288      	cmp	r0, r1
 8000c62:	f200 80cb 	bhi.w	8000dfc <__udivmoddi4+0x2c0>
 8000c66:	4643      	mov	r3, r8
 8000c68:	1a09      	subs	r1, r1, r0
 8000c6a:	b2a4      	uxth	r4, r4
 8000c6c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c70:	fb07 1110 	mls	r1, r7, r0, r1
 8000c74:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c78:	fb0e fe00 	mul.w	lr, lr, r0
 8000c7c:	45a6      	cmp	lr, r4
 8000c7e:	d908      	bls.n	8000c92 <__udivmoddi4+0x156>
 8000c80:	eb1c 0404 	adds.w	r4, ip, r4
 8000c84:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c88:	d202      	bcs.n	8000c90 <__udivmoddi4+0x154>
 8000c8a:	45a6      	cmp	lr, r4
 8000c8c:	f200 80bb 	bhi.w	8000e06 <__udivmoddi4+0x2ca>
 8000c90:	4608      	mov	r0, r1
 8000c92:	eba4 040e 	sub.w	r4, r4, lr
 8000c96:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c9a:	e79c      	b.n	8000bd6 <__udivmoddi4+0x9a>
 8000c9c:	f1c6 0720 	rsb	r7, r6, #32
 8000ca0:	40b3      	lsls	r3, r6
 8000ca2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ca6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000caa:	fa20 f407 	lsr.w	r4, r0, r7
 8000cae:	fa01 f306 	lsl.w	r3, r1, r6
 8000cb2:	431c      	orrs	r4, r3
 8000cb4:	40f9      	lsrs	r1, r7
 8000cb6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cba:	fa00 f306 	lsl.w	r3, r0, r6
 8000cbe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cc2:	0c20      	lsrs	r0, r4, #16
 8000cc4:	fa1f fe8c 	uxth.w	lr, ip
 8000cc8:	fb09 1118 	mls	r1, r9, r8, r1
 8000ccc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cd0:	fb08 f00e 	mul.w	r0, r8, lr
 8000cd4:	4288      	cmp	r0, r1
 8000cd6:	fa02 f206 	lsl.w	r2, r2, r6
 8000cda:	d90b      	bls.n	8000cf4 <__udivmoddi4+0x1b8>
 8000cdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ce4:	f080 8088 	bcs.w	8000df8 <__udivmoddi4+0x2bc>
 8000ce8:	4288      	cmp	r0, r1
 8000cea:	f240 8085 	bls.w	8000df8 <__udivmoddi4+0x2bc>
 8000cee:	f1a8 0802 	sub.w	r8, r8, #2
 8000cf2:	4461      	add	r1, ip
 8000cf4:	1a09      	subs	r1, r1, r0
 8000cf6:	b2a4      	uxth	r4, r4
 8000cf8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cfc:	fb09 1110 	mls	r1, r9, r0, r1
 8000d00:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d04:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d08:	458e      	cmp	lr, r1
 8000d0a:	d908      	bls.n	8000d1e <__udivmoddi4+0x1e2>
 8000d0c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d10:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d14:	d26c      	bcs.n	8000df0 <__udivmoddi4+0x2b4>
 8000d16:	458e      	cmp	lr, r1
 8000d18:	d96a      	bls.n	8000df0 <__udivmoddi4+0x2b4>
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	4461      	add	r1, ip
 8000d1e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d22:	fba0 9402 	umull	r9, r4, r0, r2
 8000d26:	eba1 010e 	sub.w	r1, r1, lr
 8000d2a:	42a1      	cmp	r1, r4
 8000d2c:	46c8      	mov	r8, r9
 8000d2e:	46a6      	mov	lr, r4
 8000d30:	d356      	bcc.n	8000de0 <__udivmoddi4+0x2a4>
 8000d32:	d053      	beq.n	8000ddc <__udivmoddi4+0x2a0>
 8000d34:	b15d      	cbz	r5, 8000d4e <__udivmoddi4+0x212>
 8000d36:	ebb3 0208 	subs.w	r2, r3, r8
 8000d3a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d3e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d42:	fa22 f306 	lsr.w	r3, r2, r6
 8000d46:	40f1      	lsrs	r1, r6
 8000d48:	431f      	orrs	r7, r3
 8000d4a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d4e:	2600      	movs	r6, #0
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	f1c2 0320 	rsb	r3, r2, #32
 8000d5a:	40d8      	lsrs	r0, r3
 8000d5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d60:	fa21 f303 	lsr.w	r3, r1, r3
 8000d64:	4091      	lsls	r1, r2
 8000d66:	4301      	orrs	r1, r0
 8000d68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6c:	fa1f fe8c 	uxth.w	lr, ip
 8000d70:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d74:	fb07 3610 	mls	r6, r7, r0, r3
 8000d78:	0c0b      	lsrs	r3, r1, #16
 8000d7a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d7e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d82:	429e      	cmp	r6, r3
 8000d84:	fa04 f402 	lsl.w	r4, r4, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x260>
 8000d8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d92:	d22f      	bcs.n	8000df4 <__udivmoddi4+0x2b8>
 8000d94:	429e      	cmp	r6, r3
 8000d96:	d92d      	bls.n	8000df4 <__udivmoddi4+0x2b8>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4463      	add	r3, ip
 8000d9c:	1b9b      	subs	r3, r3, r6
 8000d9e:	b289      	uxth	r1, r1
 8000da0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000da4:	fb07 3316 	mls	r3, r7, r6, r3
 8000da8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dac:	fb06 f30e 	mul.w	r3, r6, lr
 8000db0:	428b      	cmp	r3, r1
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x28a>
 8000db4:	eb1c 0101 	adds.w	r1, ip, r1
 8000db8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000dbc:	d216      	bcs.n	8000dec <__udivmoddi4+0x2b0>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d914      	bls.n	8000dec <__udivmoddi4+0x2b0>
 8000dc2:	3e02      	subs	r6, #2
 8000dc4:	4461      	add	r1, ip
 8000dc6:	1ac9      	subs	r1, r1, r3
 8000dc8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dcc:	e738      	b.n	8000c40 <__udivmoddi4+0x104>
 8000dce:	462e      	mov	r6, r5
 8000dd0:	4628      	mov	r0, r5
 8000dd2:	e705      	b.n	8000be0 <__udivmoddi4+0xa4>
 8000dd4:	4606      	mov	r6, r0
 8000dd6:	e6e3      	b.n	8000ba0 <__udivmoddi4+0x64>
 8000dd8:	4618      	mov	r0, r3
 8000dda:	e6f8      	b.n	8000bce <__udivmoddi4+0x92>
 8000ddc:	454b      	cmp	r3, r9
 8000dde:	d2a9      	bcs.n	8000d34 <__udivmoddi4+0x1f8>
 8000de0:	ebb9 0802 	subs.w	r8, r9, r2
 8000de4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000de8:	3801      	subs	r0, #1
 8000dea:	e7a3      	b.n	8000d34 <__udivmoddi4+0x1f8>
 8000dec:	4646      	mov	r6, r8
 8000dee:	e7ea      	b.n	8000dc6 <__udivmoddi4+0x28a>
 8000df0:	4620      	mov	r0, r4
 8000df2:	e794      	b.n	8000d1e <__udivmoddi4+0x1e2>
 8000df4:	4640      	mov	r0, r8
 8000df6:	e7d1      	b.n	8000d9c <__udivmoddi4+0x260>
 8000df8:	46d0      	mov	r8, sl
 8000dfa:	e77b      	b.n	8000cf4 <__udivmoddi4+0x1b8>
 8000dfc:	3b02      	subs	r3, #2
 8000dfe:	4461      	add	r1, ip
 8000e00:	e732      	b.n	8000c68 <__udivmoddi4+0x12c>
 8000e02:	4630      	mov	r0, r6
 8000e04:	e709      	b.n	8000c1a <__udivmoddi4+0xde>
 8000e06:	4464      	add	r4, ip
 8000e08:	3802      	subs	r0, #2
 8000e0a:	e742      	b.n	8000c92 <__udivmoddi4+0x156>

08000e0c <__aeabi_idiv0>:
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop

08000e10 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e16:	463b      	mov	r3, r7
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e22:	4b22      	ldr	r3, [pc, #136]	; (8000eac <MX_ADC1_Init+0x9c>)
 8000e24:	4a22      	ldr	r2, [pc, #136]	; (8000eb0 <MX_ADC1_Init+0xa0>)
 8000e26:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e28:	4b20      	ldr	r3, [pc, #128]	; (8000eac <MX_ADC1_Init+0x9c>)
 8000e2a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e2e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e30:	4b1e      	ldr	r3, [pc, #120]	; (8000eac <MX_ADC1_Init+0x9c>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000e36:	4b1d      	ldr	r3, [pc, #116]	; (8000eac <MX_ADC1_Init+0x9c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e3c:	4b1b      	ldr	r3, [pc, #108]	; (8000eac <MX_ADC1_Init+0x9c>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e42:	4b1a      	ldr	r3, [pc, #104]	; (8000eac <MX_ADC1_Init+0x9c>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000e4a:	4b18      	ldr	r3, [pc, #96]	; (8000eac <MX_ADC1_Init+0x9c>)
 8000e4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e50:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000e52:	4b16      	ldr	r3, [pc, #88]	; (8000eac <MX_ADC1_Init+0x9c>)
 8000e54:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e58:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e5a:	4b14      	ldr	r3, [pc, #80]	; (8000eac <MX_ADC1_Init+0x9c>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e60:	4b12      	ldr	r3, [pc, #72]	; (8000eac <MX_ADC1_Init+0x9c>)
 8000e62:	2201      	movs	r2, #1
 8000e64:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e66:	4b11      	ldr	r3, [pc, #68]	; (8000eac <MX_ADC1_Init+0x9c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e6e:	4b0f      	ldr	r3, [pc, #60]	; (8000eac <MX_ADC1_Init+0x9c>)
 8000e70:	2201      	movs	r2, #1
 8000e72:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e74:	480d      	ldr	r0, [pc, #52]	; (8000eac <MX_ADC1_Init+0x9c>)
 8000e76:	f002 f883 	bl	8002f80 <HAL_ADC_Init>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000e80:	f000 fee2 	bl	8001c48 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000e84:	2308      	movs	r3, #8
 8000e86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e90:	463b      	mov	r3, r7
 8000e92:	4619      	mov	r1, r3
 8000e94:	4805      	ldr	r0, [pc, #20]	; (8000eac <MX_ADC1_Init+0x9c>)
 8000e96:	f002 fb25 	bl	80034e4 <HAL_ADC_ConfigChannel>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000ea0:	f000 fed2 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ea4:	bf00      	nop
 8000ea6:	3710      	adds	r7, #16
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	200000e4 	.word	0x200000e4
 8000eb0:	40012000 	.word	0x40012000

08000eb4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08a      	sub	sp, #40	; 0x28
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a32      	ldr	r2, [pc, #200]	; (8000f9c <HAL_ADC_MspInit+0xe8>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d15e      	bne.n	8000f94 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	613b      	str	r3, [r7, #16]
 8000eda:	4b31      	ldr	r3, [pc, #196]	; (8000fa0 <HAL_ADC_MspInit+0xec>)
 8000edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ede:	4a30      	ldr	r2, [pc, #192]	; (8000fa0 <HAL_ADC_MspInit+0xec>)
 8000ee0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ee6:	4b2e      	ldr	r3, [pc, #184]	; (8000fa0 <HAL_ADC_MspInit+0xec>)
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eee:	613b      	str	r3, [r7, #16]
 8000ef0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	4b2a      	ldr	r3, [pc, #168]	; (8000fa0 <HAL_ADC_MspInit+0xec>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	4a29      	ldr	r2, [pc, #164]	; (8000fa0 <HAL_ADC_MspInit+0xec>)
 8000efc:	f043 0302 	orr.w	r3, r3, #2
 8000f00:	6313      	str	r3, [r2, #48]	; 0x30
 8000f02:	4b27      	ldr	r3, [pc, #156]	; (8000fa0 <HAL_ADC_MspInit+0xec>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	f003 0302 	and.w	r3, r3, #2
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f12:	2303      	movs	r3, #3
 8000f14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f1a:	f107 0314 	add.w	r3, r7, #20
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4820      	ldr	r0, [pc, #128]	; (8000fa4 <HAL_ADC_MspInit+0xf0>)
 8000f22:	f004 f873 	bl	800500c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000f26:	4b20      	ldr	r3, [pc, #128]	; (8000fa8 <HAL_ADC_MspInit+0xf4>)
 8000f28:	4a20      	ldr	r2, [pc, #128]	; (8000fac <HAL_ADC_MspInit+0xf8>)
 8000f2a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f2c:	4b1e      	ldr	r3, [pc, #120]	; (8000fa8 <HAL_ADC_MspInit+0xf4>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f32:	4b1d      	ldr	r3, [pc, #116]	; (8000fa8 <HAL_ADC_MspInit+0xf4>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f38:	4b1b      	ldr	r3, [pc, #108]	; (8000fa8 <HAL_ADC_MspInit+0xf4>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f3e:	4b1a      	ldr	r3, [pc, #104]	; (8000fa8 <HAL_ADC_MspInit+0xf4>)
 8000f40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f44:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f46:	4b18      	ldr	r3, [pc, #96]	; (8000fa8 <HAL_ADC_MspInit+0xf4>)
 8000f48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f4c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f4e:	4b16      	ldr	r3, [pc, #88]	; (8000fa8 <HAL_ADC_MspInit+0xf4>)
 8000f50:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f54:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000f56:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <HAL_ADC_MspInit+0xf4>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f5c:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <HAL_ADC_MspInit+0xf4>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f62:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <HAL_ADC_MspInit+0xf4>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f68:	480f      	ldr	r0, [pc, #60]	; (8000fa8 <HAL_ADC_MspInit+0xf4>)
 8000f6a:	f003 fcdf 	bl	800492c <HAL_DMA_Init>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000f74:	f000 fe68 	bl	8001c48 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4a0b      	ldr	r2, [pc, #44]	; (8000fa8 <HAL_ADC_MspInit+0xf4>)
 8000f7c:	639a      	str	r2, [r3, #56]	; 0x38
 8000f7e:	4a0a      	ldr	r2, [pc, #40]	; (8000fa8 <HAL_ADC_MspInit+0xf4>)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000f84:	2200      	movs	r2, #0
 8000f86:	2100      	movs	r1, #0
 8000f88:	2012      	movs	r0, #18
 8000f8a:	f003 fc98 	bl	80048be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000f8e:	2012      	movs	r0, #18
 8000f90:	f003 fcb1 	bl	80048f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f94:	bf00      	nop
 8000f96:	3728      	adds	r7, #40	; 0x28
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40012000 	.word	0x40012000
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40020400 	.word	0x40020400
 8000fa8:	2000012c 	.word	0x2000012c
 8000fac:	40026410 	.word	0x40026410

08000fb0 <MX_APP_Init>:
/***********************************************************************************************************************
 * Public functions implementation
 **********************************************************************************************************************/

void MX_APP_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
    /* Initialize board LEDs */
    BSP_LED_Init(LED1);
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f001 fd66 	bl	8002a88 <BSP_LED_Init>
    BSP_LED_Init(LED2);
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	f001 fd63 	bl	8002a88 <BSP_LED_Init>
    BSP_LED_Init(LED3);
 8000fc2:	2002      	movs	r0, #2
 8000fc4:	f001 fd60 	bl	8002a88 <BSP_LED_Init>

    /* Initialize board buzzer */
    BSP_BUZZER_Init();
 8000fc8:	f001 fcc2 	bl	8002950 <BSP_BUZZER_Init>

    /* Initialize hardware */
    BOTONES_HW_Init();
 8000fcc:	f000 f9b4 	bl	8001338 <BOTONES_HW_Init>
    PEDAL_HW_Init();
 8000fd0:	f001 fa66 	bl	80024a0 <PEDAL_HW_Init>
    PANTALLA_HW_Init();
 8000fd4:	f001 f9d4 	bl	8002380 <PANTALLA_HW_Init>
    CAN_HW_Init();
 8000fd8:	f000 fb62 	bl	80016a0 <CAN_HW_Init>

    /* Indicate that initialization was completed */
    for(int i=0; i<3; i++)
 8000fdc:	2300      	movs	r3, #0
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	e01a      	b.n	8001018 <MX_APP_Init+0x68>
    {
    	BSP_LED_On(LED1);
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	f001 fd98 	bl	8002b18 <BSP_LED_On>
    	BSP_LED_On(LED2);
 8000fe8:	2001      	movs	r0, #1
 8000fea:	f001 fd95 	bl	8002b18 <BSP_LED_On>
    	BSP_LED_On(LED3);
 8000fee:	2002      	movs	r0, #2
 8000ff0:	f001 fd92 	bl	8002b18 <BSP_LED_On>

    	HAL_Delay(200);
 8000ff4:	20c8      	movs	r0, #200	; 0xc8
 8000ff6:	f001 ff9f 	bl	8002f38 <HAL_Delay>

    	BSP_LED_Off(LED1);
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f001 fda6 	bl	8002b4c <BSP_LED_Off>
    	BSP_LED_Off(LED2);
 8001000:	2001      	movs	r0, #1
 8001002:	f001 fda3 	bl	8002b4c <BSP_LED_Off>
    	BSP_LED_Off(LED3);
 8001006:	2002      	movs	r0, #2
 8001008:	f001 fda0 	bl	8002b4c <BSP_LED_Off>

    	HAL_Delay(200);
 800100c:	20c8      	movs	r0, #200	; 0xc8
 800100e:	f001 ff93 	bl	8002f38 <HAL_Delay>
    for(int i=0; i<3; i++)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	3301      	adds	r3, #1
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2b02      	cmp	r3, #2
 800101c:	dde1      	ble.n	8000fe2 <MX_APP_Init+0x32>
    }
}
 800101e:	bf00      	nop
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <MX_APP_Process>:

void MX_APP_Process(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
	switch (app_state)
 800102c:	4b29      	ldr	r3, [pc, #164]	; (80010d4 <MX_APP_Process+0xac>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d002      	beq.n	800103a <MX_APP_Process+0x12>
 8001034:	2b01      	cmp	r3, #1
 8001036:	d03d      	beq.n	80010b4 <MX_APP_Process+0x8c>

	    INDICATORS_Process();

		break;
	}
}
 8001038:	e049      	b.n	80010ce <MX_APP_Process+0xa6>
		blink_tickstart = HAL_GetTick();
 800103a:	f001 ff71 	bl	8002f20 <HAL_GetTick>
 800103e:	4603      	mov	r3, r0
 8001040:	4a25      	ldr	r2, [pc, #148]	; (80010d8 <MX_APP_Process+0xb0>)
 8001042:	6013      	str	r3, [r2, #0]
			if((HAL_GetTick() - blink_tickstart) > BLINK_TIME_MS)
 8001044:	f001 ff6c 	bl	8002f20 <HAL_GetTick>
 8001048:	4602      	mov	r2, r0
 800104a:	4b23      	ldr	r3, [pc, #140]	; (80010d8 <MX_APP_Process+0xb0>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	2bfa      	cmp	r3, #250	; 0xfa
 8001052:	d907      	bls.n	8001064 <MX_APP_Process+0x3c>
				BSP_LED_Toggle(LED1);
 8001054:	2000      	movs	r0, #0
 8001056:	f001 fd93 	bl	8002b80 <BSP_LED_Toggle>
				blink_tickstart = HAL_GetTick();
 800105a:	f001 ff61 	bl	8002f20 <HAL_GetTick>
 800105e:	4603      	mov	r3, r0
 8001060:	4a1d      	ldr	r2, [pc, #116]	; (80010d8 <MX_APP_Process+0xb0>)
 8001062:	6013      	str	r3, [r2, #0]
		    if (flag_rx_can == CAN_MSG_RECEIVED)
 8001064:	4b1d      	ldr	r3, [pc, #116]	; (80010dc <MX_APP_Process+0xb4>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d104      	bne.n	8001076 <MX_APP_Process+0x4e>
		        CAN_APP_Store_ReceivedMessage();
 800106c:	f000 fa78 	bl	8001560 <CAN_APP_Store_ReceivedMessage>
		        flag_rx_can = CAN_MSG_NOT_RECEIVED;
 8001070:	4b1a      	ldr	r3, [pc, #104]	; (80010dc <MX_APP_Process+0xb4>)
 8001072:	2201      	movs	r2, #1
 8001074:	701a      	strb	r2, [r3, #0]
			if (bus_can_input.control_ok == CAN_VALUE_MODULE_OK)
 8001076:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <MX_APP_Process+0xb8>)
 8001078:	789b      	ldrb	r3, [r3, #2]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d1e2      	bne.n	8001044 <MX_APP_Process+0x1c>
				HAL_Delay(500);
 800107e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001082:	f001 ff59 	bl	8002f38 <HAL_Delay>
				bus_can_output.perifericos_ok = CAN_VALUE_MODULE_OK;
 8001086:	4b17      	ldr	r3, [pc, #92]	; (80010e4 <MX_APP_Process+0xbc>)
 8001088:	2201      	movs	r2, #1
 800108a:	70da      	strb	r2, [r3, #3]
				can_obj.Frame.id = CAN_ID_PERIFERICOS_OK;
 800108c:	4b16      	ldr	r3, [pc, #88]	; (80010e8 <MX_APP_Process+0xc0>)
 800108e:	2205      	movs	r2, #5
 8001090:	601a      	str	r2, [r3, #0]
				can_obj.Frame.payload_length = 1;
 8001092:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <MX_APP_Process+0xc0>)
 8001094:	2201      	movs	r2, #1
 8001096:	73da      	strb	r2, [r3, #15]
				can_obj.Frame.payload_buff[0] = bus_can_output.perifericos_ok;
 8001098:	4b12      	ldr	r3, [pc, #72]	; (80010e4 <MX_APP_Process+0xbc>)
 800109a:	78da      	ldrb	r2, [r3, #3]
 800109c:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <MX_APP_Process+0xc0>)
 800109e:	71da      	strb	r2, [r3, #7]
				CAN_API_Send_Message(&can_obj);
 80010a0:	4811      	ldr	r0, [pc, #68]	; (80010e8 <MX_APP_Process+0xc0>)
 80010a2:	f001 fdaf 	bl	8002c04 <CAN_API_Send_Message>
				INDICATORS_Finish_StartUp();
 80010a6:	f000 fd11 	bl	8001acc <INDICATORS_Finish_StartUp>
				app_state = kRUNNING;
 80010aa:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <MX_APP_Process+0xac>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	701a      	strb	r2, [r3, #0]
				break;
 80010b0:	bf00      	nop
		break;
 80010b2:	e00c      	b.n	80010ce <MX_APP_Process+0xa6>
		CAN_APP_Process();
 80010b4:	f000 f9e2 	bl	800147c <CAN_APP_Process>
		DECODE_DATA_Process();
 80010b8:	f000 fb6c 	bl	8001794 <DECODE_DATA_Process>
	    BOTONES_Process();
 80010bc:	f000 f816 	bl	80010ec <BOTONES_Process>
	    PEDAL_Process();
 80010c0:	f001 f964 	bl	800238c <PEDAL_Process>
	    PANTALLA_Process();
 80010c4:	f000 fdc5 	bl	8001c52 <PANTALLA_Process>
	    INDICATORS_Process();
 80010c8:	f000 fcf8 	bl	8001abc <INDICATORS_Process>
		break;
 80010cc:	bf00      	nop
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	2000018c 	.word	0x2000018c
 80010d8:	20000190 	.word	0x20000190
 80010dc:	20000038 	.word	0x20000038
 80010e0:	20000030 	.word	0x20000030
 80010e4:	2000002c 	.word	0x2000002c
 80010e8:	200001d4 	.word	0x200001d4

080010ec <BOTONES_Process>:
 *
 * @param   None
 * @retval  None
 */
void BOTONES_Process(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
	/* Actualice pulsadores de hombre muerto en bus de datos */
	BOTONES_Update_HM_Btns();
 80010f0:	f000 f836 	bl	8001160 <BOTONES_Update_HM_Btns>

	/* Actualice estado de hombre muerto en bus de datos */
	BOTONES_Update_HM_State();
 80010f4:	f000 f858 	bl	80011a8 <BOTONES_Update_HM_State>

	/* Envie estado hombre muerto a bus de salida CAN */
	BOTONES_Send_HM_State(bus_data.hm_state, &bus_can_output);
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <BOTONES_Process+0x28>)
 80010fa:	78db      	ldrb	r3, [r3, #3]
 80010fc:	4906      	ldr	r1, [pc, #24]	; (8001118 <BOTONES_Process+0x2c>)
 80010fe:	4618      	mov	r0, r3
 8001100:	f000 f8d4 	bl	80012ac <BOTONES_Send_HM_State>

	/* Envie modo de manejo presionado a bus de salida CAN */
	BOTONES_Send_DrivingMode_Btn(bus_data.btn_modo_manejo, &bus_can_output);
 8001104:	4b03      	ldr	r3, [pc, #12]	; (8001114 <BOTONES_Process+0x28>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	4903      	ldr	r1, [pc, #12]	; (8001118 <BOTONES_Process+0x2c>)
 800110a:	4618      	mov	r0, r3
 800110c:	f000 f8e8 	bl	80012e0 <BOTONES_Send_DrivingMode_Btn>
}
 8001110:	bf00      	nop
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20000000 	.word	0x20000000
 8001118:	2000002c 	.word	0x2000002c

0800111c <HAL_GPIO_EXTI_Callback>:
 *
 * @param GPIO_Pin
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BTN_ECO_Pin)
 8001126:	88fb      	ldrh	r3, [r7, #6]
 8001128:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800112c:	d102      	bne.n	8001134 <HAL_GPIO_EXTI_Callback+0x18>
	{
		bus_data.btn_modo_manejo = kBTN_ECO;
 800112e:	4b0b      	ldr	r3, [pc, #44]	; (800115c <HAL_GPIO_EXTI_Callback+0x40>)
 8001130:	2201      	movs	r2, #1
 8001132:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == BTN_NORMAL_Pin)
 8001134:	88fb      	ldrh	r3, [r7, #6]
 8001136:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800113a:	d102      	bne.n	8001142 <HAL_GPIO_EXTI_Callback+0x26>
	{
		bus_data.btn_modo_manejo = kBTN_NORMAL;
 800113c:	4b07      	ldr	r3, [pc, #28]	; (800115c <HAL_GPIO_EXTI_Callback+0x40>)
 800113e:	2202      	movs	r2, #2
 8001140:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == BTN_SPORT_Pin)
 8001142:	88fb      	ldrh	r3, [r7, #6]
 8001144:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001148:	d102      	bne.n	8001150 <HAL_GPIO_EXTI_Callback+0x34>
	{
		bus_data.btn_modo_manejo = kBTN_SPORT;
 800114a:	4b04      	ldr	r3, [pc, #16]	; (800115c <HAL_GPIO_EXTI_Callback+0x40>)
 800114c:	2203      	movs	r2, #3
 800114e:	701a      	strb	r2, [r3, #0]
	}
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	20000000 	.word	0x20000000

08001160 <BOTONES_Update_HM_Btns>:
 *
 * @param None
 * @retval None
 */
static void BOTONES_Update_HM_Btns(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
	/* Pulsador 1 hombre muerto */
	if(HAL_GPIO_ReadPin(BTN_HM1_GPIO_Port, BTN_HM1_Pin) == GPIO_PIN_RESET)
 8001164:	2108      	movs	r1, #8
 8001166:	480e      	ldr	r0, [pc, #56]	; (80011a0 <BOTONES_Update_HM_Btns+0x40>)
 8001168:	f004 f8e4 	bl	8005334 <HAL_GPIO_ReadPin>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d103      	bne.n	800117a <BOTONES_Update_HM_Btns+0x1a>
	{
		bus_data.btn_hm1 = kBTN_PRESSED;
 8001172:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <BOTONES_Update_HM_Btns+0x44>)
 8001174:	2201      	movs	r2, #1
 8001176:	705a      	strb	r2, [r3, #1]
 8001178:	e002      	b.n	8001180 <BOTONES_Update_HM_Btns+0x20>
	}
	else
	{
		bus_data.btn_hm1 = kBTN_NOT_PRESSED;
 800117a:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <BOTONES_Update_HM_Btns+0x44>)
 800117c:	2200      	movs	r2, #0
 800117e:	705a      	strb	r2, [r3, #1]
	}

	/* Pulsador 2 hombre muerto */
	if(HAL_GPIO_ReadPin(BTN_HM2_GPIO_Port, BTN_HM2_Pin) == GPIO_PIN_RESET)
 8001180:	2110      	movs	r1, #16
 8001182:	4807      	ldr	r0, [pc, #28]	; (80011a0 <BOTONES_Update_HM_Btns+0x40>)
 8001184:	f004 f8d6 	bl	8005334 <HAL_GPIO_ReadPin>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d103      	bne.n	8001196 <BOTONES_Update_HM_Btns+0x36>
	{
		bus_data.btn_hm2 = kBTN_PRESSED;
 800118e:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <BOTONES_Update_HM_Btns+0x44>)
 8001190:	2201      	movs	r2, #1
 8001192:	709a      	strb	r2, [r3, #2]
	}
	else
	{
		bus_data.btn_hm2 = kBTN_NOT_PRESSED;
	}
}
 8001194:	e002      	b.n	800119c <BOTONES_Update_HM_Btns+0x3c>
		bus_data.btn_hm2 = kBTN_NOT_PRESSED;
 8001196:	4b03      	ldr	r3, [pc, #12]	; (80011a4 <BOTONES_Update_HM_Btns+0x44>)
 8001198:	2200      	movs	r2, #0
 800119a:	709a      	strb	r2, [r3, #2]
}
 800119c:	bf00      	nop
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40021000 	.word	0x40021000
 80011a4:	20000000 	.word	0x20000000

080011a8 <BOTONES_Update_HM_State>:
 *
 * @param None
 * @retval None
 */
static void BOTONES_Update_HM_State(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
	static uint32_t tickstart = 0;

	static uint32_t beep_tickstart = 0;

	/* si no detectó pedal */
	if(bus_data.pedal_activo == 0)
 80011ac:	4b3a      	ldr	r3, [pc, #232]	; (8001298 <BOTONES_Update_HM_State+0xf0>)
 80011ae:	7b1b      	ldrb	r3, [r3, #12]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d068      	beq.n	8001286 <BOTONES_Update_HM_State+0xde>
	{
		return;
	}

	/* Si cualquiera de los pulsadores de hombre muerto están presionados -> hombre muerto OFF */
	if(bus_data.btn_hm1 == kBTN_PRESSED || bus_data.btn_hm2 == kBTN_PRESSED)
 80011b4:	4b38      	ldr	r3, [pc, #224]	; (8001298 <BOTONES_Update_HM_State+0xf0>)
 80011b6:	785b      	ldrb	r3, [r3, #1]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d003      	beq.n	80011c4 <BOTONES_Update_HM_State+0x1c>
 80011bc:	4b36      	ldr	r3, [pc, #216]	; (8001298 <BOTONES_Update_HM_State+0xf0>)
 80011be:	789b      	ldrb	r3, [r3, #2]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d108      	bne.n	80011d6 <BOTONES_Update_HM_State+0x2e>
	{
		bus_data.hm_state = kHOMBRE_MUERTO_OFF;
 80011c4:	4b34      	ldr	r3, [pc, #208]	; (8001298 <BOTONES_Update_HM_State+0xf0>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	70da      	strb	r2, [r3, #3]

		BSP_BUZZER_Off();
 80011ca:	f001 fc51 	bl	8002a70 <BSP_BUZZER_Off>

		hm_on_time_counting_state = HM_ON_TIME_COUNTING_START;
 80011ce:	4b33      	ldr	r3, [pc, #204]	; (800129c <BOTONES_Update_HM_State+0xf4>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	701a      	strb	r2, [r3, #0]
 80011d4:	e05e      	b.n	8001294 <BOTONES_Update_HM_State+0xec>
	}

	/* Si ámbos pulsadores de hombre muerto no están presionados -> conteo hombre muerto ON */
	else if(bus_data.btn_hm1 == kBTN_NOT_PRESSED && bus_data.btn_hm2 == kBTN_NOT_PRESSED)
 80011d6:	4b30      	ldr	r3, [pc, #192]	; (8001298 <BOTONES_Update_HM_State+0xf0>)
 80011d8:	785b      	ldrb	r3, [r3, #1]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d15a      	bne.n	8001294 <BOTONES_Update_HM_State+0xec>
 80011de:	4b2e      	ldr	r3, [pc, #184]	; (8001298 <BOTONES_Update_HM_State+0xf0>)
 80011e0:	789b      	ldrb	r3, [r3, #2]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d156      	bne.n	8001294 <BOTONES_Update_HM_State+0xec>
	{
		switch(hm_on_time_counting_state)
 80011e6:	4b2d      	ldr	r3, [pc, #180]	; (800129c <BOTONES_Update_HM_State+0xf4>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d03f      	beq.n	800126e <BOTONES_Update_HM_State+0xc6>
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	dc4b      	bgt.n	800128a <BOTONES_Update_HM_State+0xe2>
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d002      	beq.n	80011fc <BOTONES_Update_HM_State+0x54>
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d009      	beq.n	800120e <BOTONES_Update_HM_State+0x66>
					BSP_BUZZER_On();
				}

				break;
			default:
				break;
 80011fa:	e046      	b.n	800128a <BOTONES_Update_HM_State+0xe2>
				tickstart = HAL_GetTick();
 80011fc:	f001 fe90 	bl	8002f20 <HAL_GetTick>
 8001200:	4603      	mov	r3, r0
 8001202:	4a27      	ldr	r2, [pc, #156]	; (80012a0 <BOTONES_Update_HM_State+0xf8>)
 8001204:	6013      	str	r3, [r2, #0]
				hm_on_time_counting_state = HM_ON_TIME_COUNTING_CHECK;
 8001206:	4b25      	ldr	r3, [pc, #148]	; (800129c <BOTONES_Update_HM_State+0xf4>)
 8001208:	2201      	movs	r2, #1
 800120a:	701a      	strb	r2, [r3, #0]
				break;
 800120c:	e042      	b.n	8001294 <BOTONES_Update_HM_State+0xec>
				if(flag_hm_beep == HM_BEEP_ON)
 800120e:	4b25      	ldr	r3, [pc, #148]	; (80012a4 <BOTONES_Update_HM_State+0xfc>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d109      	bne.n	800122a <BOTONES_Update_HM_State+0x82>
					beep_tickstart = HAL_GetTick();
 8001216:	f001 fe83 	bl	8002f20 <HAL_GetTick>
 800121a:	4603      	mov	r3, r0
 800121c:	4a22      	ldr	r2, [pc, #136]	; (80012a8 <BOTONES_Update_HM_State+0x100>)
 800121e:	6013      	str	r3, [r2, #0]
					BSP_BUZZER_On();
 8001220:	f001 fc16 	bl	8002a50 <BSP_BUZZER_On>
					flag_hm_beep = HM_BEEP_OFF;
 8001224:	4b1f      	ldr	r3, [pc, #124]	; (80012a4 <BOTONES_Update_HM_State+0xfc>)
 8001226:	2201      	movs	r2, #1
 8001228:	701a      	strb	r2, [r3, #0]
				if(HAL_GetTick() - beep_tickstart > HM_BEEP_TIME_MS)
 800122a:	f001 fe79 	bl	8002f20 <HAL_GetTick>
 800122e:	4602      	mov	r2, r0
 8001230:	4b1d      	ldr	r3, [pc, #116]	; (80012a8 <BOTONES_Update_HM_State+0x100>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	2bc8      	cmp	r3, #200	; 0xc8
 8001238:	d901      	bls.n	800123e <BOTONES_Update_HM_State+0x96>
					BSP_BUZZER_Off();
 800123a:	f001 fc19 	bl	8002a70 <BSP_BUZZER_Off>
				if(HAL_GetTick() - tickstart > HM_TIME_TOLERANCE_MS)
 800123e:	f001 fe6f 	bl	8002f20 <HAL_GetTick>
 8001242:	4602      	mov	r2, r0
 8001244:	4b16      	ldr	r3, [pc, #88]	; (80012a0 <BOTONES_Update_HM_State+0xf8>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	f241 3288 	movw	r2, #5000	; 0x1388
 800124e:	4293      	cmp	r3, r2
 8001250:	d91d      	bls.n	800128e <BOTONES_Update_HM_State+0xe6>
					bus_data.hm_state = kHOMBRE_MUERTO_ON;
 8001252:	4b11      	ldr	r3, [pc, #68]	; (8001298 <BOTONES_Update_HM_State+0xf0>)
 8001254:	2201      	movs	r2, #1
 8001256:	70da      	strb	r2, [r3, #3]
					BSP_BUZZER_Off();
 8001258:	f001 fc0a 	bl	8002a70 <BSP_BUZZER_Off>
					beep_tickstart = HAL_GetTick();
 800125c:	f001 fe60 	bl	8002f20 <HAL_GetTick>
 8001260:	4603      	mov	r3, r0
 8001262:	4a11      	ldr	r2, [pc, #68]	; (80012a8 <BOTONES_Update_HM_State+0x100>)
 8001264:	6013      	str	r3, [r2, #0]
					hm_on_time_counting_state = HM_ON_TIME_FINISH;
 8001266:	4b0d      	ldr	r3, [pc, #52]	; (800129c <BOTONES_Update_HM_State+0xf4>)
 8001268:	2202      	movs	r2, #2
 800126a:	701a      	strb	r2, [r3, #0]
				break;
 800126c:	e00f      	b.n	800128e <BOTONES_Update_HM_State+0xe6>
				if(HAL_GetTick() - beep_tickstart > 500U)
 800126e:	f001 fe57 	bl	8002f20 <HAL_GetTick>
 8001272:	4602      	mov	r2, r0
 8001274:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <BOTONES_Update_HM_State+0x100>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800127e:	d908      	bls.n	8001292 <BOTONES_Update_HM_State+0xea>
					BSP_BUZZER_On();
 8001280:	f001 fbe6 	bl	8002a50 <BSP_BUZZER_On>
				break;
 8001284:	e005      	b.n	8001292 <BOTONES_Update_HM_State+0xea>
		return;
 8001286:	bf00      	nop
 8001288:	e004      	b.n	8001294 <BOTONES_Update_HM_State+0xec>
				break;
 800128a:	bf00      	nop
 800128c:	e002      	b.n	8001294 <BOTONES_Update_HM_State+0xec>
				break;
 800128e:	bf00      	nop
 8001290:	e000      	b.n	8001294 <BOTONES_Update_HM_State+0xec>
				break;
 8001292:	bf00      	nop
		}
	}

}
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000000 	.word	0x20000000
 800129c:	20000194 	.word	0x20000194
 80012a0:	20000198 	.word	0x20000198
 80012a4:	20000039 	.word	0x20000039
 80012a8:	2000019c 	.word	0x2000019c

080012ac <BOTONES_Send_HM_State>:
 *
 * @param to_send           Estado de hombre muerto a enviar
 * @param bus_can_output    Puntero a estructura de tipo typedef_bus2_t (bus de salida CAN)
 */
static void BOTONES_Send_HM_State(hm_state_t to_send, typedef_bus2_t* bus_can_output)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	6039      	str	r1, [r7, #0]
 80012b6:	71fb      	strb	r3, [r7, #7]
    /* Envío a bus de salida CAN */
    switch (to_send)
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d005      	beq.n	80012ca <BOTONES_Send_HM_State+0x1e>
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d107      	bne.n	80012d2 <BOTONES_Send_HM_State+0x26>
    {
    case kHOMBRE_MUERTO_ON:
        bus_can_output->hombre_muerto = CAN_VALUE_HOMBRE_MUERTO_ON;
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	2201      	movs	r2, #1
 80012c6:	705a      	strb	r2, [r3, #1]
        break;
 80012c8:	e004      	b.n	80012d4 <BOTONES_Send_HM_State+0x28>
    case kHOMBRE_MUERTO_OFF:
        bus_can_output->hombre_muerto = CAN_VALUE_HOMBRE_MUERTO_OFF;
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	2200      	movs	r2, #0
 80012ce:	705a      	strb	r2, [r3, #1]
        break;
 80012d0:	e000      	b.n	80012d4 <BOTONES_Send_HM_State+0x28>
    default:
        break;
 80012d2:	bf00      	nop
    }
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <BOTONES_Send_DrivingMode_Btn>:
 *
 * @param to_send           Modo de manejo presionado a enviar
 * @param bus_can_output    Puntero a estructura de tipo typedef_bus2_t (bus de salida CAN)
 */
static void BOTONES_Send_DrivingMode_Btn(btn_modo_manejo_t to_send, typedef_bus2_t* bus_can_output)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	6039      	str	r1, [r7, #0]
 80012ea:	71fb      	strb	r3, [r7, #7]
    /* Envío a bus de salida CAN */
    switch (to_send)
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	2b03      	cmp	r3, #3
 80012f0:	d81a      	bhi.n	8001328 <BOTONES_Send_DrivingMode_Btn+0x48>
 80012f2:	a201      	add	r2, pc, #4	; (adr r2, 80012f8 <BOTONES_Send_DrivingMode_Btn+0x18>)
 80012f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012f8:	08001309 	.word	0x08001309
 80012fc:	08001311 	.word	0x08001311
 8001300:	08001319 	.word	0x08001319
 8001304:	08001321 	.word	0x08001321
    {
    case kBTN_NONE:
        bus_can_output->botones_cambio_estado = CAN_VALUE_BTN_NONE;
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	2204      	movs	r2, #4
 800130c:	709a      	strb	r2, [r3, #2]
        break;
 800130e:	e00c      	b.n	800132a <BOTONES_Send_DrivingMode_Btn+0x4a>
    case kBTN_ECO:
        bus_can_output->botones_cambio_estado = CAN_VALUE_BTN_ECO;
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	2202      	movs	r2, #2
 8001314:	709a      	strb	r2, [r3, #2]
        break;
 8001316:	e008      	b.n	800132a <BOTONES_Send_DrivingMode_Btn+0x4a>
    case kBTN_NORMAL:
        bus_can_output->botones_cambio_estado = CAN_VALUE_BTN_NORMAL;
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	2201      	movs	r2, #1
 800131c:	709a      	strb	r2, [r3, #2]
        break;
 800131e:	e004      	b.n	800132a <BOTONES_Send_DrivingMode_Btn+0x4a>
    case kBTN_SPORT:
        bus_can_output->botones_cambio_estado = CAN_VALUE_BTN_SPORT;
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	2203      	movs	r2, #3
 8001324:	709a      	strb	r2, [r3, #2]
        break;
 8001326:	e000      	b.n	800132a <BOTONES_Send_DrivingMode_Btn+0x4a>
    default:
        break;
 8001328:	bf00      	nop
    }
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop

08001338 <BOTONES_HW_Init>:
/***********************************************************************************************************************
 * Public functions implementation
 **********************************************************************************************************************/

void BOTONES_HW_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
    MX_GPIO_Init();
 800133c:	f000 fb0c 	bl	8001958 <MX_GPIO_Init>
}
 8001340:	bf00      	nop
 8001342:	bd80      	pop	{r7, pc}

08001344 <MX_CAN2_Init>:

CAN_HandleTypeDef hcan2;

/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001348:	4b17      	ldr	r3, [pc, #92]	; (80013a8 <MX_CAN2_Init+0x64>)
 800134a:	4a18      	ldr	r2, [pc, #96]	; (80013ac <MX_CAN2_Init+0x68>)
 800134c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 800134e:	4b16      	ldr	r3, [pc, #88]	; (80013a8 <MX_CAN2_Init+0x64>)
 8001350:	2210      	movs	r2, #16
 8001352:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001354:	4b14      	ldr	r3, [pc, #80]	; (80013a8 <MX_CAN2_Init+0x64>)
 8001356:	2200      	movs	r2, #0
 8001358:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800135a:	4b13      	ldr	r3, [pc, #76]	; (80013a8 <MX_CAN2_Init+0x64>)
 800135c:	2200      	movs	r2, #0
 800135e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_5TQ;
 8001360:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <MX_CAN2_Init+0x64>)
 8001362:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001366:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 8001368:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <MX_CAN2_Init+0x64>)
 800136a:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800136e:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001370:	4b0d      	ldr	r3, [pc, #52]	; (80013a8 <MX_CAN2_Init+0x64>)
 8001372:	2200      	movs	r2, #0
 8001374:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = ENABLE;
 8001376:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <MX_CAN2_Init+0x64>)
 8001378:	2201      	movs	r2, #1
 800137a:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = ENABLE;
 800137c:	4b0a      	ldr	r3, [pc, #40]	; (80013a8 <MX_CAN2_Init+0x64>)
 800137e:	2201      	movs	r2, #1
 8001380:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = ENABLE;
 8001382:	4b09      	ldr	r3, [pc, #36]	; (80013a8 <MX_CAN2_Init+0x64>)
 8001384:	2201      	movs	r2, #1
 8001386:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001388:	4b07      	ldr	r3, [pc, #28]	; (80013a8 <MX_CAN2_Init+0x64>)
 800138a:	2200      	movs	r2, #0
 800138c:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800138e:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <MX_CAN2_Init+0x64>)
 8001390:	2200      	movs	r2, #0
 8001392:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001394:	4804      	ldr	r0, [pc, #16]	; (80013a8 <MX_CAN2_Init+0x64>)
 8001396:	f002 fb5f 	bl	8003a58 <HAL_CAN_Init>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 80013a0:	f000 fc52 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80013a4:	bf00      	nop
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	200001a0 	.word	0x200001a0
 80013ac:	40006800 	.word	0x40006800

080013b0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08a      	sub	sp, #40	; 0x28
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN2)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a28      	ldr	r2, [pc, #160]	; (8001470 <HAL_CAN_MspInit+0xc0>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d14a      	bne.n	8001468 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* CAN2 clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	613b      	str	r3, [r7, #16]
 80013d6:	4b27      	ldr	r3, [pc, #156]	; (8001474 <HAL_CAN_MspInit+0xc4>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	4a26      	ldr	r2, [pc, #152]	; (8001474 <HAL_CAN_MspInit+0xc4>)
 80013dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80013e0:	6413      	str	r3, [r2, #64]	; 0x40
 80013e2:	4b24      	ldr	r3, [pc, #144]	; (8001474 <HAL_CAN_MspInit+0xc4>)
 80013e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80013ea:	613b      	str	r3, [r7, #16]
 80013ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	4b20      	ldr	r3, [pc, #128]	; (8001474 <HAL_CAN_MspInit+0xc4>)
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	4a1f      	ldr	r2, [pc, #124]	; (8001474 <HAL_CAN_MspInit+0xc4>)
 80013f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013fc:	6413      	str	r3, [r2, #64]	; 0x40
 80013fe:	4b1d      	ldr	r3, [pc, #116]	; (8001474 <HAL_CAN_MspInit+0xc4>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	4b19      	ldr	r3, [pc, #100]	; (8001474 <HAL_CAN_MspInit+0xc4>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	4a18      	ldr	r2, [pc, #96]	; (8001474 <HAL_CAN_MspInit+0xc4>)
 8001414:	f043 0302 	orr.w	r3, r3, #2
 8001418:	6313      	str	r3, [r2, #48]	; 0x30
 800141a:	4b16      	ldr	r3, [pc, #88]	; (8001474 <HAL_CAN_MspInit+0xc4>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001426:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800142a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142c:	2302      	movs	r3, #2
 800142e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001434:	2303      	movs	r3, #3
 8001436:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001438:	2309      	movs	r3, #9
 800143a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800143c:	f107 0314 	add.w	r3, r7, #20
 8001440:	4619      	mov	r1, r3
 8001442:	480d      	ldr	r0, [pc, #52]	; (8001478 <HAL_CAN_MspInit+0xc8>)
 8001444:	f003 fde2 	bl	800500c <HAL_GPIO_Init>

    /* CAN2 interrupt Init */
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 8001448:	2200      	movs	r2, #0
 800144a:	2100      	movs	r1, #0
 800144c:	203f      	movs	r0, #63	; 0x3f
 800144e:	f003 fa36 	bl	80048be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8001452:	203f      	movs	r0, #63	; 0x3f
 8001454:	f003 fa4f 	bl	80048f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8001458:	2200      	movs	r2, #0
 800145a:	2100      	movs	r1, #0
 800145c:	2040      	movs	r0, #64	; 0x40
 800145e:	f003 fa2e 	bl	80048be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8001462:	2040      	movs	r0, #64	; 0x40
 8001464:	f003 fa47 	bl	80048f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8001468:	bf00      	nop
 800146a:	3728      	adds	r7, #40	; 0x28
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40006800 	.word	0x40006800
 8001474:	40023800 	.word	0x40023800
 8001478:	40020400 	.word	0x40020400

0800147c <CAN_APP_Process>:
 *
 * @param None
 * @retval None
 */
void CAN_APP_Process(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
	/** Increments every time CAN TX flag is set as CAN_TX_READY */
	static int can_tx_flag_count = 0;

    /* Recibió mensaje CAN */
    if (flag_rx_can == CAN_MSG_RECEIVED)
 8001480:	4b12      	ldr	r3, [pc, #72]	; (80014cc <CAN_APP_Process+0x50>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d10a      	bne.n	800149e <CAN_APP_Process+0x22>
    {
		/* Toggle LED 2 (Green LED) */
		BSP_LED_Toggle(LED2);
 8001488:	2001      	movs	r0, #1
 800148a:	f001 fb79 	bl	8002b80 <BSP_LED_Toggle>

        /* Guarda mensaje CAN recibido en bus de entrada CAN */
        CAN_APP_Store_ReceivedMessage();
 800148e:	f000 f867 	bl	8001560 <CAN_APP_Store_ReceivedMessage>

        /* Clear CAN received message flag */
        flag_rx_can = CAN_MSG_NOT_RECEIVED;
 8001492:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <CAN_APP_Process+0x50>)
 8001494:	2201      	movs	r2, #1
 8001496:	701a      	strb	r2, [r3, #0]

        /* Activa bandera para decodificar */
        flag_decodificar = DECODIFICA;
 8001498:	4b0d      	ldr	r3, [pc, #52]	; (80014d0 <CAN_APP_Process+0x54>)
 800149a:	2200      	movs	r2, #0
 800149c:	701a      	strb	r2, [r3, #0]
    }

    /* Hubo trigger para transmisión mensaje CAN */
    if (flag_tx_can == CAN_TX_READY)
 800149e:	4b0d      	ldr	r3, [pc, #52]	; (80014d4 <CAN_APP_Process+0x58>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d110      	bne.n	80014c8 <CAN_APP_Process+0x4c>
    {
    	/* Incrementa contador de bandera transmisión CAN */
    	can_tx_flag_count++;
 80014a6:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <CAN_APP_Process+0x5c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	3301      	adds	r3, #1
 80014ac:	4a0a      	ldr	r2, [pc, #40]	; (80014d8 <CAN_APP_Process+0x5c>)
 80014ae:	6013      	str	r3, [r2, #0]

    	/* Send bus variables every 100ms (CAN transmission timer is set to 100ms) */
    	if(can_tx_flag_count % 1 == 0)
    	{
    		/* Toggle LED 1 (Red LED) */
    		BSP_LED_Toggle(LED1);
 80014b0:	2000      	movs	r0, #0
 80014b2:	f001 fb65 	bl	8002b80 <BSP_LED_Toggle>

			/* Envío de datos del bus de salida CAN a módulo CAN */
			CAN_APP_Send_BusData(&bus_can_output);
 80014b6:	4809      	ldr	r0, [pc, #36]	; (80014dc <CAN_APP_Process+0x60>)
 80014b8:	f000 f812 	bl	80014e0 <CAN_APP_Send_BusData>

			/* Better reset this to zero */
			can_tx_flag_count = 0;
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <CAN_APP_Process+0x5c>)
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
    	}

        /* Clear CAN TX ready flag */
        flag_tx_can = CAN_TX_NOT_READY;
 80014c2:	4b04      	ldr	r3, [pc, #16]	; (80014d4 <CAN_APP_Process+0x58>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	701a      	strb	r2, [r3, #0]
    }
}
 80014c8:	bf00      	nop
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20000038 	.word	0x20000038
 80014d0:	2000003a 	.word	0x2000003a
 80014d4:	200001f4 	.word	0x200001f4
 80014d8:	200001cc 	.word	0x200001cc
 80014dc:	2000002c 	.word	0x2000002c

080014e0 <CAN_APP_Send_BusData>:
 *
 * @param bus_can_output Puntero a estructura de tipo typedef_bus2_t (bus de salida CAN)
 * @retval None
 */
void CAN_APP_Send_BusData(typedef_bus2_t *bus_can_output)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
	/* Index for CAN values array and CAN IDs array */
	static int i = 0;

	/* Bus data into CAN values array */
	can_values_array[0] = bus_can_output->pedal;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	781a      	ldrb	r2, [r3, #0]
 80014ec:	4b18      	ldr	r3, [pc, #96]	; (8001550 <CAN_APP_Send_BusData+0x70>)
 80014ee:	701a      	strb	r2, [r3, #0]
	can_values_array[1] = bus_can_output->hombre_muerto;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	785a      	ldrb	r2, [r3, #1]
 80014f4:	4b16      	ldr	r3, [pc, #88]	; (8001550 <CAN_APP_Send_BusData+0x70>)
 80014f6:	705a      	strb	r2, [r3, #1]
	can_values_array[2] = bus_can_output->botones_cambio_estado;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	789a      	ldrb	r2, [r3, #2]
 80014fc:	4b14      	ldr	r3, [pc, #80]	; (8001550 <CAN_APP_Send_BusData+0x70>)
 80014fe:	709a      	strb	r2, [r3, #2]
	can_values_array[3] = bus_can_output->perifericos_ok;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	78da      	ldrb	r2, [r3, #3]
 8001504:	4b12      	ldr	r3, [pc, #72]	; (8001550 <CAN_APP_Send_BusData+0x70>)
 8001506:	70da      	strb	r2, [r3, #3]

	/* Index exceeds number of messages to transmit */
	if(i >= CAN_NUM_OF_MSGS)
 8001508:	4b12      	ldr	r3, [pc, #72]	; (8001554 <CAN_APP_Send_BusData+0x74>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2b03      	cmp	r3, #3
 800150e:	dd03      	ble.n	8001518 <CAN_APP_Send_BusData+0x38>
	{
		i=0;
 8001510:	4b10      	ldr	r3, [pc, #64]	; (8001554 <CAN_APP_Send_BusData+0x74>)
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
		return;
 8001516:	e017      	b.n	8001548 <CAN_APP_Send_BusData+0x68>
	}

	/* Set up can_obj for message transmission */
	can_obj.Frame.id = can_ids_array[i];
 8001518:	4b0e      	ldr	r3, [pc, #56]	; (8001554 <CAN_APP_Send_BusData+0x74>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a0e      	ldr	r2, [pc, #56]	; (8001558 <CAN_APP_Send_BusData+0x78>)
 800151e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001522:	4a0e      	ldr	r2, [pc, #56]	; (800155c <CAN_APP_Send_BusData+0x7c>)
 8001524:	6013      	str	r3, [r2, #0]
	can_obj.Frame.payload_length = 1;
 8001526:	4b0d      	ldr	r3, [pc, #52]	; (800155c <CAN_APP_Send_BusData+0x7c>)
 8001528:	2201      	movs	r2, #1
 800152a:	73da      	strb	r2, [r3, #15]
	can_obj.Frame.payload_buff[0] = can_values_array[i];
 800152c:	4b09      	ldr	r3, [pc, #36]	; (8001554 <CAN_APP_Send_BusData+0x74>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a07      	ldr	r2, [pc, #28]	; (8001550 <CAN_APP_Send_BusData+0x70>)
 8001532:	5cd2      	ldrb	r2, [r2, r3]
 8001534:	4b09      	ldr	r3, [pc, #36]	; (800155c <CAN_APP_Send_BusData+0x7c>)
 8001536:	71da      	strb	r2, [r3, #7]

	/* Send message */
	CAN_API_Send_Message(&can_obj);
 8001538:	4808      	ldr	r0, [pc, #32]	; (800155c <CAN_APP_Send_BusData+0x7c>)
 800153a:	f001 fb63 	bl	8002c04 <CAN_API_Send_Message>

	i++;
 800153e:	4b05      	ldr	r3, [pc, #20]	; (8001554 <CAN_APP_Send_BusData+0x74>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	3301      	adds	r3, #1
 8001544:	4a03      	ldr	r2, [pc, #12]	; (8001554 <CAN_APP_Send_BusData+0x74>)
 8001546:	6013      	str	r3, [r2, #0]
}
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	200001c8 	.word	0x200001c8
 8001554:	200001d0 	.word	0x200001d0
 8001558:	080083dc 	.word	0x080083dc
 800155c:	200001d4 	.word	0x200001d4

08001560 <CAN_APP_Store_ReceivedMessage>:
 *
 * @param None
 * @retval None
 */
void CAN_APP_Store_ReceivedMessage(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
	switch(can_obj.Frame.id)
 8001564:	4b4c      	ldr	r3, [pc, #304]	; (8001698 <CAN_APP_Store_ReceivedMessage+0x138>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	3b10      	subs	r3, #16
 800156a:	2b30      	cmp	r3, #48	; 0x30
 800156c:	f200 808e 	bhi.w	800168c <CAN_APP_Store_ReceivedMessage+0x12c>
 8001570:	a201      	add	r2, pc, #4	; (adr r2, 8001578 <CAN_APP_Store_ReceivedMessage+0x18>)
 8001572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001576:	bf00      	nop
 8001578:	0800163d 	.word	0x0800163d
 800157c:	08001647 	.word	0x08001647
 8001580:	0800168d 	.word	0x0800168d
 8001584:	0800168d 	.word	0x0800168d
 8001588:	08001651 	.word	0x08001651
 800158c:	0800168d 	.word	0x0800168d
 8001590:	0800168d 	.word	0x0800168d
 8001594:	0800168d 	.word	0x0800168d
 8001598:	0800168d 	.word	0x0800168d
 800159c:	0800168d 	.word	0x0800168d
 80015a0:	0800168d 	.word	0x0800168d
 80015a4:	0800168d 	.word	0x0800168d
 80015a8:	0800168d 	.word	0x0800168d
 80015ac:	0800168d 	.word	0x0800168d
 80015b0:	0800168d 	.word	0x0800168d
 80015b4:	0800168d 	.word	0x0800168d
 80015b8:	0800165b 	.word	0x0800165b
 80015bc:	08001665 	.word	0x08001665
 80015c0:	0800168d 	.word	0x0800168d
 80015c4:	0800166f 	.word	0x0800166f
 80015c8:	0800168d 	.word	0x0800168d
 80015cc:	08001679 	.word	0x08001679
 80015d0:	0800168d 	.word	0x0800168d
 80015d4:	0800168d 	.word	0x0800168d
 80015d8:	0800168d 	.word	0x0800168d
 80015dc:	0800168d 	.word	0x0800168d
 80015e0:	0800168d 	.word	0x0800168d
 80015e4:	0800168d 	.word	0x0800168d
 80015e8:	0800168d 	.word	0x0800168d
 80015ec:	0800168d 	.word	0x0800168d
 80015f0:	0800168d 	.word	0x0800168d
 80015f4:	0800168d 	.word	0x0800168d
 80015f8:	0800168d 	.word	0x0800168d
 80015fc:	0800168d 	.word	0x0800168d
 8001600:	0800168d 	.word	0x0800168d
 8001604:	0800168d 	.word	0x0800168d
 8001608:	0800168d 	.word	0x0800168d
 800160c:	0800168d 	.word	0x0800168d
 8001610:	0800168d 	.word	0x0800168d
 8001614:	0800168d 	.word	0x0800168d
 8001618:	0800168d 	.word	0x0800168d
 800161c:	0800168d 	.word	0x0800168d
 8001620:	0800168d 	.word	0x0800168d
 8001624:	0800168d 	.word	0x0800168d
 8001628:	0800168d 	.word	0x0800168d
 800162c:	0800168d 	.word	0x0800168d
 8001630:	0800168d 	.word	0x0800168d
 8001634:	0800168d 	.word	0x0800168d
 8001638:	08001683 	.word	0x08001683
	{

	/* ------------------------ Control ----------------------- */

	case CAN_ID_CONTROL_ESTADO_MANEJO:
		bus_can_input.estado_manejo = can_obj.Frame.payload_buff[0];
 800163c:	4b16      	ldr	r3, [pc, #88]	; (8001698 <CAN_APP_Store_ReceivedMessage+0x138>)
 800163e:	79da      	ldrb	r2, [r3, #7]
 8001640:	4b16      	ldr	r3, [pc, #88]	; (800169c <CAN_APP_Store_ReceivedMessage+0x13c>)
 8001642:	701a      	strb	r2, [r3, #0]
		break;
 8001644:	e023      	b.n	800168e <CAN_APP_Store_ReceivedMessage+0x12e>
	case CAN_ID_CONTROL_ESTADO_FALLA:
		bus_can_input.estado_falla = can_obj.Frame.payload_buff[0];
 8001646:	4b14      	ldr	r3, [pc, #80]	; (8001698 <CAN_APP_Store_ReceivedMessage+0x138>)
 8001648:	79da      	ldrb	r2, [r3, #7]
 800164a:	4b14      	ldr	r3, [pc, #80]	; (800169c <CAN_APP_Store_ReceivedMessage+0x13c>)
 800164c:	705a      	strb	r2, [r3, #1]
		break;
 800164e:	e01e      	b.n	800168e <CAN_APP_Store_ReceivedMessage+0x12e>
	case CAN_ID_CONTROL_OK:
		bus_can_input.control_ok = can_obj.Frame.payload_buff[0];
 8001650:	4b11      	ldr	r3, [pc, #68]	; (8001698 <CAN_APP_Store_ReceivedMessage+0x138>)
 8001652:	79da      	ldrb	r2, [r3, #7]
 8001654:	4b11      	ldr	r3, [pc, #68]	; (800169c <CAN_APP_Store_ReceivedMessage+0x13c>)
 8001656:	709a      	strb	r2, [r3, #2]
		break;
 8001658:	e019      	b.n	800168e <CAN_APP_Store_ReceivedMessage+0x12e>

	/* ------------------------- BMS -------------------------- */

	case CAN_ID_BMS_VOLTAJE:
		bus_can_input.voltaje_bms = can_obj.Frame.payload_buff[0];
 800165a:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <CAN_APP_Store_ReceivedMessage+0x138>)
 800165c:	79da      	ldrb	r2, [r3, #7]
 800165e:	4b0f      	ldr	r3, [pc, #60]	; (800169c <CAN_APP_Store_ReceivedMessage+0x13c>)
 8001660:	70da      	strb	r2, [r3, #3]
		break;
 8001662:	e014      	b.n	800168e <CAN_APP_Store_ReceivedMessage+0x12e>
	case CAN_ID_BMS_CORRIENTE:
		bus_can_input.corriente_bms = can_obj.Frame.payload_buff[0];
 8001664:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <CAN_APP_Store_ReceivedMessage+0x138>)
 8001666:	79da      	ldrb	r2, [r3, #7]
 8001668:	4b0c      	ldr	r3, [pc, #48]	; (800169c <CAN_APP_Store_ReceivedMessage+0x13c>)
 800166a:	711a      	strb	r2, [r3, #4]
		break;
 800166c:	e00f      	b.n	800168e <CAN_APP_Store_ReceivedMessage+0x12e>
	case CAN_ID_BMS_POTENCIA:
		bus_can_input.potencia_bms = can_obj.Frame.payload_buff[0];
 800166e:	4b0a      	ldr	r3, [pc, #40]	; (8001698 <CAN_APP_Store_ReceivedMessage+0x138>)
 8001670:	79da      	ldrb	r2, [r3, #7]
 8001672:	4b0a      	ldr	r3, [pc, #40]	; (800169c <CAN_APP_Store_ReceivedMessage+0x13c>)
 8001674:	715a      	strb	r2, [r3, #5]
		break;
 8001676:	e00a      	b.n	800168e <CAN_APP_Store_ReceivedMessage+0x12e>
	case CAN_ID_BMS_NIVEL_BATERIA:
		bus_can_input.nivel_bateria_bms = can_obj.Frame.payload_buff[0];
 8001678:	4b07      	ldr	r3, [pc, #28]	; (8001698 <CAN_APP_Store_ReceivedMessage+0x138>)
 800167a:	79da      	ldrb	r2, [r3, #7]
 800167c:	4b07      	ldr	r3, [pc, #28]	; (800169c <CAN_APP_Store_ReceivedMessage+0x13c>)
 800167e:	719a      	strb	r2, [r3, #6]
		break;
 8001680:	e005      	b.n	800168e <CAN_APP_Store_ReceivedMessage+0x12e>

	/* ----------------------- Inversor ----------------------- */

	case CAN_ID_INVERSOR_VELOCIDAD:
		bus_can_input.velocidad_inv = can_obj.Frame.payload_buff[0];
 8001682:	4b05      	ldr	r3, [pc, #20]	; (8001698 <CAN_APP_Store_ReceivedMessage+0x138>)
 8001684:	79da      	ldrb	r2, [r3, #7]
 8001686:	4b05      	ldr	r3, [pc, #20]	; (800169c <CAN_APP_Store_ReceivedMessage+0x13c>)
 8001688:	71da      	strb	r2, [r3, #7]
		break;
 800168a:	e000      	b.n	800168e <CAN_APP_Store_ReceivedMessage+0x12e>

    default:
        break;
 800168c:	bf00      	nop
	}
}
 800168e:	bf00      	nop
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	200001d4 	.word	0x200001d4
 800169c:	20000030 	.word	0x20000030

080016a0 <CAN_HW_Init>:
/***********************************************************************************************************************
 * Public functions implementation
 **********************************************************************************************************************/

void CAN_HW_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af04      	add	r7, sp, #16
	/* Inicializa CAN usando driver */
	CAN_API_Init(&can_obj,
 80016a6:	4b07      	ldr	r3, [pc, #28]	; (80016c4 <CAN_HW_Init+0x24>)
 80016a8:	9302      	str	r3, [sp, #8]
 80016aa:	4b07      	ldr	r3, [pc, #28]	; (80016c8 <CAN_HW_Init+0x28>)
 80016ac:	9301      	str	r3, [sp, #4]
 80016ae:	4b07      	ldr	r3, [pc, #28]	; (80016cc <CAN_HW_Init+0x2c>)
 80016b0:	9300      	str	r3, [sp, #0]
 80016b2:	4b07      	ldr	r3, [pc, #28]	; (80016d0 <CAN_HW_Init+0x30>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	2100      	movs	r1, #0
 80016b8:	4806      	ldr	r0, [pc, #24]	; (80016d4 <CAN_HW_Init+0x34>)
 80016ba:	f001 fa7b 	bl	8002bb4 <CAN_API_Init>
				 NORMAL_MSG,
				 CAN_Wrapper_Init,
				 CAN_Wrapper_TransmitData,
				 CAN_Wrapper_ReceiveData,
				 CAN_Wrapper_DataCount);
}
 80016be:	bf00      	nop
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	08002d59 	.word	0x08002d59
 80016c8:	08002d29 	.word	0x08002d29
 80016cc:	08002cd1 	.word	0x08002cd1
 80016d0:	08002c79 	.word	0x08002c79
 80016d4:	200001d4 	.word	0x200001d4

080016d8 <HAL_CAN_RxFifo0MsgPendingCallback>:

/*
 * Callback mensaje CAN recibido
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
    /* The flag indicates that the callback was called */
    flag_rx_can = CAN_MSG_RECEIVED;
 80016e0:	4b07      	ldr	r3, [pc, #28]	; (8001700 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	701a      	strb	r2, [r3, #0]

    /* Get the received message */
	if(CAN_API_Read_Message(&can_obj) != CAN_STATUS_OK)
 80016e6:	4807      	ldr	r0, [pc, #28]	; (8001704 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80016e8:	f001 fab3 	bl	8002c52 <CAN_API_Read_Message>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
	{
		Error_Handler();
 80016f2:	f000 faa9 	bl	8001c48 <Error_Handler>
	}
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000038 	.word	0x20000038
 8001704:	200001d4 	.word	0x200001d4

08001708 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
	flag = 1;
 8001710:	4b04      	ldr	r3, [pc, #16]	; (8001724 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 8001712:	2201      	movs	r2, #1
 8001714:	701a      	strb	r2, [r3, #0]
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	200001f5 	.word	0x200001f5

08001728 <HAL_TIM_PeriodElapsedCallback>:

/*
 * Callback timer trigger de transmisión de datos de bus de salida CAN a módulo CAN
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
		}
	}
#else
	static int i = 0;

	if(htim == &htim7)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4a13      	ldr	r2, [pc, #76]	; (8001780 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d11c      	bne.n	8001772 <HAL_TIM_PeriodElapsedCallback+0x4a>
	{
		i++;
 8001738:	4b12      	ldr	r3, [pc, #72]	; (8001784 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	3301      	adds	r3, #1
 800173e:	4a11      	ldr	r2, [pc, #68]	; (8001784 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001740:	6013      	str	r3, [r2, #0]

		/* The flag indicates that the callback was called */
		flag_tx_can = CAN_TX_READY;
 8001742:	4b11      	ldr	r3, [pc, #68]	; (8001788 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001744:	2200      	movs	r2, #0
 8001746:	701a      	strb	r2, [r3, #0]

		/* 10*100ms = 1s */
		if(i%10==0)
 8001748:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800174a:	6819      	ldr	r1, [r3, #0]
 800174c:	4b0f      	ldr	r3, [pc, #60]	; (800178c <HAL_TIM_PeriodElapsedCallback+0x64>)
 800174e:	fb83 2301 	smull	r2, r3, r3, r1
 8001752:	109a      	asrs	r2, r3, #2
 8001754:	17cb      	asrs	r3, r1, #31
 8001756:	1ad2      	subs	r2, r2, r3
 8001758:	4613      	mov	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	4413      	add	r3, r2
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	1aca      	subs	r2, r1, r3
 8001762:	2a00      	cmp	r2, #0
 8001764:	d105      	bne.n	8001772 <HAL_TIM_PeriodElapsedCallback+0x4a>
		{
			/* The flag indicates that the callback was called */
			flag_hm_beep = HM_BEEP_ON;
 8001766:	4b0a      	ldr	r3, [pc, #40]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001768:	2200      	movs	r2, #0
 800176a:	701a      	strb	r2, [r3, #0]

			i=0;
 800176c:	4b05      	ldr	r3, [pc, #20]	; (8001784 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
		}
	}
#endif /* SEND_TEST_MESSAGE */
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	20000260 	.word	0x20000260
 8001784:	200001f8 	.word	0x200001f8
 8001788:	200001f4 	.word	0x200001f4
 800178c:	66666667 	.word	0x66666667
 8001790:	20000039 	.word	0x20000039

08001794 <DECODE_DATA_Process>:
 *
 * @param None
 * @retval None
 */
void DECODE_DATA_Process(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
    if (flag_decodificar == DECODIFICA)
 8001798:	4b07      	ldr	r3, [pc, #28]	; (80017b8 <DECODE_DATA_Process+0x24>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d108      	bne.n	80017b2 <DECODE_DATA_Process+0x1e>
    {
    	DECODE_DATA_Decode_Control();
 80017a0:	f000 f80c 	bl	80017bc <DECODE_DATA_Decode_Control>
    	DECODE_DATA_Decode_Bms();
 80017a4:	f000 f862 	bl	800186c <DECODE_DATA_Decode_Bms>
    	DECODE_DATA_Decode_Inversor();
 80017a8:	f000 f8a0 	bl	80018ec <DECODE_DATA_Decode_Inversor>

        flag_decodificar = NO_DECODIFICA;
 80017ac:	4b02      	ldr	r3, [pc, #8]	; (80017b8 <DECODE_DATA_Process+0x24>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	701a      	strb	r2, [r3, #0]
    }
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	2000003a 	.word	0x2000003a

080017bc <DECODE_DATA_Decode_Control>:
 * los datos en la estructura Rx_Control del tipo rx_control_vars_t y que
 * se encuentra en el bus_data.
 *
 */
static void DECODE_DATA_Decode_Control(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
    /* Decodifica info de Control */
    switch (bus_can_input.control_ok)
 80017c0:	4b28      	ldr	r3, [pc, #160]	; (8001864 <DECODE_DATA_Decode_Control+0xa8>)
 80017c2:	789b      	ldrb	r3, [r3, #2]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d002      	beq.n	80017ce <DECODE_DATA_Decode_Control+0x12>
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d005      	beq.n	80017d8 <DECODE_DATA_Decode_Control+0x1c>
 80017cc:	e009      	b.n	80017e2 <DECODE_DATA_Decode_Control+0x26>
    {
    case CAN_VALUE_MODULE_OK:
        Rx_Control->control_ok = kMODULE_INFO_OK;
 80017ce:	4b26      	ldr	r3, [pc, #152]	; (8001868 <DECODE_DATA_Decode_Control+0xac>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2200      	movs	r2, #0
 80017d4:	709a      	strb	r2, [r3, #2]
        break;
 80017d6:	e004      	b.n	80017e2 <DECODE_DATA_Decode_Control+0x26>
    case CAN_VALUE_MODULE_ERROR:
        Rx_Control->control_ok = kMODULE_INFO_ERROR;
 80017d8:	4b23      	ldr	r3, [pc, #140]	; (8001868 <DECODE_DATA_Decode_Control+0xac>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2201      	movs	r2, #1
 80017de:	709a      	strb	r2, [r3, #2]
        break;
 80017e0:	bf00      	nop
    }

	/* Decodifica modos de manejo de Control */
    switch (bus_can_input.estado_manejo)
 80017e2:	4b20      	ldr	r3, [pc, #128]	; (8001864 <DECODE_DATA_Decode_Control+0xa8>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	2b04      	cmp	r3, #4
 80017e8:	d00f      	beq.n	800180a <DECODE_DATA_Decode_Control+0x4e>
 80017ea:	2b04      	cmp	r3, #4
 80017ec:	dc12      	bgt.n	8001814 <DECODE_DATA_Decode_Control+0x58>
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d006      	beq.n	8001800 <DECODE_DATA_Decode_Control+0x44>
 80017f2:	2b03      	cmp	r3, #3
 80017f4:	d10e      	bne.n	8001814 <DECODE_DATA_Decode_Control+0x58>
    {
    case CAN_VALUE_DRIVING_MODE_ECO:
    	Rx_Control->driving_mode = kDRIVING_MODE_ECO;
 80017f6:	4b1c      	ldr	r3, [pc, #112]	; (8001868 <DECODE_DATA_Decode_Control+0xac>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2200      	movs	r2, #0
 80017fc:	701a      	strb	r2, [r3, #0]
        break;
 80017fe:	e009      	b.n	8001814 <DECODE_DATA_Decode_Control+0x58>
    case CAN_VALUE_DRIVING_MODE_NORMAL:
    	Rx_Control->driving_mode = kDRIVING_MODE_NORMAL;
 8001800:	4b19      	ldr	r3, [pc, #100]	; (8001868 <DECODE_DATA_Decode_Control+0xac>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2201      	movs	r2, #1
 8001806:	701a      	strb	r2, [r3, #0]
        break;
 8001808:	e004      	b.n	8001814 <DECODE_DATA_Decode_Control+0x58>
    case CAN_VALUE_DRIVING_MODE_SPORT:
    	Rx_Control->driving_mode = kDRIVING_MODE_SPORT;
 800180a:	4b17      	ldr	r3, [pc, #92]	; (8001868 <DECODE_DATA_Decode_Control+0xac>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2202      	movs	r2, #2
 8001810:	701a      	strb	r2, [r3, #0]
        break;
 8001812:	bf00      	nop
    }

    /* Decodifica fallas de Control */
    switch (bus_can_input.estado_falla)
 8001814:	4b13      	ldr	r3, [pc, #76]	; (8001864 <DECODE_DATA_Decode_Control+0xa8>)
 8001816:	785b      	ldrb	r3, [r3, #1]
 8001818:	2b03      	cmp	r3, #3
 800181a:	d81e      	bhi.n	800185a <DECODE_DATA_Decode_Control+0x9e>
 800181c:	a201      	add	r2, pc, #4	; (adr r2, 8001824 <DECODE_DATA_Decode_Control+0x68>)
 800181e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001822:	bf00      	nop
 8001824:	08001835 	.word	0x08001835
 8001828:	0800183f 	.word	0x0800183f
 800182c:	08001849 	.word	0x08001849
 8001830:	08001851 	.word	0x08001851
    {
    case CAN_VALUE_FAILURE_OK:
    	Rx_Control->failure = kFAILURE_OK;
 8001834:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <DECODE_DATA_Decode_Control+0xac>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2200      	movs	r2, #0
 800183a:	705a      	strb	r2, [r3, #1]
        break;
 800183c:	e00d      	b.n	800185a <DECODE_DATA_Decode_Control+0x9e>
    case CAN_VALUE_FAILURE_CAUTION1:
    	Rx_Control->failure = kFAILURE_CAUTION1;
 800183e:	4b0a      	ldr	r3, [pc, #40]	; (8001868 <DECODE_DATA_Decode_Control+0xac>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2201      	movs	r2, #1
 8001844:	705a      	strb	r2, [r3, #1]
        break;
 8001846:	e008      	b.n	800185a <DECODE_DATA_Decode_Control+0x9e>
    case CAN_VALUE_FAILURE_CAUTION2:
    	Rx_Control->failure = kFAILURE_CAUTION2;
 8001848:	4b07      	ldr	r3, [pc, #28]	; (8001868 <DECODE_DATA_Decode_Control+0xac>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2202      	movs	r2, #2
 800184e:	705a      	strb	r2, [r3, #1]
    case CAN_VALUE_FAILURE_AUTOKILL:
    	Rx_Control->failure = kFAILURE_AUTOKILL;
 8001850:	4b05      	ldr	r3, [pc, #20]	; (8001868 <DECODE_DATA_Decode_Control+0xac>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2203      	movs	r2, #3
 8001856:	705a      	strb	r2, [r3, #1]
        break;
 8001858:	bf00      	nop
    }
}
 800185a:	bf00      	nop
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	20000030 	.word	0x20000030
 8001868:	2000003c 	.word	0x2000003c

0800186c <DECODE_DATA_Decode_Bms>:
 * los datos en la estructura Rx_Bms del tipo rx_bms_vars_t y que
 * se encuentra en el bus_data.
 *
 */
static void DECODE_DATA_Decode_Bms(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
	/* Decodifica las variables analógicas de BMS */
    Rx_Bms->voltaje = (float)bus_can_input.voltaje_bms / 2.0;
 8001870:	4b1c      	ldr	r3, [pc, #112]	; (80018e4 <DECODE_DATA_Decode_Bms+0x78>)
 8001872:	78db      	ldrb	r3, [r3, #3]
 8001874:	ee07 3a90 	vmov	s15, r3
 8001878:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800187c:	4b1a      	ldr	r3, [pc, #104]	; (80018e8 <DECODE_DATA_Decode_Bms+0x7c>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001884:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001888:	edc3 7a00 	vstr	s15, [r3]
    Rx_Bms->corriente = (float)bus_can_input.corriente_bms;
 800188c:	4b15      	ldr	r3, [pc, #84]	; (80018e4 <DECODE_DATA_Decode_Bms+0x78>)
 800188e:	791a      	ldrb	r2, [r3, #4]
 8001890:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <DECODE_DATA_Decode_Bms+0x7c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	ee07 2a90 	vmov	s15, r2
 8001898:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800189c:	edc3 7a01 	vstr	s15, [r3, #4]
    Rx_Bms->potencia = (float)bus_can_input.potencia_bms * 10.0;
 80018a0:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <DECODE_DATA_Decode_Bms+0x78>)
 80018a2:	795b      	ldrb	r3, [r3, #5]
 80018a4:	ee07 3a90 	vmov	s15, r3
 80018a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018ac:	4b0e      	ldr	r3, [pc, #56]	; (80018e8 <DECODE_DATA_Decode_Bms+0x7c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80018b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018b8:	edc3 7a03 	vstr	s15, [r3, #12]
    Rx_Bms->nivel_bateria = (float)bus_can_input.nivel_bateria_bms / 2.0;
 80018bc:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <DECODE_DATA_Decode_Bms+0x78>)
 80018be:	799b      	ldrb	r3, [r3, #6]
 80018c0:	ee07 3a90 	vmov	s15, r3
 80018c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018c8:	4b07      	ldr	r3, [pc, #28]	; (80018e8 <DECODE_DATA_Decode_Bms+0x7c>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80018d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018d4:	edc3 7a05 	vstr	s15, [r3, #20]
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	20000030 	.word	0x20000030
 80018e8:	20000040 	.word	0x20000040

080018ec <DECODE_DATA_Decode_Inversor>:
 * los datos en la estructura Rx_Inversor del tipo rx_inversor_vars_t y
 * que se encuentra en el bus_data.
 *
 */
static void DECODE_DATA_Decode_Inversor(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
	/* Decodifica las variables analógicas de Inversor */
    Rx_Inversor->velocidad = (float)bus_can_input.velocidad_inv;
 80018f0:	4b07      	ldr	r3, [pc, #28]	; (8001910 <DECODE_DATA_Decode_Inversor+0x24>)
 80018f2:	79da      	ldrb	r2, [r3, #7]
 80018f4:	4b07      	ldr	r3, [pc, #28]	; (8001914 <DECODE_DATA_Decode_Inversor+0x28>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	ee07 2a90 	vmov	s15, r2
 80018fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001900:	edc3 7a00 	vstr	s15, [r3]
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	20000030 	.word	0x20000030
 8001914:	20000044 	.word	0x20000044

08001918 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	607b      	str	r3, [r7, #4]
 8001922:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <MX_DMA_Init+0x3c>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	4a0b      	ldr	r2, [pc, #44]	; (8001954 <MX_DMA_Init+0x3c>)
 8001928:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800192c:	6313      	str	r3, [r2, #48]	; 0x30
 800192e:	4b09      	ldr	r3, [pc, #36]	; (8001954 <MX_DMA_Init+0x3c>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001936:	607b      	str	r3, [r7, #4]
 8001938:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800193a:	2200      	movs	r2, #0
 800193c:	2100      	movs	r1, #0
 800193e:	2038      	movs	r0, #56	; 0x38
 8001940:	f002 ffbd 	bl	80048be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001944:	2038      	movs	r0, #56	; 0x38
 8001946:	f002 ffd6 	bl	80048f6 <HAL_NVIC_EnableIRQ>

}
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40023800 	.word	0x40023800

08001958 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b08a      	sub	sp, #40	; 0x28
 800195c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195e:	f107 0314 	add.w	r3, r7, #20
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	605a      	str	r2, [r3, #4]
 8001968:	609a      	str	r2, [r3, #8]
 800196a:	60da      	str	r2, [r3, #12]
 800196c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	613b      	str	r3, [r7, #16]
 8001972:	4b4e      	ldr	r3, [pc, #312]	; (8001aac <MX_GPIO_Init+0x154>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	4a4d      	ldr	r2, [pc, #308]	; (8001aac <MX_GPIO_Init+0x154>)
 8001978:	f043 0310 	orr.w	r3, r3, #16
 800197c:	6313      	str	r3, [r2, #48]	; 0x30
 800197e:	4b4b      	ldr	r3, [pc, #300]	; (8001aac <MX_GPIO_Init+0x154>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	f003 0310 	and.w	r3, r3, #16
 8001986:	613b      	str	r3, [r7, #16]
 8001988:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	4b47      	ldr	r3, [pc, #284]	; (8001aac <MX_GPIO_Init+0x154>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	4a46      	ldr	r2, [pc, #280]	; (8001aac <MX_GPIO_Init+0x154>)
 8001994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001998:	6313      	str	r3, [r2, #48]	; 0x30
 800199a:	4b44      	ldr	r3, [pc, #272]	; (8001aac <MX_GPIO_Init+0x154>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	60bb      	str	r3, [r7, #8]
 80019aa:	4b40      	ldr	r3, [pc, #256]	; (8001aac <MX_GPIO_Init+0x154>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	4a3f      	ldr	r2, [pc, #252]	; (8001aac <MX_GPIO_Init+0x154>)
 80019b0:	f043 0302 	orr.w	r3, r3, #2
 80019b4:	6313      	str	r3, [r2, #48]	; 0x30
 80019b6:	4b3d      	ldr	r3, [pc, #244]	; (8001aac <MX_GPIO_Init+0x154>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	60bb      	str	r3, [r7, #8]
 80019c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	607b      	str	r3, [r7, #4]
 80019c6:	4b39      	ldr	r3, [pc, #228]	; (8001aac <MX_GPIO_Init+0x154>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	4a38      	ldr	r2, [pc, #224]	; (8001aac <MX_GPIO_Init+0x154>)
 80019cc:	f043 0304 	orr.w	r3, r3, #4
 80019d0:	6313      	str	r3, [r2, #48]	; 0x30
 80019d2:	4b36      	ldr	r3, [pc, #216]	; (8001aac <MX_GPIO_Init+0x154>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	f003 0304 	and.w	r3, r3, #4
 80019da:	607b      	str	r3, [r7, #4]
 80019dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	603b      	str	r3, [r7, #0]
 80019e2:	4b32      	ldr	r3, [pc, #200]	; (8001aac <MX_GPIO_Init+0x154>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	4a31      	ldr	r2, [pc, #196]	; (8001aac <MX_GPIO_Init+0x154>)
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	6313      	str	r3, [r2, #48]	; 0x30
 80019ee:	4b2f      	ldr	r3, [pc, #188]	; (8001aac <MX_GPIO_Init+0x154>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	603b      	str	r3, [r7, #0]
 80019f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ECO_GPIO_Port, LED_ECO_Pin, GPIO_PIN_RESET);
 80019fa:	2200      	movs	r2, #0
 80019fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a00:	482b      	ldr	r0, [pc, #172]	; (8001ab0 <MX_GPIO_Init+0x158>)
 8001a02:	f003 fcaf 	bl	8005364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_NORMAL_Pin|LED_SPORT_Pin, GPIO_PIN_RESET);
 8001a06:	2200      	movs	r2, #0
 8001a08:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 8001a0c:	4829      	ldr	r0, [pc, #164]	; (8001ab4 <MX_GPIO_Init+0x15c>)
 8001a0e:	f003 fca9 	bl	8005364 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = BTN_HM1_Pin|BTN_HM2_Pin;
 8001a12:	2318      	movs	r3, #24
 8001a14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a16:	2300      	movs	r3, #0
 8001a18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a1e:	f107 0314 	add.w	r3, r7, #20
 8001a22:	4619      	mov	r1, r3
 8001a24:	4824      	ldr	r0, [pc, #144]	; (8001ab8 <MX_GPIO_Init+0x160>)
 8001a26:	f003 faf1 	bl	800500c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_ECO_Pin;
 8001a2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a30:	2301      	movs	r3, #1
 8001a32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a34:	2300      	movs	r3, #0
 8001a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_ECO_GPIO_Port, &GPIO_InitStruct);
 8001a3c:	f107 0314 	add.w	r3, r7, #20
 8001a40:	4619      	mov	r1, r3
 8001a42:	481b      	ldr	r0, [pc, #108]	; (8001ab0 <MX_GPIO_Init+0x158>)
 8001a44:	f003 fae2 	bl	800500c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = BTN_ECO_Pin|BTN_NORMAL_Pin|BTN_SPORT_Pin;
 8001a48:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
 8001a4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a4e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4815      	ldr	r0, [pc, #84]	; (8001ab4 <MX_GPIO_Init+0x15c>)
 8001a60:	f003 fad4 	bl	800500c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED_NORMAL_Pin|LED_SPORT_Pin;
 8001a64:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001a68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a72:	2300      	movs	r3, #0
 8001a74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a76:	f107 0314 	add.w	r3, r7, #20
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	480d      	ldr	r0, [pc, #52]	; (8001ab4 <MX_GPIO_Init+0x15c>)
 8001a7e:	f003 fac5 	bl	800500c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001a82:	2200      	movs	r2, #0
 8001a84:	2100      	movs	r1, #0
 8001a86:	2017      	movs	r0, #23
 8001a88:	f002 ff19 	bl	80048be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001a8c:	2017      	movs	r0, #23
 8001a8e:	f002 ff32 	bl	80048f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001a92:	2200      	movs	r2, #0
 8001a94:	2100      	movs	r1, #0
 8001a96:	2028      	movs	r0, #40	; 0x28
 8001a98:	f002 ff11 	bl	80048be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a9c:	2028      	movs	r0, #40	; 0x28
 8001a9e:	f002 ff2a 	bl	80048f6 <HAL_NVIC_EnableIRQ>

}
 8001aa2:	bf00      	nop
 8001aa4:	3728      	adds	r7, #40	; 0x28
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	40020800 	.word	0x40020800
 8001ab4:	40020000 	.word	0x40020000
 8001ab8:	40021000 	.word	0x40021000

08001abc <INDICATORS_Process>:
 *
 * @param None
 * @retval None
 */
void INDICATORS_Process(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
	//BSP_LED_Off(LED1);
	//BSP_LED_Off(LED2);
	//BSP_LED_Off(LED3);

	asm("nop");
 8001ac0:	bf00      	nop
}
 8001ac2:	bf00      	nop
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <INDICATORS_Finish_StartUp>:
 *
 * @param None
 * @retval None
 */
void INDICATORS_Finish_StartUp(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
    uint32_t tickstart;

    uint32_t blink_tickstart;

    BSP_BUZZER_On();
 8001ad2:	f000 ffbd 	bl	8002a50 <BSP_BUZZER_On>

    /* Get ticks for the turn off time of LEDs and buzzer */
    tickstart = HAL_GetTick();
 8001ad6:	f001 fa23 	bl	8002f20 <HAL_GetTick>
 8001ada:	6038      	str	r0, [r7, #0]

    /* Ticks for the blinking of the LEDs */
    blink_tickstart = tickstart;
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	607b      	str	r3, [r7, #4]

    BSP_LED_Off(LED1);
 8001ae0:	2000      	movs	r0, #0
 8001ae2:	f001 f833 	bl	8002b4c <BSP_LED_Off>
    BSP_LED_Off(LED2);
 8001ae6:	2001      	movs	r0, #1
 8001ae8:	f001 f830 	bl	8002b4c <BSP_LED_Off>
    BSP_LED_Off(LED3);
 8001aec:	2002      	movs	r0, #2
 8001aee:	f001 f82d 	bl	8002b4c <BSP_LED_Off>

    while(1)
    {
        if((HAL_GetTick() - blink_tickstart) > BLINK_TIME_MS)
 8001af2:	f001 fa15 	bl	8002f20 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2bfa      	cmp	r3, #250	; 0xfa
 8001afe:	d90b      	bls.n	8001b18 <INDICATORS_Finish_StartUp+0x4c>
        {
            BSP_LED_Toggle(LED1);
 8001b00:	2000      	movs	r0, #0
 8001b02:	f001 f83d 	bl	8002b80 <BSP_LED_Toggle>
            BSP_LED_Toggle(LED2);
 8001b06:	2001      	movs	r0, #1
 8001b08:	f001 f83a 	bl	8002b80 <BSP_LED_Toggle>
            BSP_LED_Toggle(LED3);
 8001b0c:	2002      	movs	r0, #2
 8001b0e:	f001 f837 	bl	8002b80 <BSP_LED_Toggle>

            blink_tickstart = HAL_GetTick();
 8001b12:	f001 fa05 	bl	8002f20 <HAL_GetTick>
 8001b16:	6078      	str	r0, [r7, #4]
        }

        if((HAL_GetTick() - tickstart) > BUZZER_TURNOFF_TIME_MS)
 8001b18:	f001 fa02 	bl	8002f20 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001b26:	d901      	bls.n	8001b2c <INDICATORS_Finish_StartUp+0x60>
        {
            BSP_BUZZER_Off();
 8001b28:	f000 ffa2 	bl	8002a70 <BSP_BUZZER_Off>
        }

        if((HAL_GetTick() - tickstart) > LEDS_TURNOFF_TIME_MS)
 8001b2c:	f001 f9f8 	bl	8002f20 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d9d9      	bls.n	8001af2 <INDICATORS_Finish_StartUp+0x26>
        {
            BSP_LED_Off(LED1);
 8001b3e:	2000      	movs	r0, #0
 8001b40:	f001 f804 	bl	8002b4c <BSP_LED_Off>
            BSP_LED_Off(LED2);
 8001b44:	2001      	movs	r0, #1
 8001b46:	f001 f801 	bl	8002b4c <BSP_LED_Off>
            BSP_LED_Off(LED3);
 8001b4a:	2002      	movs	r0, #2
 8001b4c:	f000 fffe 	bl	8002b4c <BSP_LED_Off>

            break;
 8001b50:	bf00      	nop
        }
    }
}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b5e:	f001 f979 	bl	8002e54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b62:	f000 f805 	bl	8001b70 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* USER CODE BEGIN 2 */

  MX_APP_Init();
 8001b66:	f7ff fa23 	bl	8000fb0 <MX_APP_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	MX_APP_Process();
 8001b6a:	f7ff fa5d 	bl	8001028 <MX_APP_Process>
 8001b6e:	e7fc      	b.n	8001b6a <main+0x10>

08001b70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b094      	sub	sp, #80	; 0x50
 8001b74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b76:	f107 031c 	add.w	r3, r7, #28
 8001b7a:	2234      	movs	r2, #52	; 0x34
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f005 ff24 	bl	80079cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b84:	f107 0308 	add.w	r3, r7, #8
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	605a      	str	r2, [r3, #4]
 8001b8e:	609a      	str	r2, [r3, #8]
 8001b90:	60da      	str	r2, [r3, #12]
 8001b92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b94:	2300      	movs	r3, #0
 8001b96:	607b      	str	r3, [r7, #4]
 8001b98:	4b29      	ldr	r3, [pc, #164]	; (8001c40 <SystemClock_Config+0xd0>)
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9c:	4a28      	ldr	r2, [pc, #160]	; (8001c40 <SystemClock_Config+0xd0>)
 8001b9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ba4:	4b26      	ldr	r3, [pc, #152]	; (8001c40 <SystemClock_Config+0xd0>)
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bac:	607b      	str	r3, [r7, #4]
 8001bae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	603b      	str	r3, [r7, #0]
 8001bb4:	4b23      	ldr	r3, [pc, #140]	; (8001c44 <SystemClock_Config+0xd4>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001bbc:	4a21      	ldr	r2, [pc, #132]	; (8001c44 <SystemClock_Config+0xd4>)
 8001bbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bc2:	6013      	str	r3, [r2, #0]
 8001bc4:	4b1f      	ldr	r3, [pc, #124]	; (8001c44 <SystemClock_Config+0xd4>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bcc:	603b      	str	r3, [r7, #0]
 8001bce:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bd8:	2310      	movs	r3, #16
 8001bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001be0:	2300      	movs	r3, #0
 8001be2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001be4:	2308      	movs	r3, #8
 8001be6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001be8:	2350      	movs	r3, #80	; 0x50
 8001bea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bec:	2302      	movs	r3, #2
 8001bee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bf8:	f107 031c 	add.w	r3, r7, #28
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f003 ff47 	bl	8005a90 <HAL_RCC_OscConfig>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001c08:	f000 f81e 	bl	8001c48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c0c:	230f      	movs	r3, #15
 8001c0e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c10:	2302      	movs	r3, #2
 8001c12:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c14:	2300      	movs	r3, #0
 8001c16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c1c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c22:	f107 0308 	add.w	r3, r7, #8
 8001c26:	2102      	movs	r1, #2
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f003 fbe7 	bl	80053fc <HAL_RCC_ClockConfig>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001c34:	f000 f808 	bl	8001c48 <Error_Handler>
  }
}
 8001c38:	bf00      	nop
 8001c3a:	3750      	adds	r7, #80	; 0x50
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40023800 	.word	0x40023800
 8001c44:	40007000 	.word	0x40007000

08001c48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c4c:	b672      	cpsid	i
}
 8001c4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c50:	e7fe      	b.n	8001c50 <Error_Handler+0x8>

08001c52 <PANTALLA_Process>:
 *
 * @param None
 * @retval None
 */
void PANTALLA_Process(void)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	af00      	add	r7, sp, #0
    PANTALLA_Demo();
 8001c56:	f000 f803 	bl	8001c60 <PANTALLA_Demo>
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
	...

08001c60 <PANTALLA_Demo>:
/***********************************************************************************************************************
 * Private functions implementation
 **********************************************************************************************************************/

static void PANTALLA_Demo(void)
{
 8001c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c62:	b095      	sub	sp, #84	; 0x54
 8001c64:	af10      	add	r7, sp, #64	; 0x40
	/* Ticks for serial transmit to Nextion display */
	static uint32_t tickstart = 0;

	int speed = 0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	60fb      	str	r3, [r7, #12]
	int bat_level = 0;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60bb      	str	r3, [r7, #8]
	int bat_voltage = 0;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	607b      	str	r3, [r7, #4]
	int power = 0;
 8001c72:	2300      	movs	r3, #0
 8001c74:	603b      	str	r3, [r7, #0]

	if((HAL_GetTick() - tickstart) > DISPLAY_TRANSMIT_INTERVAL_MS)
 8001c76:	f001 f953 	bl	8002f20 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	4ba6      	ldr	r3, [pc, #664]	; (8001f18 <PANTALLA_Demo+0x2b8>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001c86:	f240 81da 	bls.w	800203e <PANTALLA_Demo+0x3de>
	{
		/* Turn on LED 3 (yellow LED) */
		BSP_LED_Toggle(LED3);
 8001c8a:	2002      	movs	r0, #2
 8001c8c:	f000 ff78 	bl	8002b80 <BSP_LED_Toggle>

		/* Envía estado hombre muerto */
		if(bus_data.hm_state == kHOMBRE_MUERTO_ON)
 8001c90:	4ba2      	ldr	r3, [pc, #648]	; (8001f1c <PANTALLA_Demo+0x2bc>)
 8001c92:	78db      	ldrb	r3, [r3, #3]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d114      	bne.n	8001cc2 <PANTALLA_Demo+0x62>
		{
			PANTALLA_API_SendtoNum("is_warning.val", 1, huart6);
 8001c98:	4ea1      	ldr	r6, [pc, #644]	; (8001f20 <PANTALLA_Demo+0x2c0>)
 8001c9a:	466d      	mov	r5, sp
 8001c9c:	f106 0408 	add.w	r4, r6, #8
 8001ca0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ca2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ca4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ca6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ca8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001caa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cac:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001cb0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001cb4:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001cb8:	2101      	movs	r1, #1
 8001cba:	489a      	ldr	r0, [pc, #616]	; (8001f24 <PANTALLA_Demo+0x2c4>)
 8001cbc:	f000 f9d2 	bl	8002064 <PANTALLA_API_SendtoNum>
 8001cc0:	e017      	b.n	8001cf2 <PANTALLA_Demo+0x92>
		}
		else if(bus_data.hm_state == kHOMBRE_MUERTO_OFF)
 8001cc2:	4b96      	ldr	r3, [pc, #600]	; (8001f1c <PANTALLA_Demo+0x2bc>)
 8001cc4:	78db      	ldrb	r3, [r3, #3]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d113      	bne.n	8001cf2 <PANTALLA_Demo+0x92>
		{
			PANTALLA_API_SendtoNum("is_warning.val", 0, huart6);
 8001cca:	4e95      	ldr	r6, [pc, #596]	; (8001f20 <PANTALLA_Demo+0x2c0>)
 8001ccc:	466d      	mov	r5, sp
 8001cce:	f106 0408 	add.w	r4, r6, #8
 8001cd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cde:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001ce2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001ce6:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001cea:	2100      	movs	r1, #0
 8001cec:	488d      	ldr	r0, [pc, #564]	; (8001f24 <PANTALLA_Demo+0x2c4>)
 8001cee:	f000 f9b9 	bl	8002064 <PANTALLA_API_SendtoNum>
		}

		/* Envía modo de manejo */
		if(bus_data.Rx_Control.driving_mode == kDRIVING_MODE_ECO)
 8001cf2:	4b8a      	ldr	r3, [pc, #552]	; (8001f1c <PANTALLA_Demo+0x2bc>)
 8001cf4:	7b5b      	ldrb	r3, [r3, #13]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d114      	bne.n	8001d24 <PANTALLA_Demo+0xc4>
		{
			PANTALLA_API_SendtoImage("driving_mode.pic", 1, huart6);
 8001cfa:	4e89      	ldr	r6, [pc, #548]	; (8001f20 <PANTALLA_Demo+0x2c0>)
 8001cfc:	466d      	mov	r5, sp
 8001cfe:	f106 0408 	add.w	r4, r6, #8
 8001d02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d0e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001d12:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001d16:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	4882      	ldr	r0, [pc, #520]	; (8001f28 <PANTALLA_Demo+0x2c8>)
 8001d1e:	f000 fa6d 	bl	80021fc <PANTALLA_API_SendtoImage>
 8001d22:	e030      	b.n	8001d86 <PANTALLA_Demo+0x126>
		}
		else if(bus_data.Rx_Control.driving_mode == kDRIVING_MODE_NORMAL)
 8001d24:	4b7d      	ldr	r3, [pc, #500]	; (8001f1c <PANTALLA_Demo+0x2bc>)
 8001d26:	7b5b      	ldrb	r3, [r3, #13]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d114      	bne.n	8001d56 <PANTALLA_Demo+0xf6>
		{
			PANTALLA_API_SendtoImage("driving_mode.pic", 2, huart6);
 8001d2c:	4e7c      	ldr	r6, [pc, #496]	; (8001f20 <PANTALLA_Demo+0x2c0>)
 8001d2e:	466d      	mov	r5, sp
 8001d30:	f106 0408 	add.w	r4, r6, #8
 8001d34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d40:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001d44:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001d48:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001d4c:	2102      	movs	r1, #2
 8001d4e:	4876      	ldr	r0, [pc, #472]	; (8001f28 <PANTALLA_Demo+0x2c8>)
 8001d50:	f000 fa54 	bl	80021fc <PANTALLA_API_SendtoImage>
 8001d54:	e017      	b.n	8001d86 <PANTALLA_Demo+0x126>
		}
		else if(bus_data.Rx_Control.driving_mode == kDRIVING_MODE_SPORT)
 8001d56:	4b71      	ldr	r3, [pc, #452]	; (8001f1c <PANTALLA_Demo+0x2bc>)
 8001d58:	7b5b      	ldrb	r3, [r3, #13]
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d113      	bne.n	8001d86 <PANTALLA_Demo+0x126>
		{
			PANTALLA_API_SendtoImage("driving_mode.pic", 3, huart6);
 8001d5e:	4e70      	ldr	r6, [pc, #448]	; (8001f20 <PANTALLA_Demo+0x2c0>)
 8001d60:	466d      	mov	r5, sp
 8001d62:	f106 0408 	add.w	r4, r6, #8
 8001d66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d72:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001d76:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001d7a:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001d7e:	2103      	movs	r1, #3
 8001d80:	4869      	ldr	r0, [pc, #420]	; (8001f28 <PANTALLA_Demo+0x2c8>)
 8001d82:	f000 fa3b 	bl	80021fc <PANTALLA_API_SendtoImage>
		}

		/* Envía velocidad */
		speed = (int) bus_data.pedal;
 8001d86:	4b65      	ldr	r3, [pc, #404]	; (8001f1c <PANTALLA_Demo+0x2bc>)
 8001d88:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d90:	ee17 3a90 	vmov	r3, s15
 8001d94:	60fb      	str	r3, [r7, #12]

		if(speed == 100)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2b64      	cmp	r3, #100	; 0x64
 8001d9a:	d114      	bne.n	8001dc6 <PANTALLA_Demo+0x166>
		{
			PANTALLA_API_SendtoTxt("speed.txt", 99, huart6);
 8001d9c:	4e60      	ldr	r6, [pc, #384]	; (8001f20 <PANTALLA_Demo+0x2c0>)
 8001d9e:	466d      	mov	r5, sp
 8001da0:	f106 0408 	add.w	r4, r6, #8
 8001da4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001da6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001da8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001daa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001db0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001db4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001db8:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001dbc:	2163      	movs	r1, #99	; 0x63
 8001dbe:	485b      	ldr	r0, [pc, #364]	; (8001f2c <PANTALLA_Demo+0x2cc>)
 8001dc0:	f000 f980 	bl	80020c4 <PANTALLA_API_SendtoTxt>
 8001dc4:	e02d      	b.n	8001e22 <PANTALLA_Demo+0x1c2>
		}
		else
		{
			PANTALLA_API_SendtoTxt("speed.txt", speed, huart6);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	fa1f fc83 	uxth.w	ip, r3
 8001dcc:	4e54      	ldr	r6, [pc, #336]	; (8001f20 <PANTALLA_Demo+0x2c0>)
 8001dce:	466d      	mov	r5, sp
 8001dd0:	f106 0408 	add.w	r4, r6, #8
 8001dd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ddc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001de0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001de4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001de8:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001dec:	4661      	mov	r1, ip
 8001dee:	484f      	ldr	r0, [pc, #316]	; (8001f2c <PANTALLA_Demo+0x2cc>)
 8001df0:	f000 f968 	bl	80020c4 <PANTALLA_API_SendtoTxt>
			PANTALLA_API_SendtoPB("speed_bar.val", speed, huart6);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	fa1f fc83 	uxth.w	ip, r3
 8001dfa:	4e49      	ldr	r6, [pc, #292]	; (8001f20 <PANTALLA_Demo+0x2c0>)
 8001dfc:	466d      	mov	r5, sp
 8001dfe:	f106 0408 	add.w	r4, r6, #8
 8001e02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e0e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001e12:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001e16:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001e1a:	4661      	mov	r1, ip
 8001e1c:	4844      	ldr	r0, [pc, #272]	; (8001f30 <PANTALLA_Demo+0x2d0>)
 8001e1e:	f000 f9bd 	bl	800219c <PANTALLA_API_SendtoPB>
		}

		/* Envía nivel de batería */
		bat_level = (int)bus_data.Rx_Bms.nivel_bateria;
 8001e22:	4b3e      	ldr	r3, [pc, #248]	; (8001f1c <PANTALLA_Demo+0x2bc>)
 8001e24:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001e28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e2c:	ee17 3a90 	vmov	r3, s15
 8001e30:	60bb      	str	r3, [r7, #8]
		PANTALLA_API_SendtoTxt("bat_level.txt", bat_level, huart6);
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	fa1f fc83 	uxth.w	ip, r3
 8001e38:	4e39      	ldr	r6, [pc, #228]	; (8001f20 <PANTALLA_Demo+0x2c0>)
 8001e3a:	466d      	mov	r5, sp
 8001e3c:	f106 0408 	add.w	r4, r6, #8
 8001e40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e4c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001e50:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001e54:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001e58:	4661      	mov	r1, ip
 8001e5a:	4836      	ldr	r0, [pc, #216]	; (8001f34 <PANTALLA_Demo+0x2d4>)
 8001e5c:	f000 f932 	bl	80020c4 <PANTALLA_API_SendtoTxt>

		/* Envía voltaje batería */
		bat_voltage = (int)bus_data.Rx_Bms.voltaje;
 8001e60:	4b2e      	ldr	r3, [pc, #184]	; (8001f1c <PANTALLA_Demo+0x2bc>)
 8001e62:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e6a:	ee17 3a90 	vmov	r3, s15
 8001e6e:	607b      	str	r3, [r7, #4]
		PANTALLA_API_SendtoTxt("bat_voltage.txt", bat_voltage, huart6);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	fa1f fc83 	uxth.w	ip, r3
 8001e76:	4e2a      	ldr	r6, [pc, #168]	; (8001f20 <PANTALLA_Demo+0x2c0>)
 8001e78:	466d      	mov	r5, sp
 8001e7a:	f106 0408 	add.w	r4, r6, #8
 8001e7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e8a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001e8e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001e92:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001e96:	4661      	mov	r1, ip
 8001e98:	4827      	ldr	r0, [pc, #156]	; (8001f38 <PANTALLA_Demo+0x2d8>)
 8001e9a:	f000 f913 	bl	80020c4 <PANTALLA_API_SendtoTxt>

		/* Envía potencia */
		power = (int)bus_data.Rx_Bms.potencia;
 8001e9e:	4b1f      	ldr	r3, [pc, #124]	; (8001f1c <PANTALLA_Demo+0x2bc>)
 8001ea0:	edd3 7a07 	vldr	s15, [r3, #28]
 8001ea4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ea8:	ee17 3a90 	vmov	r3, s15
 8001eac:	603b      	str	r3, [r7, #0]
		PANTALLA_API_SendtoTxt("power.txt", power, huart6);
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	fa1f fc83 	uxth.w	ip, r3
 8001eb4:	4e1a      	ldr	r6, [pc, #104]	; (8001f20 <PANTALLA_Demo+0x2c0>)
 8001eb6:	466d      	mov	r5, sp
 8001eb8:	f106 0408 	add.w	r4, r6, #8
 8001ebc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ebe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ec0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ec2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ec4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ec6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ec8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001ecc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001ed0:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001ed4:	4661      	mov	r1, ip
 8001ed6:	4819      	ldr	r0, [pc, #100]	; (8001f3c <PANTALLA_Demo+0x2dc>)
 8001ed8:	f000 f8f4 	bl	80020c4 <PANTALLA_API_SendtoTxt>

		/* Envía ícono batería */
		if(bus_data.Rx_Bms.nivel_bateria == 0)
 8001edc:	4b0f      	ldr	r3, [pc, #60]	; (8001f1c <PANTALLA_Demo+0x2bc>)
 8001ede:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001ee2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eea:	d12b      	bne.n	8001f44 <PANTALLA_Demo+0x2e4>
		{
			PANTALLA_API_SendtoImage("bat_icon.pic", 0, huart6);
 8001eec:	4e0c      	ldr	r6, [pc, #48]	; (8001f20 <PANTALLA_Demo+0x2c0>)
 8001eee:	466d      	mov	r5, sp
 8001ef0:	f106 0408 	add.w	r4, r6, #8
 8001ef4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ef6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ef8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001efa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001efc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001efe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f00:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001f04:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001f08:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	480c      	ldr	r0, [pc, #48]	; (8001f40 <PANTALLA_Demo+0x2e0>)
 8001f10:	f000 f974 	bl	80021fc <PANTALLA_API_SendtoImage>
 8001f14:	e08e      	b.n	8002034 <PANTALLA_Demo+0x3d4>
 8001f16:	bf00      	nop
 8001f18:	200001fc 	.word	0x200001fc
 8001f1c:	20000000 	.word	0x20000000
 8001f20:	200002a8 	.word	0x200002a8
 8001f24:	080082d0 	.word	0x080082d0
 8001f28:	080082e0 	.word	0x080082e0
 8001f2c:	080082f4 	.word	0x080082f4
 8001f30:	08008300 	.word	0x08008300
 8001f34:	08008310 	.word	0x08008310
 8001f38:	08008320 	.word	0x08008320
 8001f3c:	08008330 	.word	0x08008330
 8001f40:	0800833c 	.word	0x0800833c
		}
		else if(bus_data.Rx_Bms.nivel_bateria > 0 && bus_data.Rx_Bms.nivel_bateria <= 33)
 8001f44:	4b40      	ldr	r3, [pc, #256]	; (8002048 <PANTALLA_Demo+0x3e8>)
 8001f46:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001f4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f52:	dd1e      	ble.n	8001f92 <PANTALLA_Demo+0x332>
 8001f54:	4b3c      	ldr	r3, [pc, #240]	; (8002048 <PANTALLA_Demo+0x3e8>)
 8001f56:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001f5a:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800204c <PANTALLA_Demo+0x3ec>
 8001f5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f66:	d814      	bhi.n	8001f92 <PANTALLA_Demo+0x332>
		{
			PANTALLA_API_SendtoImage("bat_icon.pic", 1, huart6);
 8001f68:	4e39      	ldr	r6, [pc, #228]	; (8002050 <PANTALLA_Demo+0x3f0>)
 8001f6a:	466d      	mov	r5, sp
 8001f6c:	f106 0408 	add.w	r4, r6, #8
 8001f70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f7c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001f80:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001f84:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001f88:	2101      	movs	r1, #1
 8001f8a:	4832      	ldr	r0, [pc, #200]	; (8002054 <PANTALLA_Demo+0x3f4>)
 8001f8c:	f000 f936 	bl	80021fc <PANTALLA_API_SendtoImage>
 8001f90:	e050      	b.n	8002034 <PANTALLA_Demo+0x3d4>
		}
		else if(bus_data.Rx_Bms.nivel_bateria > 33 && bus_data.Rx_Bms.nivel_bateria <= 66)
 8001f92:	4b2d      	ldr	r3, [pc, #180]	; (8002048 <PANTALLA_Demo+0x3e8>)
 8001f94:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001f98:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800204c <PANTALLA_Demo+0x3ec>
 8001f9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fa4:	dd1e      	ble.n	8001fe4 <PANTALLA_Demo+0x384>
 8001fa6:	4b28      	ldr	r3, [pc, #160]	; (8002048 <PANTALLA_Demo+0x3e8>)
 8001fa8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001fac:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002058 <PANTALLA_Demo+0x3f8>
 8001fb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fb8:	d814      	bhi.n	8001fe4 <PANTALLA_Demo+0x384>
		{
			PANTALLA_API_SendtoImage("bat_icon.pic", 2, huart6);
 8001fba:	4e25      	ldr	r6, [pc, #148]	; (8002050 <PANTALLA_Demo+0x3f0>)
 8001fbc:	466d      	mov	r5, sp
 8001fbe:	f106 0408 	add.w	r4, r6, #8
 8001fc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fce:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001fd2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001fd6:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001fda:	2102      	movs	r1, #2
 8001fdc:	481d      	ldr	r0, [pc, #116]	; (8002054 <PANTALLA_Demo+0x3f4>)
 8001fde:	f000 f90d 	bl	80021fc <PANTALLA_API_SendtoImage>
 8001fe2:	e027      	b.n	8002034 <PANTALLA_Demo+0x3d4>
		}
		else if(bus_data.Rx_Bms.nivel_bateria > 66 && bus_data.Rx_Bms.nivel_bateria <= 100)
 8001fe4:	4b18      	ldr	r3, [pc, #96]	; (8002048 <PANTALLA_Demo+0x3e8>)
 8001fe6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001fea:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002058 <PANTALLA_Demo+0x3f8>
 8001fee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ff6:	dd1d      	ble.n	8002034 <PANTALLA_Demo+0x3d4>
 8001ff8:	4b13      	ldr	r3, [pc, #76]	; (8002048 <PANTALLA_Demo+0x3e8>)
 8001ffa:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001ffe:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800205c <PANTALLA_Demo+0x3fc>
 8002002:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800200a:	d813      	bhi.n	8002034 <PANTALLA_Demo+0x3d4>
		{
			PANTALLA_API_SendtoImage("bat_icon.pic", 3, huart6);
 800200c:	4e10      	ldr	r6, [pc, #64]	; (8002050 <PANTALLA_Demo+0x3f0>)
 800200e:	466d      	mov	r5, sp
 8002010:	f106 0408 	add.w	r4, r6, #8
 8002014:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002016:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002018:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800201a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800201c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800201e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002020:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002024:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002028:	e896 000c 	ldmia.w	r6, {r2, r3}
 800202c:	2103      	movs	r1, #3
 800202e:	4809      	ldr	r0, [pc, #36]	; (8002054 <PANTALLA_Demo+0x3f4>)
 8002030:	f000 f8e4 	bl	80021fc <PANTALLA_API_SendtoImage>
		}

		/* Reset ticks */
		tickstart = HAL_GetTick();
 8002034:	f000 ff74 	bl	8002f20 <HAL_GetTick>
 8002038:	4603      	mov	r3, r0
 800203a:	4a09      	ldr	r2, [pc, #36]	; (8002060 <PANTALLA_Demo+0x400>)
 800203c:	6013      	str	r3, [r2, #0]
	}
}
 800203e:	bf00      	nop
 8002040:	3714      	adds	r7, #20
 8002042:	46bd      	mov	sp, r7
 8002044:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002046:	bf00      	nop
 8002048:	20000000 	.word	0x20000000
 800204c:	42040000 	.word	0x42040000
 8002050:	200002a8 	.word	0x200002a8
 8002054:	0800833c 	.word	0x0800833c
 8002058:	42840000 	.word	0x42840000
 800205c:	42c80000 	.word	0x42c80000
 8002060:	200001fc 	.word	0x200001fc

08002064 <PANTALLA_API_SendtoNum>:
    HAL_UART_Transmit(&huart, (uint8_t *)buf, len, 1000);
    HAL_UART_Transmit(&huart, Cmd_End, 3, 3000);
}

void PANTALLA_API_SendtoNum(char *obj, uint16_t value, UART_HandleTypeDef huart)
{
 8002064:	b082      	sub	sp, #8
 8002066:	b580      	push	{r7, lr}
 8002068:	b08c      	sub	sp, #48	; 0x30
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
 800206e:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8002072:	e880 000c 	stmia.w	r0, {r2, r3}
 8002076:	460b      	mov	r3, r1
 8002078:	807b      	strh	r3, [r7, #2]
	char buf[30];
	int len = sprintf (buf,"%s=%u",obj, value);
 800207a:	887b      	ldrh	r3, [r7, #2]
 800207c:	f107 000c 	add.w	r0, r7, #12
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	490e      	ldr	r1, [pc, #56]	; (80020bc <PANTALLA_API_SendtoNum+0x58>)
 8002084:	f005 fcaa 	bl	80079dc <siprintf>
 8002088:	62f8      	str	r0, [r7, #44]	; 0x2c

	HAL_UART_Transmit(&huart, (uint8_t *)buf, len, 1000);
 800208a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800208c:	b29a      	uxth	r2, r3
 800208e:	f107 010c 	add.w	r1, r7, #12
 8002092:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002096:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800209a:	f005 f8f8 	bl	800728e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart, Cmd_End, 3, 3000);
 800209e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80020a2:	2203      	movs	r2, #3
 80020a4:	4906      	ldr	r1, [pc, #24]	; (80020c0 <PANTALLA_API_SendtoNum+0x5c>)
 80020a6:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80020aa:	f005 f8f0 	bl	800728e <HAL_UART_Transmit>
}
 80020ae:	bf00      	nop
 80020b0:	3730      	adds	r7, #48	; 0x30
 80020b2:	46bd      	mov	sp, r7
 80020b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80020b8:	b002      	add	sp, #8
 80020ba:	4770      	bx	lr
 80020bc:	0800834c 	.word	0x0800834c
 80020c0:	20000048 	.word	0x20000048

080020c4 <PANTALLA_API_SendtoTxt>:

void PANTALLA_API_SendtoTxt(char *obj, uint16_t value, UART_HandleTypeDef huart)
{
 80020c4:	b082      	sub	sp, #8
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b08c      	sub	sp, #48	; 0x30
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
 80020ce:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80020d2:	e880 000c 	stmia.w	r0, {r2, r3}
 80020d6:	460b      	mov	r3, r1
 80020d8:	807b      	strh	r3, [r7, #2]
	char buf[30];
	int len;

	if(strcmp("bat_level.txt",obj) == 0)
 80020da:	6879      	ldr	r1, [r7, #4]
 80020dc:	4827      	ldr	r0, [pc, #156]	; (800217c <PANTALLA_API_SendtoTxt+0xb8>)
 80020de:	f7fe f897 	bl	8000210 <strcmp>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d108      	bne.n	80020fa <PANTALLA_API_SendtoTxt+0x36>
	{

		len = sprintf (buf,"%s=\"%u%%\"",obj, value);
 80020e8:	887b      	ldrh	r3, [r7, #2]
 80020ea:	f107 000c 	add.w	r0, r7, #12
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	4923      	ldr	r1, [pc, #140]	; (8002180 <PANTALLA_API_SendtoTxt+0xbc>)
 80020f2:	f005 fc73 	bl	80079dc <siprintf>
 80020f6:	62f8      	str	r0, [r7, #44]	; 0x2c
 80020f8:	e027      	b.n	800214a <PANTALLA_API_SendtoTxt+0x86>

	}
	else if(strcmp("power.txt",obj) == 0)
 80020fa:	6879      	ldr	r1, [r7, #4]
 80020fc:	4821      	ldr	r0, [pc, #132]	; (8002184 <PANTALLA_API_SendtoTxt+0xc0>)
 80020fe:	f7fe f887 	bl	8000210 <strcmp>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d108      	bne.n	800211a <PANTALLA_API_SendtoTxt+0x56>
	{

		len = sprintf (buf,"%s=\"%u W\"",obj, value);
 8002108:	887b      	ldrh	r3, [r7, #2]
 800210a:	f107 000c 	add.w	r0, r7, #12
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	491d      	ldr	r1, [pc, #116]	; (8002188 <PANTALLA_API_SendtoTxt+0xc4>)
 8002112:	f005 fc63 	bl	80079dc <siprintf>
 8002116:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002118:	e017      	b.n	800214a <PANTALLA_API_SendtoTxt+0x86>

	}
	else if(strcmp("bat_voltage.txt",obj) == 0)
 800211a:	6879      	ldr	r1, [r7, #4]
 800211c:	481b      	ldr	r0, [pc, #108]	; (800218c <PANTALLA_API_SendtoTxt+0xc8>)
 800211e:	f7fe f877 	bl	8000210 <strcmp>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d108      	bne.n	800213a <PANTALLA_API_SendtoTxt+0x76>
	{

		len = sprintf (buf,"%s=\"%u V\"",obj, value);
 8002128:	887b      	ldrh	r3, [r7, #2]
 800212a:	f107 000c 	add.w	r0, r7, #12
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	4917      	ldr	r1, [pc, #92]	; (8002190 <PANTALLA_API_SendtoTxt+0xcc>)
 8002132:	f005 fc53 	bl	80079dc <siprintf>
 8002136:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002138:	e007      	b.n	800214a <PANTALLA_API_SendtoTxt+0x86>

	}
	else
	{
		len = sprintf (buf,"%s=\"%u\"",obj, value);
 800213a:	887b      	ldrh	r3, [r7, #2]
 800213c:	f107 000c 	add.w	r0, r7, #12
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	4914      	ldr	r1, [pc, #80]	; (8002194 <PANTALLA_API_SendtoTxt+0xd0>)
 8002144:	f005 fc4a 	bl	80079dc <siprintf>
 8002148:	62f8      	str	r0, [r7, #44]	; 0x2c
	}

	HAL_UART_Transmit(&huart, (uint8_t *)buf, len, 1000);
 800214a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800214c:	b29a      	uxth	r2, r3
 800214e:	f107 010c 	add.w	r1, r7, #12
 8002152:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002156:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800215a:	f005 f898 	bl	800728e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart, Cmd_End, 3, 3000);
 800215e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002162:	2203      	movs	r2, #3
 8002164:	490c      	ldr	r1, [pc, #48]	; (8002198 <PANTALLA_API_SendtoTxt+0xd4>)
 8002166:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800216a:	f005 f890 	bl	800728e <HAL_UART_Transmit>
}
 800216e:	bf00      	nop
 8002170:	3730      	adds	r7, #48	; 0x30
 8002172:	46bd      	mov	sp, r7
 8002174:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002178:	b002      	add	sp, #8
 800217a:	4770      	bx	lr
 800217c:	08008354 	.word	0x08008354
 8002180:	08008364 	.word	0x08008364
 8002184:	08008370 	.word	0x08008370
 8002188:	0800837c 	.word	0x0800837c
 800218c:	08008388 	.word	0x08008388
 8002190:	08008398 	.word	0x08008398
 8002194:	080083a4 	.word	0x080083a4
 8002198:	20000048 	.word	0x20000048

0800219c <PANTALLA_API_SendtoPB>:

void PANTALLA_API_SendtoPB(char *obj, uint16_t value, UART_HandleTypeDef huart)
{
 800219c:	b082      	sub	sp, #8
 800219e:	b580      	push	{r7, lr}
 80021a0:	b08c      	sub	sp, #48	; 0x30
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
 80021a6:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80021aa:	e880 000c 	stmia.w	r0, {r2, r3}
 80021ae:	460b      	mov	r3, r1
 80021b0:	807b      	strh	r3, [r7, #2]
    char buf[30];
    int len = sprintf(buf, "%s=%u", obj, value);
 80021b2:	887b      	ldrh	r3, [r7, #2]
 80021b4:	f107 000c 	add.w	r0, r7, #12
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	490e      	ldr	r1, [pc, #56]	; (80021f4 <PANTALLA_API_SendtoPB+0x58>)
 80021bc:	f005 fc0e 	bl	80079dc <siprintf>
 80021c0:	62f8      	str	r0, [r7, #44]	; 0x2c

    HAL_UART_Transmit(&huart, (uint8_t *)buf, len, 1000);
 80021c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	f107 010c 	add.w	r1, r7, #12
 80021ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021ce:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80021d2:	f005 f85c 	bl	800728e <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart, Cmd_End, 3, 3000);
 80021d6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80021da:	2203      	movs	r2, #3
 80021dc:	4906      	ldr	r1, [pc, #24]	; (80021f8 <PANTALLA_API_SendtoPB+0x5c>)
 80021de:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80021e2:	f005 f854 	bl	800728e <HAL_UART_Transmit>
}
 80021e6:	bf00      	nop
 80021e8:	3730      	adds	r7, #48	; 0x30
 80021ea:	46bd      	mov	sp, r7
 80021ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80021f0:	b002      	add	sp, #8
 80021f2:	4770      	bx	lr
 80021f4:	0800834c 	.word	0x0800834c
 80021f8:	20000048 	.word	0x20000048

080021fc <PANTALLA_API_SendtoImage>:

void PANTALLA_API_SendtoImage(char *obj, uint16_t value, UART_HandleTypeDef huart){
 80021fc:	b082      	sub	sp, #8
 80021fe:	b580      	push	{r7, lr}
 8002200:	b08c      	sub	sp, #48	; 0x30
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
 8002206:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800220a:	e880 000c 	stmia.w	r0, {r2, r3}
 800220e:	460b      	mov	r3, r1
 8002210:	807b      	strh	r3, [r7, #2]

    char buf[30];
    int len = 0;
 8002212:	2300      	movs	r3, #0
 8002214:	62fb      	str	r3, [r7, #44]	; 0x2c
    int pic;

    if (strcmp(obj, "bat_icon.pic") == 0)
 8002216:	4955      	ldr	r1, [pc, #340]	; (800236c <PANTALLA_API_SendtoImage+0x170>)
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f7fd fff9 	bl	8000210 <strcmp>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d137      	bne.n	8002294 <PANTALLA_API_SendtoImage+0x98>
    {
    	if(value == 0)
 8002224:	887b      	ldrh	r3, [r7, #2]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d10a      	bne.n	8002240 <PANTALLA_API_SendtoImage+0x44>
    	{
            pic = 26; // cero barras
 800222a:	231a      	movs	r3, #26
 800222c:	62bb      	str	r3, [r7, #40]	; 0x28
            len = sprintf(buf, "%s=%u", obj, pic);
 800222e:	f107 0008 	add.w	r0, r7, #8
 8002232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	494e      	ldr	r1, [pc, #312]	; (8002370 <PANTALLA_API_SendtoImage+0x174>)
 8002238:	f005 fbd0 	bl	80079dc <siprintf>
 800223c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800223e:	e07c      	b.n	800233a <PANTALLA_API_SendtoImage+0x13e>
    	}
    	else if (value == 1)
 8002240:	887b      	ldrh	r3, [r7, #2]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d10a      	bne.n	800225c <PANTALLA_API_SendtoImage+0x60>
        {
            pic = 28; // una barra
 8002246:	231c      	movs	r3, #28
 8002248:	62bb      	str	r3, [r7, #40]	; 0x28
            len = sprintf(buf, "%s=%u", obj, pic);
 800224a:	f107 0008 	add.w	r0, r7, #8
 800224e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	4947      	ldr	r1, [pc, #284]	; (8002370 <PANTALLA_API_SendtoImage+0x174>)
 8002254:	f005 fbc2 	bl	80079dc <siprintf>
 8002258:	62f8      	str	r0, [r7, #44]	; 0x2c
 800225a:	e06e      	b.n	800233a <PANTALLA_API_SendtoImage+0x13e>
        }
        else if (value == 2)
 800225c:	887b      	ldrh	r3, [r7, #2]
 800225e:	2b02      	cmp	r3, #2
 8002260:	d10a      	bne.n	8002278 <PANTALLA_API_SendtoImage+0x7c>
        {
            pic = 29; // dos barras
 8002262:	231d      	movs	r3, #29
 8002264:	62bb      	str	r3, [r7, #40]	; 0x28
            len = sprintf(buf, "%s=%u", obj, pic);
 8002266:	f107 0008 	add.w	r0, r7, #8
 800226a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	4940      	ldr	r1, [pc, #256]	; (8002370 <PANTALLA_API_SendtoImage+0x174>)
 8002270:	f005 fbb4 	bl	80079dc <siprintf>
 8002274:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002276:	e060      	b.n	800233a <PANTALLA_API_SendtoImage+0x13e>
        }
        else if (value == 3)
 8002278:	887b      	ldrh	r3, [r7, #2]
 800227a:	2b03      	cmp	r3, #3
 800227c:	d15d      	bne.n	800233a <PANTALLA_API_SendtoImage+0x13e>
        {
            pic = 27; // tres barras
 800227e:	231b      	movs	r3, #27
 8002280:	62bb      	str	r3, [r7, #40]	; 0x28
            len = sprintf(buf, "%s=%u", obj, pic);
 8002282:	f107 0008 	add.w	r0, r7, #8
 8002286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	4939      	ldr	r1, [pc, #228]	; (8002370 <PANTALLA_API_SendtoImage+0x174>)
 800228c:	f005 fba6 	bl	80079dc <siprintf>
 8002290:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002292:	e052      	b.n	800233a <PANTALLA_API_SendtoImage+0x13e>
        }
    }
    else if (strcmp(obj, "driving_mode.pic") == 0)
 8002294:	4937      	ldr	r1, [pc, #220]	; (8002374 <PANTALLA_API_SendtoImage+0x178>)
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f7fd ffba 	bl	8000210 <strcmp>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d129      	bne.n	80022f6 <PANTALLA_API_SendtoImage+0xfa>
    {
        if (value == 1)
 80022a2:	887b      	ldrh	r3, [r7, #2]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d10a      	bne.n	80022be <PANTALLA_API_SendtoImage+0xc2>
        {
            pic = 23; // eco
 80022a8:	2317      	movs	r3, #23
 80022aa:	62bb      	str	r3, [r7, #40]	; 0x28
            len = sprintf(buf, "%s=%u", obj, pic);
 80022ac:	f107 0008 	add.w	r0, r7, #8
 80022b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	492e      	ldr	r1, [pc, #184]	; (8002370 <PANTALLA_API_SendtoImage+0x174>)
 80022b6:	f005 fb91 	bl	80079dc <siprintf>
 80022ba:	62f8      	str	r0, [r7, #44]	; 0x2c
 80022bc:	e03d      	b.n	800233a <PANTALLA_API_SendtoImage+0x13e>
        }
        else if (value == 2)
 80022be:	887b      	ldrh	r3, [r7, #2]
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d10a      	bne.n	80022da <PANTALLA_API_SendtoImage+0xde>
        {
            pic = 24; // normal
 80022c4:	2318      	movs	r3, #24
 80022c6:	62bb      	str	r3, [r7, #40]	; 0x28
            len = sprintf(buf, "%s=%u", obj, pic);
 80022c8:	f107 0008 	add.w	r0, r7, #8
 80022cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	4927      	ldr	r1, [pc, #156]	; (8002370 <PANTALLA_API_SendtoImage+0x174>)
 80022d2:	f005 fb83 	bl	80079dc <siprintf>
 80022d6:	62f8      	str	r0, [r7, #44]	; 0x2c
 80022d8:	e02f      	b.n	800233a <PANTALLA_API_SendtoImage+0x13e>
        }
        else if (value == 3)
 80022da:	887b      	ldrh	r3, [r7, #2]
 80022dc:	2b03      	cmp	r3, #3
 80022de:	d12c      	bne.n	800233a <PANTALLA_API_SendtoImage+0x13e>
        {
            pic = 25; // sport
 80022e0:	2319      	movs	r3, #25
 80022e2:	62bb      	str	r3, [r7, #40]	; 0x28
            len = sprintf(buf, "%s=%u", obj, pic);
 80022e4:	f107 0008 	add.w	r0, r7, #8
 80022e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	4920      	ldr	r1, [pc, #128]	; (8002370 <PANTALLA_API_SendtoImage+0x174>)
 80022ee:	f005 fb75 	bl	80079dc <siprintf>
 80022f2:	62f8      	str	r0, [r7, #44]	; 0x2c
 80022f4:	e021      	b.n	800233a <PANTALLA_API_SendtoImage+0x13e>
        }
    }
    else if (strcmp(obj, "warning.pic") == 0)
 80022f6:	4920      	ldr	r1, [pc, #128]	; (8002378 <PANTALLA_API_SendtoImage+0x17c>)
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f7fd ff89 	bl	8000210 <strcmp>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d11a      	bne.n	800233a <PANTALLA_API_SendtoImage+0x13e>
    {
        if (value == 1)
 8002304:	887b      	ldrh	r3, [r7, #2]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d10a      	bne.n	8002320 <PANTALLA_API_SendtoImage+0x124>
        {
            pic = 33; // warning
 800230a:	2321      	movs	r3, #33	; 0x21
 800230c:	62bb      	str	r3, [r7, #40]	; 0x28
            len = sprintf(buf, "%s=%u", obj, pic);
 800230e:	f107 0008 	add.w	r0, r7, #8
 8002312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	4916      	ldr	r1, [pc, #88]	; (8002370 <PANTALLA_API_SendtoImage+0x174>)
 8002318:	f005 fb60 	bl	80079dc <siprintf>
 800231c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800231e:	e00c      	b.n	800233a <PANTALLA_API_SendtoImage+0x13e>
        }
        else if (value == 0)
 8002320:	887b      	ldrh	r3, [r7, #2]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d109      	bne.n	800233a <PANTALLA_API_SendtoImage+0x13e>
        {
            pic = 32; // no warning
 8002326:	2320      	movs	r3, #32
 8002328:	62bb      	str	r3, [r7, #40]	; 0x28
            len = sprintf(buf, "%s=%u", obj, pic);
 800232a:	f107 0008 	add.w	r0, r7, #8
 800232e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	490f      	ldr	r1, [pc, #60]	; (8002370 <PANTALLA_API_SendtoImage+0x174>)
 8002334:	f005 fb52 	bl	80079dc <siprintf>
 8002338:	62f8      	str	r0, [r7, #44]	; 0x2c
        }
    }

    HAL_UART_Transmit(&huart, (uint8_t *)buf, len, 1000);
 800233a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800233c:	b29a      	uxth	r2, r3
 800233e:	f107 0108 	add.w	r1, r7, #8
 8002342:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002346:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800234a:	f004 ffa0 	bl	800728e <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart, Cmd_End, 3, 3000);
 800234e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002352:	2203      	movs	r2, #3
 8002354:	4909      	ldr	r1, [pc, #36]	; (800237c <PANTALLA_API_SendtoImage+0x180>)
 8002356:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800235a:	f004 ff98 	bl	800728e <HAL_UART_Transmit>
}
 800235e:	bf00      	nop
 8002360:	3730      	adds	r7, #48	; 0x30
 8002362:	46bd      	mov	sp, r7
 8002364:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002368:	b002      	add	sp, #8
 800236a:	4770      	bx	lr
 800236c:	080083ac 	.word	0x080083ac
 8002370:	0800834c 	.word	0x0800834c
 8002374:	080083bc 	.word	0x080083bc
 8002378:	080083d0 	.word	0x080083d0
 800237c:	20000048 	.word	0x20000048

08002380 <PANTALLA_HW_Init>:
/***********************************************************************************************************************
 * Public functions implementation
 **********************************************************************************************************************/

void PANTALLA_HW_Init(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
    MX_USART6_UART_Init();
 8002384:	f000 fa48 	bl	8002818 <MX_USART6_UART_Init>
}
 8002388:	bf00      	nop
 800238a:	bd80      	pop	{r7, pc}

0800238c <PEDAL_Process>:
 *
 * @param   None
 * @retval  None
 */
void PEDAL_Process(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
	/* Mapeo de lectura ADC pedal */
	PEDAL_Map_ADC_Reading();
 8002390:	f000 f812 	bl	80023b8 <PEDAL_Map_ADC_Reading>

	/* Envío de valor de pedal mapeado a bus de salida CAN */
	PEDAL_Send_Pedal_Value(bus_data.pedal, &bus_can_output);
 8002394:	4b05      	ldr	r3, [pc, #20]	; (80023ac <PEDAL_Process+0x20>)
 8002396:	edd3 7a02 	vldr	s15, [r3, #8]
 800239a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800239e:	4904      	ldr	r1, [pc, #16]	; (80023b0 <PEDAL_Process+0x24>)
 80023a0:	ee17 0a90 	vmov	r0, s15
 80023a4:	f000 f86c 	bl	8002480 <PEDAL_Send_Pedal_Value>
}
 80023a8:	bf00      	nop
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	20000000 	.word	0x20000000
 80023b0:	2000002c 	.word	0x2000002c
 80023b4:	00000000 	.word	0x00000000

080023b8 <PEDAL_Map_ADC_Reading>:
 *
 * @param None
 * @retval None
 */
static void PEDAL_Map_ADC_Reading(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
	if(flag_adc == ADC_CONV_COMPLETED)
 80023bc:	4b2a      	ldr	r3, [pc, #168]	; (8002468 <PEDAL_Map_ADC_Reading+0xb0>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d14b      	bne.n	800245c <PEDAL_Map_ADC_Reading+0xa4>
	{
		/* Guarda lectura de ADC en bus de datos */
		bus_data.adc_reading = adc_buf[0];
 80023c4:	4b29      	ldr	r3, [pc, #164]	; (800246c <PEDAL_Map_ADC_Reading+0xb4>)
 80023c6:	881b      	ldrh	r3, [r3, #0]
 80023c8:	461a      	mov	r2, r3
 80023ca:	4b29      	ldr	r3, [pc, #164]	; (8002470 <PEDAL_Map_ADC_Reading+0xb8>)
 80023cc:	605a      	str	r2, [r3, #4]

		/* ADC reading mapping */
		if(bus_data.adc_reading < MIN_ADC_VAL)
 80023ce:	4b28      	ldr	r3, [pc, #160]	; (8002470 <PEDAL_Map_ADC_Reading+0xb8>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	2b41      	cmp	r3, #65	; 0x41
 80023d4:	d804      	bhi.n	80023e0 <PEDAL_Map_ADC_Reading+0x28>
		{
			bus_data.pedal = 0.0;
 80023d6:	4b26      	ldr	r3, [pc, #152]	; (8002470 <PEDAL_Map_ADC_Reading+0xb8>)
 80023d8:	f04f 0200 	mov.w	r2, #0
 80023dc:	609a      	str	r2, [r3, #8]
 80023de:	e03a      	b.n	8002456 <PEDAL_Map_ADC_Reading+0x9e>
		}
		else if(bus_data.adc_reading > MAX_ADC_VAL)
 80023e0:	4b23      	ldr	r3, [pc, #140]	; (8002470 <PEDAL_Map_ADC_Reading+0xb8>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f5b3 6f4a 	cmp.w	r3, #3232	; 0xca0
 80023e8:	d303      	bcc.n	80023f2 <PEDAL_Map_ADC_Reading+0x3a>
		{
			bus_data.pedal = 100.0;
 80023ea:	4b21      	ldr	r3, [pc, #132]	; (8002470 <PEDAL_Map_ADC_Reading+0xb8>)
 80023ec:	4a21      	ldr	r2, [pc, #132]	; (8002474 <PEDAL_Map_ADC_Reading+0xbc>)
 80023ee:	609a      	str	r2, [r3, #8]
 80023f0:	e031      	b.n	8002456 <PEDAL_Map_ADC_Reading+0x9e>
		}
		else
		{
			bus_data.pedal = ((bus_data.adc_reading - MIN_ADC_VAL) / (MAX_ADC_VAL - MIN_ADC_VAL)) * 100;
 80023f2:	4b1f      	ldr	r3, [pc, #124]	; (8002470 <PEDAL_Map_ADC_Reading+0xb8>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7fe f8ac 	bl	8000554 <__aeabi_ui2d>
 80023fc:	f04f 0200 	mov.w	r2, #0
 8002400:	4b1d      	ldr	r3, [pc, #116]	; (8002478 <PEDAL_Map_ADC_Reading+0xc0>)
 8002402:	f7fd ff69 	bl	80002d8 <__aeabi_dsub>
 8002406:	4602      	mov	r2, r0
 8002408:	460b      	mov	r3, r1
 800240a:	4610      	mov	r0, r2
 800240c:	4619      	mov	r1, r3
 800240e:	a314      	add	r3, pc, #80	; (adr r3, 8002460 <PEDAL_Map_ADC_Reading+0xa8>)
 8002410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002414:	f7fe fa42 	bl	800089c <__aeabi_ddiv>
 8002418:	4602      	mov	r2, r0
 800241a:	460b      	mov	r3, r1
 800241c:	4610      	mov	r0, r2
 800241e:	4619      	mov	r1, r3
 8002420:	f04f 0200 	mov.w	r2, #0
 8002424:	4b15      	ldr	r3, [pc, #84]	; (800247c <PEDAL_Map_ADC_Reading+0xc4>)
 8002426:	f7fe f90f 	bl	8000648 <__aeabi_dmul>
 800242a:	4602      	mov	r2, r0
 800242c:	460b      	mov	r3, r1
 800242e:	4610      	mov	r0, r2
 8002430:	4619      	mov	r1, r3
 8002432:	f7fe fb1b 	bl	8000a6c <__aeabi_d2f>
 8002436:	4603      	mov	r3, r0
 8002438:	4a0d      	ldr	r2, [pc, #52]	; (8002470 <PEDAL_Map_ADC_Reading+0xb8>)
 800243a:	6093      	str	r3, [r2, #8]

			if(bus_data.pedal > 5)
 800243c:	4b0c      	ldr	r3, [pc, #48]	; (8002470 <PEDAL_Map_ADC_Reading+0xb8>)
 800243e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002442:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002446:	eef4 7ac7 	vcmpe.f32	s15, s14
 800244a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800244e:	dd02      	ble.n	8002456 <PEDAL_Map_ADC_Reading+0x9e>
			{
				bus_data.pedal_activo = 1;
 8002450:	4b07      	ldr	r3, [pc, #28]	; (8002470 <PEDAL_Map_ADC_Reading+0xb8>)
 8002452:	2201      	movs	r2, #1
 8002454:	731a      	strb	r2, [r3, #12]
			}
		}

		/* Clear ADC conversion flag */
		flag_adc = ADC_CONV_NOT_COMPLETED;
 8002456:	4b04      	ldr	r3, [pc, #16]	; (8002468 <PEDAL_Map_ADC_Reading+0xb0>)
 8002458:	2201      	movs	r2, #1
 800245a:	701a      	strb	r2, [r3, #0]
	}
}
 800245c:	bf00      	nop
 800245e:	bd80      	pop	{r7, pc}
 8002460:	00000000 	.word	0x00000000
 8002464:	40a8ba00 	.word	0x40a8ba00
 8002468:	2000004b 	.word	0x2000004b
 800246c:	20000200 	.word	0x20000200
 8002470:	20000000 	.word	0x20000000
 8002474:	42c80000 	.word	0x42c80000
 8002478:	40508000 	.word	0x40508000
 800247c:	40590000 	.word	0x40590000

08002480 <PEDAL_Send_Pedal_Value>:
 *
 * @param to_send           Valor de pedal a enviar
 * @param bus_can_output    Puntero a estructura de tipo typedef_bus2_t (bus de salida can)
 */
static void PEDAL_Send_Pedal_Value(uint32_t to_send, typedef_bus2_t* bus_can_output)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
	bus_can_output->pedal = (uint8_t) to_send;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	b2da      	uxtb	r2, r3
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	701a      	strb	r2, [r3, #0]
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
	...

080024a0 <PEDAL_HW_Init>:
/***********************************************************************************************************************
 * Public functions implementation
 **********************************************************************************************************************/

void PEDAL_HW_Init(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
	/* Initialize DMA */
	MX_DMA_Init();
 80024a4:	f7ff fa38 	bl	8001918 <MX_DMA_Init>

	/* Initialize ADC1 */
	MX_ADC1_Init();
 80024a8:	f7fe fcb2 	bl	8000e10 <MX_ADC1_Init>

	/* Initialize time base timer for ADC triggering */
	MX_TIM3_Init();
 80024ac:	f000 f8f2 	bl	8002694 <MX_TIM3_Init>

	/* Start ADC with DMA */
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 80024b0:	220a      	movs	r2, #10
 80024b2:	4904      	ldr	r1, [pc, #16]	; (80024c4 <PEDAL_HW_Init+0x24>)
 80024b4:	4804      	ldr	r0, [pc, #16]	; (80024c8 <PEDAL_HW_Init+0x28>)
 80024b6:	f000 fee7 	bl	8003288 <HAL_ADC_Start_DMA>

	/* Start time base trigger ADC timer */
	HAL_TIM_Base_Start(&htim3);
 80024ba:	4804      	ldr	r0, [pc, #16]	; (80024cc <PEDAL_HW_Init+0x2c>)
 80024bc:	f003 fdd6 	bl	800606c <HAL_TIM_Base_Start>
}
 80024c0:	bf00      	nop
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	20000200 	.word	0x20000200
 80024c8:	200000e4 	.word	0x200000e4
 80024cc:	20000218 	.word	0x20000218

080024d0 <HAL_ADC_ConvCpltCallback>:
 * Exported functions implementation
 **********************************************************************************************************************/

/* Called when buffer is completely filled */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
	/* Start ADC DMA again */
	HAL_ADC_Start_DMA(hadc, (uint32_t*)adc_buf, ADC_BUF_LEN);
 80024d8:	220a      	movs	r2, #10
 80024da:	4905      	ldr	r1, [pc, #20]	; (80024f0 <HAL_ADC_ConvCpltCallback+0x20>)
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f000 fed3 	bl	8003288 <HAL_ADC_Start_DMA>

	/* The flag indicates that the callback was called */
	flag_adc = ADC_CONV_COMPLETED;
 80024e2:	4b04      	ldr	r3, [pc, #16]	; (80024f4 <HAL_ADC_ConvCpltCallback+0x24>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	701a      	strb	r2, [r3, #0]
}
 80024e8:	bf00      	nop
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	20000200 	.word	0x20000200
 80024f4:	2000004b 	.word	0x2000004b

080024f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024fe:	2300      	movs	r3, #0
 8002500:	607b      	str	r3, [r7, #4]
 8002502:	4b10      	ldr	r3, [pc, #64]	; (8002544 <HAL_MspInit+0x4c>)
 8002504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002506:	4a0f      	ldr	r2, [pc, #60]	; (8002544 <HAL_MspInit+0x4c>)
 8002508:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800250c:	6453      	str	r3, [r2, #68]	; 0x44
 800250e:	4b0d      	ldr	r3, [pc, #52]	; (8002544 <HAL_MspInit+0x4c>)
 8002510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002512:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002516:	607b      	str	r3, [r7, #4]
 8002518:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800251a:	2300      	movs	r3, #0
 800251c:	603b      	str	r3, [r7, #0]
 800251e:	4b09      	ldr	r3, [pc, #36]	; (8002544 <HAL_MspInit+0x4c>)
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	4a08      	ldr	r2, [pc, #32]	; (8002544 <HAL_MspInit+0x4c>)
 8002524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002528:	6413      	str	r3, [r2, #64]	; 0x40
 800252a:	4b06      	ldr	r3, [pc, #24]	; (8002544 <HAL_MspInit+0x4c>)
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002532:	603b      	str	r3, [r7, #0]
 8002534:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002536:	bf00      	nop
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	40023800 	.word	0x40023800

08002548 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800254c:	e7fe      	b.n	800254c <NMI_Handler+0x4>

0800254e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800254e:	b480      	push	{r7}
 8002550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002552:	e7fe      	b.n	8002552 <HardFault_Handler+0x4>

08002554 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002558:	e7fe      	b.n	8002558 <MemManage_Handler+0x4>

0800255a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800255a:	b480      	push	{r7}
 800255c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800255e:	e7fe      	b.n	800255e <BusFault_Handler+0x4>

08002560 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002564:	e7fe      	b.n	8002564 <UsageFault_Handler+0x4>

08002566 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002566:	b480      	push	{r7}
 8002568:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800256a:	bf00      	nop
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002578:	bf00      	nop
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr

08002582 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002582:	b480      	push	{r7}
 8002584:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002586:	bf00      	nop
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002594:	f000 fcb0 	bl	8002ef8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002598:	bf00      	nop
 800259a:	bd80      	pop	{r7, pc}

0800259c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80025a0:	4802      	ldr	r0, [pc, #8]	; (80025ac <ADC_IRQHandler+0x10>)
 80025a2:	f000 fd30 	bl	8003006 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80025a6:	bf00      	nop
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	200000e4 	.word	0x200000e4

080025b0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_ECO_Pin);
 80025b4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80025b8:	f002 ff08 	bl	80053cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80025bc:	bf00      	nop
 80025be:	bd80      	pop	{r7, pc}

080025c0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_NORMAL_Pin);
 80025c4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80025c8:	f002 ff00 	bl	80053cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_SPORT_Pin);
 80025cc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80025d0:	f002 fefc 	bl	80053cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80025d4:	bf00      	nop
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80025dc:	4802      	ldr	r0, [pc, #8]	; (80025e8 <TIM7_IRQHandler+0x10>)
 80025de:	f003 ffaf 	bl	8006540 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80025e2:	bf00      	nop
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	20000260 	.word	0x20000260

080025ec <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80025f0:	4802      	ldr	r0, [pc, #8]	; (80025fc <DMA2_Stream0_IRQHandler+0x10>)
 80025f2:	f002 faa1 	bl	8004b38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80025f6:	bf00      	nop
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	2000012c 	.word	0x2000012c

08002600 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupt.
  */
void CAN2_TX_IRQHandler(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002604:	4802      	ldr	r0, [pc, #8]	; (8002610 <CAN2_TX_IRQHandler+0x10>)
 8002606:	f001 fe5a 	bl	80042be <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 800260a:	bf00      	nop
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	200001a0 	.word	0x200001a0

08002614 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002618:	4802      	ldr	r0, [pc, #8]	; (8002624 <CAN2_RX0_IRQHandler+0x10>)
 800261a:	f001 fe50 	bl	80042be <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800261e:	bf00      	nop
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	200001a0 	.word	0x200001a0

08002628 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002630:	4a14      	ldr	r2, [pc, #80]	; (8002684 <_sbrk+0x5c>)
 8002632:	4b15      	ldr	r3, [pc, #84]	; (8002688 <_sbrk+0x60>)
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800263c:	4b13      	ldr	r3, [pc, #76]	; (800268c <_sbrk+0x64>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d102      	bne.n	800264a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002644:	4b11      	ldr	r3, [pc, #68]	; (800268c <_sbrk+0x64>)
 8002646:	4a12      	ldr	r2, [pc, #72]	; (8002690 <_sbrk+0x68>)
 8002648:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800264a:	4b10      	ldr	r3, [pc, #64]	; (800268c <_sbrk+0x64>)
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4413      	add	r3, r2
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	429a      	cmp	r2, r3
 8002656:	d207      	bcs.n	8002668 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002658:	f005 f98e 	bl	8007978 <__errno>
 800265c:	4603      	mov	r3, r0
 800265e:	220c      	movs	r2, #12
 8002660:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002662:	f04f 33ff 	mov.w	r3, #4294967295
 8002666:	e009      	b.n	800267c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002668:	4b08      	ldr	r3, [pc, #32]	; (800268c <_sbrk+0x64>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800266e:	4b07      	ldr	r3, [pc, #28]	; (800268c <_sbrk+0x64>)
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4413      	add	r3, r2
 8002676:	4a05      	ldr	r2, [pc, #20]	; (800268c <_sbrk+0x64>)
 8002678:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800267a:	68fb      	ldr	r3, [r7, #12]
}
 800267c:	4618      	mov	r0, r3
 800267e:	3718      	adds	r7, #24
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	20020000 	.word	0x20020000
 8002688:	00000400 	.word	0x00000400
 800268c:	20000214 	.word	0x20000214
 8002690:	200003a8 	.word	0x200003a8

08002694 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim7;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b086      	sub	sp, #24
 8002698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800269a:	f107 0308 	add.w	r3, r7, #8
 800269e:	2200      	movs	r2, #0
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	605a      	str	r2, [r3, #4]
 80026a4:	609a      	str	r2, [r3, #8]
 80026a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026a8:	463b      	mov	r3, r7
 80026aa:	2200      	movs	r2, #0
 80026ac:	601a      	str	r2, [r3, #0]
 80026ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80026b0:	4b1d      	ldr	r3, [pc, #116]	; (8002728 <MX_TIM3_Init+0x94>)
 80026b2:	4a1e      	ldr	r2, [pc, #120]	; (800272c <MX_TIM3_Init+0x98>)
 80026b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8000-1;
 80026b6:	4b1c      	ldr	r3, [pc, #112]	; (8002728 <MX_TIM3_Init+0x94>)
 80026b8:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80026bc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026be:	4b1a      	ldr	r3, [pc, #104]	; (8002728 <MX_TIM3_Init+0x94>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500-1;
 80026c4:	4b18      	ldr	r3, [pc, #96]	; (8002728 <MX_TIM3_Init+0x94>)
 80026c6:	f240 12f3 	movw	r2, #499	; 0x1f3
 80026ca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026cc:	4b16      	ldr	r3, [pc, #88]	; (8002728 <MX_TIM3_Init+0x94>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026d2:	4b15      	ldr	r3, [pc, #84]	; (8002728 <MX_TIM3_Init+0x94>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80026d8:	4813      	ldr	r0, [pc, #76]	; (8002728 <MX_TIM3_Init+0x94>)
 80026da:	f003 fc77 	bl	8005fcc <HAL_TIM_Base_Init>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80026e4:	f7ff fab0 	bl	8001c48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80026ee:	f107 0308 	add.w	r3, r7, #8
 80026f2:	4619      	mov	r1, r3
 80026f4:	480c      	ldr	r0, [pc, #48]	; (8002728 <MX_TIM3_Init+0x94>)
 80026f6:	f004 f8ed 	bl	80068d4 <HAL_TIM_ConfigClockSource>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002700:	f7ff faa2 	bl	8001c48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002704:	2320      	movs	r3, #32
 8002706:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8002708:	2380      	movs	r3, #128	; 0x80
 800270a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800270c:	463b      	mov	r3, r7
 800270e:	4619      	mov	r1, r3
 8002710:	4805      	ldr	r0, [pc, #20]	; (8002728 <MX_TIM3_Init+0x94>)
 8002712:	f004 fcdf 	bl	80070d4 <HAL_TIMEx_MasterConfigSynchronization>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800271c:	f7ff fa94 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002720:	bf00      	nop
 8002722:	3718      	adds	r7, #24
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	20000218 	.word	0x20000218
 800272c:	40000400 	.word	0x40000400

08002730 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002736:	463b      	mov	r3, r7
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800273e:	4b15      	ldr	r3, [pc, #84]	; (8002794 <MX_TIM7_Init+0x64>)
 8002740:	4a15      	ldr	r2, [pc, #84]	; (8002798 <MX_TIM7_Init+0x68>)
 8002742:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 800-1;
 8002744:	4b13      	ldr	r3, [pc, #76]	; (8002794 <MX_TIM7_Init+0x64>)
 8002746:	f240 321f 	movw	r2, #799	; 0x31f
 800274a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800274c:	4b11      	ldr	r3, [pc, #68]	; (8002794 <MX_TIM7_Init+0x64>)
 800274e:	2200      	movs	r2, #0
 8002750:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000-1;
 8002752:	4b10      	ldr	r3, [pc, #64]	; (8002794 <MX_TIM7_Init+0x64>)
 8002754:	f242 720f 	movw	r2, #9999	; 0x270f
 8002758:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800275a:	4b0e      	ldr	r3, [pc, #56]	; (8002794 <MX_TIM7_Init+0x64>)
 800275c:	2200      	movs	r2, #0
 800275e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002760:	480c      	ldr	r0, [pc, #48]	; (8002794 <MX_TIM7_Init+0x64>)
 8002762:	f003 fc33 	bl	8005fcc <HAL_TIM_Base_Init>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800276c:	f7ff fa6c 	bl	8001c48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002770:	2300      	movs	r3, #0
 8002772:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002774:	2300      	movs	r3, #0
 8002776:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002778:	463b      	mov	r3, r7
 800277a:	4619      	mov	r1, r3
 800277c:	4805      	ldr	r0, [pc, #20]	; (8002794 <MX_TIM7_Init+0x64>)
 800277e:	f004 fca9 	bl	80070d4 <HAL_TIMEx_MasterConfigSynchronization>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002788:	f7ff fa5e 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800278c:	bf00      	nop
 800278e:	3708      	adds	r7, #8
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	20000260 	.word	0x20000260
 8002798:	40001400 	.word	0x40001400

0800279c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a18      	ldr	r2, [pc, #96]	; (800280c <HAL_TIM_Base_MspInit+0x70>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d10e      	bne.n	80027cc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027ae:	2300      	movs	r3, #0
 80027b0:	60fb      	str	r3, [r7, #12]
 80027b2:	4b17      	ldr	r3, [pc, #92]	; (8002810 <HAL_TIM_Base_MspInit+0x74>)
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	4a16      	ldr	r2, [pc, #88]	; (8002810 <HAL_TIM_Base_MspInit+0x74>)
 80027b8:	f043 0302 	orr.w	r3, r3, #2
 80027bc:	6413      	str	r3, [r2, #64]	; 0x40
 80027be:	4b14      	ldr	r3, [pc, #80]	; (8002810 <HAL_TIM_Base_MspInit+0x74>)
 80027c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	60fb      	str	r3, [r7, #12]
 80027c8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80027ca:	e01a      	b.n	8002802 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM7)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a10      	ldr	r2, [pc, #64]	; (8002814 <HAL_TIM_Base_MspInit+0x78>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d115      	bne.n	8002802 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80027d6:	2300      	movs	r3, #0
 80027d8:	60bb      	str	r3, [r7, #8]
 80027da:	4b0d      	ldr	r3, [pc, #52]	; (8002810 <HAL_TIM_Base_MspInit+0x74>)
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	4a0c      	ldr	r2, [pc, #48]	; (8002810 <HAL_TIM_Base_MspInit+0x74>)
 80027e0:	f043 0320 	orr.w	r3, r3, #32
 80027e4:	6413      	str	r3, [r2, #64]	; 0x40
 80027e6:	4b0a      	ldr	r3, [pc, #40]	; (8002810 <HAL_TIM_Base_MspInit+0x74>)
 80027e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ea:	f003 0320 	and.w	r3, r3, #32
 80027ee:	60bb      	str	r3, [r7, #8]
 80027f0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80027f2:	2200      	movs	r2, #0
 80027f4:	2100      	movs	r1, #0
 80027f6:	2037      	movs	r0, #55	; 0x37
 80027f8:	f002 f861 	bl	80048be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80027fc:	2037      	movs	r0, #55	; 0x37
 80027fe:	f002 f87a 	bl	80048f6 <HAL_NVIC_EnableIRQ>
}
 8002802:	bf00      	nop
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	40000400 	.word	0x40000400
 8002810:	40023800 	.word	0x40023800
 8002814:	40001400 	.word	0x40001400

08002818 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800281c:	4b11      	ldr	r3, [pc, #68]	; (8002864 <MX_USART6_UART_Init+0x4c>)
 800281e:	4a12      	ldr	r2, [pc, #72]	; (8002868 <MX_USART6_UART_Init+0x50>)
 8002820:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002822:	4b10      	ldr	r3, [pc, #64]	; (8002864 <MX_USART6_UART_Init+0x4c>)
 8002824:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002828:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800282a:	4b0e      	ldr	r3, [pc, #56]	; (8002864 <MX_USART6_UART_Init+0x4c>)
 800282c:	2200      	movs	r2, #0
 800282e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002830:	4b0c      	ldr	r3, [pc, #48]	; (8002864 <MX_USART6_UART_Init+0x4c>)
 8002832:	2200      	movs	r2, #0
 8002834:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002836:	4b0b      	ldr	r3, [pc, #44]	; (8002864 <MX_USART6_UART_Init+0x4c>)
 8002838:	2200      	movs	r2, #0
 800283a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800283c:	4b09      	ldr	r3, [pc, #36]	; (8002864 <MX_USART6_UART_Init+0x4c>)
 800283e:	220c      	movs	r2, #12
 8002840:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002842:	4b08      	ldr	r3, [pc, #32]	; (8002864 <MX_USART6_UART_Init+0x4c>)
 8002844:	2200      	movs	r2, #0
 8002846:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002848:	4b06      	ldr	r3, [pc, #24]	; (8002864 <MX_USART6_UART_Init+0x4c>)
 800284a:	2200      	movs	r2, #0
 800284c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800284e:	4805      	ldr	r0, [pc, #20]	; (8002864 <MX_USART6_UART_Init+0x4c>)
 8002850:	f004 fcd0 	bl	80071f4 <HAL_UART_Init>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800285a:	f7ff f9f5 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800285e:	bf00      	nop
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	200002a8 	.word	0x200002a8
 8002868:	40011400 	.word	0x40011400

0800286c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b08a      	sub	sp, #40	; 0x28
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002874:	f107 0314 	add.w	r3, r7, #20
 8002878:	2200      	movs	r2, #0
 800287a:	601a      	str	r2, [r3, #0]
 800287c:	605a      	str	r2, [r3, #4]
 800287e:	609a      	str	r2, [r3, #8]
 8002880:	60da      	str	r2, [r3, #12]
 8002882:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a19      	ldr	r2, [pc, #100]	; (80028f0 <HAL_UART_MspInit+0x84>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d12b      	bne.n	80028e6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800288e:	2300      	movs	r3, #0
 8002890:	613b      	str	r3, [r7, #16]
 8002892:	4b18      	ldr	r3, [pc, #96]	; (80028f4 <HAL_UART_MspInit+0x88>)
 8002894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002896:	4a17      	ldr	r2, [pc, #92]	; (80028f4 <HAL_UART_MspInit+0x88>)
 8002898:	f043 0320 	orr.w	r3, r3, #32
 800289c:	6453      	str	r3, [r2, #68]	; 0x44
 800289e:	4b15      	ldr	r3, [pc, #84]	; (80028f4 <HAL_UART_MspInit+0x88>)
 80028a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a2:	f003 0320 	and.w	r3, r3, #32
 80028a6:	613b      	str	r3, [r7, #16]
 80028a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028aa:	2300      	movs	r3, #0
 80028ac:	60fb      	str	r3, [r7, #12]
 80028ae:	4b11      	ldr	r3, [pc, #68]	; (80028f4 <HAL_UART_MspInit+0x88>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b2:	4a10      	ldr	r2, [pc, #64]	; (80028f4 <HAL_UART_MspInit+0x88>)
 80028b4:	f043 0304 	orr.w	r3, r3, #4
 80028b8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ba:	4b0e      	ldr	r3, [pc, #56]	; (80028f4 <HAL_UART_MspInit+0x88>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	f003 0304 	and.w	r3, r3, #4
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80028c6:	23c0      	movs	r3, #192	; 0xc0
 80028c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ca:	2302      	movs	r3, #2
 80028cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ce:	2300      	movs	r3, #0
 80028d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028d2:	2303      	movs	r3, #3
 80028d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80028d6:	2308      	movs	r3, #8
 80028d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028da:	f107 0314 	add.w	r3, r7, #20
 80028de:	4619      	mov	r1, r3
 80028e0:	4805      	ldr	r0, [pc, #20]	; (80028f8 <HAL_UART_MspInit+0x8c>)
 80028e2:	f002 fb93 	bl	800500c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80028e6:	bf00      	nop
 80028e8:	3728      	adds	r7, #40	; 0x28
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	40011400 	.word	0x40011400
 80028f4:	40023800 	.word	0x40023800
 80028f8:	40020800 	.word	0x40020800

080028fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80028fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002934 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002900:	480d      	ldr	r0, [pc, #52]	; (8002938 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002902:	490e      	ldr	r1, [pc, #56]	; (800293c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002904:	4a0e      	ldr	r2, [pc, #56]	; (8002940 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002906:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002908:	e002      	b.n	8002910 <LoopCopyDataInit>

0800290a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800290a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800290c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800290e:	3304      	adds	r3, #4

08002910 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002910:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002912:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002914:	d3f9      	bcc.n	800290a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002916:	4a0b      	ldr	r2, [pc, #44]	; (8002944 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002918:	4c0b      	ldr	r4, [pc, #44]	; (8002948 <LoopFillZerobss+0x26>)
  movs r3, #0
 800291a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800291c:	e001      	b.n	8002922 <LoopFillZerobss>

0800291e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800291e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002920:	3204      	adds	r2, #4

08002922 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002922:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002924:	d3fb      	bcc.n	800291e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002926:	f000 fa83 	bl	8002e30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800292a:	f005 f82b 	bl	8007984 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800292e:	f7ff f914 	bl	8001b5a <main>
  bx  lr    
 8002932:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002934:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002938:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800293c:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 8002940:	08008458 	.word	0x08008458
  ldr r2, =_sbss
 8002944:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 8002948:	200003a4 	.word	0x200003a4

0800294c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800294c:	e7fe      	b.n	800294c <CAN1_RX0_IRQHandler>
	...

08002950 <BSP_BUZZER_Init>:
 *
 * @param None
 * @retval BSP status
 */
int32_t BSP_BUZZER_Init(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b090      	sub	sp, #64	; 0x40
 8002954:	af00      	add	r7, sp, #0
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002956:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800295a:	2200      	movs	r2, #0
 800295c:	601a      	str	r2, [r3, #0]
 800295e:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8002960:	f107 031c 	add.w	r3, r7, #28
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	60da      	str	r2, [r3, #12]
 800296e:	611a      	str	r2, [r3, #16]
 8002970:	615a      	str	r2, [r3, #20]
 8002972:	619a      	str	r2, [r3, #24]

	/* Configure the Buzzer PWM Timer */
	htim_buzzer.Instance = BUZZER_PWM_TIM_INSTANCE;
 8002974:	4b33      	ldr	r3, [pc, #204]	; (8002a44 <BSP_BUZZER_Init+0xf4>)
 8002976:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800297a:	601a      	str	r2, [r3, #0]
	htim_buzzer.Init.Prescaler = 80-1;
 800297c:	4b31      	ldr	r3, [pc, #196]	; (8002a44 <BSP_BUZZER_Init+0xf4>)
 800297e:	224f      	movs	r2, #79	; 0x4f
 8002980:	605a      	str	r2, [r3, #4]
	htim_buzzer.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002982:	4b30      	ldr	r3, [pc, #192]	; (8002a44 <BSP_BUZZER_Init+0xf4>)
 8002984:	2200      	movs	r2, #0
 8002986:	609a      	str	r2, [r3, #8]
	htim_buzzer.Init.Period = 250-1;
 8002988:	4b2e      	ldr	r3, [pc, #184]	; (8002a44 <BSP_BUZZER_Init+0xf4>)
 800298a:	22f9      	movs	r2, #249	; 0xf9
 800298c:	60da      	str	r2, [r3, #12]
	htim_buzzer.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800298e:	4b2d      	ldr	r3, [pc, #180]	; (8002a44 <BSP_BUZZER_Init+0xf4>)
 8002990:	2200      	movs	r2, #0
 8002992:	611a      	str	r2, [r3, #16]
	htim_buzzer.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002994:	4b2b      	ldr	r3, [pc, #172]	; (8002a44 <BSP_BUZZER_Init+0xf4>)
 8002996:	2200      	movs	r2, #0
 8002998:	619a      	str	r2, [r3, #24]

	/* TIM peripheral clock enable */
	BUZZER_TIM_CLK_ENABLE();
 800299a:	2300      	movs	r3, #0
 800299c:	607b      	str	r3, [r7, #4]
 800299e:	4b2a      	ldr	r3, [pc, #168]	; (8002a48 <BSP_BUZZER_Init+0xf8>)
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	4a29      	ldr	r2, [pc, #164]	; (8002a48 <BSP_BUZZER_Init+0xf8>)
 80029a4:	f043 0301 	orr.w	r3, r3, #1
 80029a8:	6413      	str	r3, [r2, #64]	; 0x40
 80029aa:	4b27      	ldr	r3, [pc, #156]	; (8002a48 <BSP_BUZZER_Init+0xf8>)
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	607b      	str	r3, [r7, #4]
 80029b4:	687b      	ldr	r3, [r7, #4]

	HAL_TIM_PWM_Init(&htim_buzzer);
 80029b6:	4823      	ldr	r0, [pc, #140]	; (8002a44 <BSP_BUZZER_Init+0xf4>)
 80029b8:	f003 fc30 	bl	800621c <HAL_TIM_PWM_Init>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029bc:	2300      	movs	r3, #0
 80029be:	63bb      	str	r3, [r7, #56]	; 0x38
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029c0:	2300      	movs	r3, #0
 80029c2:	63fb      	str	r3, [r7, #60]	; 0x3c

	HAL_TIMEx_MasterConfigSynchronization(&htim_buzzer, &sMasterConfig);
 80029c4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80029c8:	4619      	mov	r1, r3
 80029ca:	481e      	ldr	r0, [pc, #120]	; (8002a44 <BSP_BUZZER_Init+0xf4>)
 80029cc:	f004 fb82 	bl	80070d4 <HAL_TIMEx_MasterConfigSynchronization>

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029d0:	2360      	movs	r3, #96	; 0x60
 80029d2:	61fb      	str	r3, [r7, #28]
	sConfigOC.Pulse = 0;
 80029d4:	2300      	movs	r3, #0
 80029d6:	623b      	str	r3, [r7, #32]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029d8:	2300      	movs	r3, #0
 80029da:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029dc:	2300      	movs	r3, #0
 80029de:	62fb      	str	r3, [r7, #44]	; 0x2c

	HAL_TIM_PWM_ConfigChannel(&htim_buzzer, &sConfigOC, TIM_CHANNEL_3);
 80029e0:	f107 031c 	add.w	r3, r7, #28
 80029e4:	2208      	movs	r2, #8
 80029e6:	4619      	mov	r1, r3
 80029e8:	4816      	ldr	r0, [pc, #88]	; (8002a44 <BSP_BUZZER_Init+0xf4>)
 80029ea:	f003 feb1 	bl	8006750 <HAL_TIM_PWM_ConfigChannel>

	/* HAL_TIM_MspPostInit function  */

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ee:	f107 0308 	add.w	r3, r7, #8
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	605a      	str	r2, [r3, #4]
 80029f8:	609a      	str	r2, [r3, #8]
 80029fa:	60da      	str	r2, [r3, #12]
 80029fc:	611a      	str	r2, [r3, #16]

	BUZZER_GPIO_CLK_ENABLE();
 80029fe:	2300      	movs	r3, #0
 8002a00:	603b      	str	r3, [r7, #0]
 8002a02:	4b11      	ldr	r3, [pc, #68]	; (8002a48 <BSP_BUZZER_Init+0xf8>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a06:	4a10      	ldr	r2, [pc, #64]	; (8002a48 <BSP_BUZZER_Init+0xf8>)
 8002a08:	f043 0301 	orr.w	r3, r3, #1
 8002a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a0e:	4b0e      	ldr	r3, [pc, #56]	; (8002a48 <BSP_BUZZER_Init+0xf8>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	603b      	str	r3, [r7, #0]
 8002a18:	683b      	ldr	r3, [r7, #0]

	/** BUZZER GPIO Configuration
        PA2     ------> TIM2_CH3
	 */
	GPIO_InitStruct.Pin = BUZZER_GPIO_PIN;
 8002a1a:	2304      	movs	r3, #4
 8002a1c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1e:	2302      	movs	r3, #2
 8002a20:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a22:	2300      	movs	r3, #0
 8002a24:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a26:	2300      	movs	r3, #0
 8002a28:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(BUZZER_GPIO_PORT, &GPIO_InitStruct);
 8002a2e:	f107 0308 	add.w	r3, r7, #8
 8002a32:	4619      	mov	r1, r3
 8002a34:	4805      	ldr	r0, [pc, #20]	; (8002a4c <BSP_BUZZER_Init+0xfc>)
 8002a36:	f002 fae9 	bl	800500c <HAL_GPIO_Init>

	return BSP_ERROR_NONE;
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3740      	adds	r7, #64	; 0x40
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	200002ec 	.word	0x200002ec
 8002a48:	40023800 	.word	0x40023800
 8002a4c:	40020000 	.word	0x40020000

08002a50 <BSP_BUZZER_On>:
 *
 * @param None
 * @return BSP Status
 */
int32_t BSP_BUZZER_On(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
	/* Configure Duty Cycle */
	BUZZER_PWM_TIM_INSTANCE->CCR3=125;
 8002a54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a58:	227d      	movs	r2, #125	; 0x7d
 8002a5a:	63da      	str	r2, [r3, #60]	; 0x3c

	/* Start PWM */
	HAL_TIM_PWM_Start(&htim_buzzer, BUZZER_PWM_TIM_CHANNEL);
 8002a5c:	2108      	movs	r1, #8
 8002a5e:	4803      	ldr	r0, [pc, #12]	; (8002a6c <BSP_BUZZER_On+0x1c>)
 8002a60:	f003 fc36 	bl	80062d0 <HAL_TIM_PWM_Start>

    return BSP_ERROR_NONE;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	200002ec 	.word	0x200002ec

08002a70 <BSP_BUZZER_Off>:
 *
 * @param None
 * @return BSP Status
 */
int32_t BSP_BUZZER_Off(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
	/* Stop PWM */
    HAL_TIM_PWM_Stop(&htim_buzzer, BUZZER_PWM_TIM_CHANNEL);
 8002a74:	2108      	movs	r1, #8
 8002a76:	4803      	ldr	r0, [pc, #12]	; (8002a84 <BSP_BUZZER_Off+0x14>)
 8002a78:	f003 fcf2 	bl	8006460 <HAL_TIM_PWM_Stop>

    return BSP_ERROR_NONE;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	200002ec 	.word	0x200002ec

08002a88 <BSP_LED_Init>:
 *          @arg LED3
 *
 * @return BSP Status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b088      	sub	sp, #32
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	4603      	mov	r3, r0
 8002a90:	71fb      	strb	r3, [r7, #7]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a92:	f107 030c 	add.w	r3, r7, #12
 8002a96:	2200      	movs	r2, #0
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	605a      	str	r2, [r3, #4]
 8002a9c:	609a      	str	r2, [r3, #8]
 8002a9e:	60da      	str	r2, [r3, #12]
 8002aa0:	611a      	str	r2, [r3, #16]

    /* Enable the GPIO_LED Clock */
    LEDx_GPIO_CLK_ENABLE(Led);
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60bb      	str	r3, [r7, #8]
 8002aa6:	4b19      	ldr	r3, [pc, #100]	; (8002b0c <BSP_LED_Init+0x84>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	4a18      	ldr	r2, [pc, #96]	; (8002b0c <BSP_LED_Init+0x84>)
 8002aac:	f043 0308 	orr.w	r3, r3, #8
 8002ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ab2:	4b16      	ldr	r3, [pc, #88]	; (8002b0c <BSP_LED_Init+0x84>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	f003 0308 	and.w	r3, r3, #8
 8002aba:	60bb      	str	r3, [r7, #8]
 8002abc:	68bb      	ldr	r3, [r7, #8]

    /* Configure the GPIO_LED pin */
    GPIO_InitStruct.Pin = LED_PIN[Led];
 8002abe:	79fb      	ldrb	r3, [r7, #7]
 8002ac0:	4a13      	ldr	r2, [pc, #76]	; (8002b10 <BSP_LED_Init+0x88>)
 8002ac2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ac6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002acc:	2300      	movs	r3, #0
 8002ace:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	61bb      	str	r3, [r7, #24]

    HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8002ad4:	79fb      	ldrb	r3, [r7, #7]
 8002ad6:	4a0f      	ldr	r2, [pc, #60]	; (8002b14 <BSP_LED_Init+0x8c>)
 8002ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002adc:	f107 020c 	add.w	r2, r7, #12
 8002ae0:	4611      	mov	r1, r2
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f002 fa92 	bl	800500c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8002ae8:	79fb      	ldrb	r3, [r7, #7]
 8002aea:	4a0a      	ldr	r2, [pc, #40]	; (8002b14 <BSP_LED_Init+0x8c>)
 8002aec:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002af0:	79fb      	ldrb	r3, [r7, #7]
 8002af2:	4a07      	ldr	r2, [pc, #28]	; (8002b10 <BSP_LED_Init+0x88>)
 8002af4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002af8:	2201      	movs	r2, #1
 8002afa:	4619      	mov	r1, r3
 8002afc:	f002 fc32 	bl	8005364 <HAL_GPIO_WritePin>

    return BSP_ERROR_NONE;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3720      	adds	r7, #32
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	080083ec 	.word	0x080083ec
 8002b14:	2000004c 	.word	0x2000004c

08002b18 <BSP_LED_On>:
 *          @arg LED2
 *          @arg LED3
 * @return BSP Status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	4603      	mov	r3, r0
 8002b20:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002b22:	79fb      	ldrb	r3, [r7, #7]
 8002b24:	4a07      	ldr	r2, [pc, #28]	; (8002b44 <BSP_LED_On+0x2c>)
 8002b26:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002b2a:	79fb      	ldrb	r3, [r7, #7]
 8002b2c:	4a06      	ldr	r2, [pc, #24]	; (8002b48 <BSP_LED_On+0x30>)
 8002b2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b32:	2200      	movs	r2, #0
 8002b34:	4619      	mov	r1, r3
 8002b36:	f002 fc15 	bl	8005364 <HAL_GPIO_WritePin>

    return BSP_ERROR_NONE;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3708      	adds	r7, #8
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	2000004c 	.word	0x2000004c
 8002b48:	080083ec 	.word	0x080083ec

08002b4c <BSP_LED_Off>:
 *          @arg LED2
 *          @arg LED3
 * @return BSP Status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	4603      	mov	r3, r0
 8002b54:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8002b56:	79fb      	ldrb	r3, [r7, #7]
 8002b58:	4a07      	ldr	r2, [pc, #28]	; (8002b78 <BSP_LED_Off+0x2c>)
 8002b5a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002b5e:	79fb      	ldrb	r3, [r7, #7]
 8002b60:	4a06      	ldr	r2, [pc, #24]	; (8002b7c <BSP_LED_Off+0x30>)
 8002b62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b66:	2201      	movs	r2, #1
 8002b68:	4619      	mov	r1, r3
 8002b6a:	f002 fbfb 	bl	8005364 <HAL_GPIO_WritePin>

    return BSP_ERROR_NONE;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3708      	adds	r7, #8
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	2000004c 	.word	0x2000004c
 8002b7c:	080083ec 	.word	0x080083ec

08002b80 <BSP_LED_Toggle>:
 *          @arg LED2
 *          @arg LED3
 * @return BSP Status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	4603      	mov	r3, r0
 8002b88:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8002b8a:	79fb      	ldrb	r3, [r7, #7]
 8002b8c:	4a07      	ldr	r2, [pc, #28]	; (8002bac <BSP_LED_Toggle+0x2c>)
 8002b8e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002b92:	79fb      	ldrb	r3, [r7, #7]
 8002b94:	4906      	ldr	r1, [pc, #24]	; (8002bb0 <BSP_LED_Toggle+0x30>)
 8002b96:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	4610      	mov	r0, r2
 8002b9e:	f002 fbfa 	bl	8005396 <HAL_GPIO_TogglePin>

    return BSP_ERROR_NONE;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3708      	adds	r7, #8
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	2000004c 	.word	0x2000004c
 8002bb0:	080083ec 	.word	0x080083ec

08002bb4 <CAN_API_Init>:
							can_rtr_t RTR,
							init_ll_can_t Fn_Init_Can,
							send_can_data_t Fn_Send_Can_Data,
							read_can_data_t Fn_Read_Can_Data,
							get_msg_count_t Fn_Get_Msg_Count)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	607b      	str	r3, [r7, #4]
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	72fb      	strb	r3, [r7, #11]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	72bb      	strb	r3, [r7, #10]
    can_status_t status;

    obj->Fn_Init_Can = Fn_Init_Can;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	611a      	str	r2, [r3, #16]

    obj->Fn_Send_Can_Data = Fn_Send_Can_Data;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6a3a      	ldr	r2, [r7, #32]
 8002bd0:	615a      	str	r2, [r3, #20]

    obj->Fn_Read_Can_Data = Fn_Read_Can_Data;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bd6:	619a      	str	r2, [r3, #24]

    obj->Fn_Get_Msg_Count = Fn_Get_Msg_Count;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bdc:	61da      	str	r2, [r3, #28]

    obj->Frame.IDE = IDE;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	7afa      	ldrb	r2, [r7, #11]
 8002be2:	711a      	strb	r2, [r3, #4]
    obj->Frame.RTR = RTR;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	7aba      	ldrb	r2, [r7, #10]
 8002be8:	715a      	strb	r2, [r3, #5]
    obj->Frame.payload_length = 0;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	73da      	strb	r2, [r3, #15]

    status = obj->Fn_Init_Can();
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	4798      	blx	r3
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	75fb      	strb	r3, [r7, #23]

    return status;
 8002bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3718      	adds	r7, #24
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <CAN_API_Send_Message>:
 *
 * @param obj CAN structure instance
 * @return can_status_t
 */
can_status_t CAN_API_Send_Message( CAN_t *obj)
{
 8002c04:	b5b0      	push	{r4, r5, r7, lr}
 8002c06:	b086      	sub	sp, #24
 8002c08:	af02      	add	r7, sp, #8
 8002c0a:	6078      	str	r0, [r7, #4]
    can_status_t status;

    obj->Frame.DLC = (obj->Frame.payload_length>PAYLOAD_MAX_LENGTH) ? obj->Frame.payload_length=PAYLOAD_MAX_LENGTH : obj->Frame.payload_length;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	7bdb      	ldrb	r3, [r3, #15]
 8002c10:	2b08      	cmp	r3, #8
 8002c12:	d904      	bls.n	8002c1e <CAN_API_Send_Message+0x1a>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2208      	movs	r2, #8
 8002c18:	73da      	strb	r2, [r3, #15]
 8002c1a:	2208      	movs	r2, #8
 8002c1c:	e001      	b.n	8002c22 <CAN_API_Send_Message+0x1e>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	7bda      	ldrb	r2, [r3, #15]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	719a      	strb	r2, [r3, #6]

    status = obj->Fn_Send_Can_Data( obj->Frame.id,
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	695c      	ldr	r4, [r3, #20]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6818      	ldr	r0, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	7919      	ldrb	r1, [r3, #4]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	795a      	ldrb	r2, [r3, #5]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	799d      	ldrb	r5, [r3, #6]
                                    obj->Frame.IDE,
                                    obj->Frame.RTR,
                                    obj->Frame.DLC,
                                    (obj->Frame.payload_buff) );
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	3307      	adds	r3, #7
    status = obj->Fn_Send_Can_Data( obj->Frame.id,
 8002c3e:	9300      	str	r3, [sp, #0]
 8002c40:	462b      	mov	r3, r5
 8002c42:	47a0      	blx	r4
 8002c44:	4603      	mov	r3, r0
 8002c46:	73fb      	strb	r3, [r7, #15]

    return status;
 8002c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bdb0      	pop	{r4, r5, r7, pc}

08002c52 <CAN_API_Read_Message>:
 *
 * @param obj CAN structure instance
 * @return can_status_t
 */
can_status_t CAN_API_Read_Message( CAN_t *obj)
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b084      	sub	sp, #16
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
    can_status_t status;

    status = obj->Fn_Read_Can_Data( &obj->Frame.id,
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	6878      	ldr	r0, [r7, #4]
                                    obj->Frame.payload_buff);
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	3207      	adds	r2, #7
    status = obj->Fn_Read_Can_Data( &obj->Frame.id,
 8002c64:	4611      	mov	r1, r2
 8002c66:	4798      	blx	r3
 8002c68:	4603      	mov	r3, r0
 8002c6a:	73fb      	strb	r3, [r7, #15]

    return status;
 8002c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
	...

08002c78 <CAN_Wrapper_Init>:
 *
 * @param   None
 * @retval  None
 */
can_status_t CAN_Wrapper_Init(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
	/*
	 *  STM32 CAN initialization
	 */

	/* Initialize time base timer for CAN triggering */
	MX_TIM7_Init();
 8002c7c:	f7ff fd58 	bl	8002730 <MX_TIM7_Init>

	/* Initialize CAN2 */
	MX_CAN2_Init();
 8002c80:	f7fe fb60 	bl	8001344 <MX_CAN2_Init>

	/* Disable debug freeze */
	CAN2->MCR &= (~CAN_MCR_DBF);
 8002c84:	4b0f      	ldr	r3, [pc, #60]	; (8002cc4 <CAN_Wrapper_Init+0x4c>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a0e      	ldr	r2, [pc, #56]	; (8002cc4 <CAN_Wrapper_Init+0x4c>)
 8002c8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c8e:	6013      	str	r3, [r2, #0]

	/* CAN filter configuration */
	CAN_FilterConfig();
 8002c90:	f000 f86a 	bl	8002d68 <CAN_FilterConfig>

	/* Start CAN module */
	if (HAL_CAN_Start(&hcan2) != HAL_OK)
 8002c94:	480c      	ldr	r0, [pc, #48]	; (8002cc8 <CAN_Wrapper_Init+0x50>)
 8002c96:	f001 f8bb 	bl	8003e10 <HAL_CAN_Start>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <CAN_Wrapper_Init+0x2c>
	{
		Error_Handler();
 8002ca0:	f7fe ffd2 	bl	8001c48 <Error_Handler>
	}

	/* Activate CAN notification (enable interrupts) */
	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8002ca4:	2102      	movs	r1, #2
 8002ca6:	4808      	ldr	r0, [pc, #32]	; (8002cc8 <CAN_Wrapper_Init+0x50>)
 8002ca8:	f001 fae3 	bl	8004272 <HAL_CAN_ActivateNotification>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <CAN_Wrapper_Init+0x3e>
	{
		Error_Handler();
 8002cb2:	f7fe ffc9 	bl	8001c48 <Error_Handler>
	}
	
	/* Start time base trigger CAN timer */
	HAL_TIM_Base_Start_IT(&htim7);
 8002cb6:	4805      	ldr	r0, [pc, #20]	; (8002ccc <CAN_Wrapper_Init+0x54>)
 8002cb8:	f003 fa40 	bl	800613c <HAL_TIM_Base_Start_IT>

	return CAN_STATUS_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40006800 	.word	0x40006800
 8002cc8:	200001a0 	.word	0x200001a0
 8002ccc:	20000260 	.word	0x20000260

08002cd0 <CAN_Wrapper_TransmitData>:
 * @param dlc Length of frame
 * @param data Data to transmit
 * @retval None
 */
can_status_t CAN_Wrapper_TransmitData(uint32_t id, uint8_t ide, uint8_t rtr, uint8_t dlc, uint8_t *data)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	4608      	mov	r0, r1
 8002cda:	4611      	mov	r1, r2
 8002cdc:	461a      	mov	r2, r3
 8002cde:	4603      	mov	r3, r0
 8002ce0:	70fb      	strb	r3, [r7, #3]
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	70bb      	strb	r3, [r7, #2]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	707b      	strb	r3, [r7, #1]
	 */

    uint32_t TxMailbox;

    /* CAN message transmission configuration */
	TxHeader.StdId = id;            			// standard identifier value
 8002cea:	4a0d      	ldr	r2, [pc, #52]	; (8002d20 <CAN_Wrapper_TransmitData+0x50>)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6013      	str	r3, [r2, #0]
	TxHeader.DLC = dlc; 						// length of frame
 8002cf0:	787b      	ldrb	r3, [r7, #1]
 8002cf2:	4a0b      	ldr	r2, [pc, #44]	; (8002d20 <CAN_Wrapper_TransmitData+0x50>)
 8002cf4:	6113      	str	r3, [r2, #16]
	TxHeader.IDE = CAN_ID_STD; 					// type of identifier
 8002cf6:	4b0a      	ldr	r3, [pc, #40]	; (8002d20 <CAN_Wrapper_TransmitData+0x50>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;    			// type of frame
 8002cfc:	4b08      	ldr	r3, [pc, #32]	; (8002d20 <CAN_Wrapper_TransmitData+0x50>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 8002d02:	4b07      	ldr	r3, [pc, #28]	; (8002d20 <CAN_Wrapper_TransmitData+0x50>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	751a      	strb	r2, [r3, #20]

	/* Start CAN transmission process */
	HAL_CAN_AddTxMessage(&hcan2, &TxHeader, data, &TxMailbox);
 8002d08:	f107 030c 	add.w	r3, r7, #12
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	4904      	ldr	r1, [pc, #16]	; (8002d20 <CAN_Wrapper_TransmitData+0x50>)
 8002d10:	4804      	ldr	r0, [pc, #16]	; (8002d24 <CAN_Wrapper_TransmitData+0x54>)
 8002d12:	f001 f8c1 	bl	8003e98 <HAL_CAN_AddTxMessage>

	return CAN_STATUS_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	20000334 	.word	0x20000334
 8002d24:	200001a0 	.word	0x200001a0

08002d28 <CAN_Wrapper_ReceiveData>:
 * @param id Received identifier
 * @param data Received data
 * @retval  None
 */
can_status_t CAN_Wrapper_ReceiveData(uint32_t *id, uint8_t *data)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
	/*
	 *  STM32 CAN receive message
	 */

	/* Get CAN received message */
    HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &RxHeader, data);
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	4a06      	ldr	r2, [pc, #24]	; (8002d50 <CAN_Wrapper_ReceiveData+0x28>)
 8002d36:	2100      	movs	r1, #0
 8002d38:	4806      	ldr	r0, [pc, #24]	; (8002d54 <CAN_Wrapper_ReceiveData+0x2c>)
 8002d3a:	f001 f988 	bl	800404e <HAL_CAN_GetRxMessage>

    /* Received standard identifier */
    *id = RxHeader.StdId;
 8002d3e:	4b04      	ldr	r3, [pc, #16]	; (8002d50 <CAN_Wrapper_ReceiveData+0x28>)
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	601a      	str	r2, [r3, #0]

	return CAN_STATUS_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	2000034c 	.word	0x2000034c
 8002d54:	200001a0 	.word	0x200001a0

08002d58 <CAN_Wrapper_DataCount>:
 * No es static, por lo que puede ser usada por otros archivos.
 *
 * @return can_status_t
 */
can_status_t CAN_Wrapper_DataCount(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
	return CAN_STATUS_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <CAN_FilterConfig>:
 *
 * @param None
 * @retval None
 */
static void CAN_FilterConfig(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
	 *
	 * 5-bit shifting for standard identifier mapping.
	 */

	/* CAN filter configuration shared among all configured filter banks */
	sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8002d6c:	4b2c      	ldr	r3, [pc, #176]	; (8002e20 <CAN_FilterConfig+0xb8>)
 8002d6e:	2201      	movs	r2, #1
 8002d70:	621a      	str	r2, [r3, #32]
	sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002d72:	4b2b      	ldr	r3, [pc, #172]	; (8002e20 <CAN_FilterConfig+0xb8>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002d78:	4b29      	ldr	r3, [pc, #164]	; (8002e20 <CAN_FilterConfig+0xb8>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002d7e:	4b28      	ldr	r3, [pc, #160]	; (8002e20 <CAN_FilterConfig+0xb8>)
 8002d80:	2201      	movs	r2, #1
 8002d82:	61da      	str	r2, [r3, #28]

	/* CAN filter configuration structure for Filter Bank 1 */
	sFilterConfig.FilterBank = 1;
 8002d84:	4b26      	ldr	r3, [pc, #152]	; (8002e20 <CAN_FilterConfig+0xb8>)
 8002d86:	2201      	movs	r2, #1
 8002d88:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterIdHigh = 0x10 << 5;
 8002d8a:	4b25      	ldr	r3, [pc, #148]	; (8002e20 <CAN_FilterConfig+0xb8>)
 8002d8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d90:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8002d92:	4b23      	ldr	r3, [pc, #140]	; (8002e20 <CAN_FilterConfig+0xb8>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = (0xFFFF << 3) << 5;
 8002d98:	4b21      	ldr	r3, [pc, #132]	; (8002e20 <CAN_FilterConfig+0xb8>)
 8002d9a:	4a22      	ldr	r2, [pc, #136]	; (8002e24 <CAN_FilterConfig+0xbc>)
 8002d9c:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8002d9e:	4b20      	ldr	r3, [pc, #128]	; (8002e20 <CAN_FilterConfig+0xb8>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	60da      	str	r2, [r3, #12]

	/* Configure CAN filter */
	if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig)!= HAL_OK)
 8002da4:	491e      	ldr	r1, [pc, #120]	; (8002e20 <CAN_FilterConfig+0xb8>)
 8002da6:	4820      	ldr	r0, [pc, #128]	; (8002e28 <CAN_FilterConfig+0xc0>)
 8002da8:	f000 ff52 	bl	8003c50 <HAL_CAN_ConfigFilter>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <CAN_FilterConfig+0x4e>
	{
		Error_Handler();
 8002db2:	f7fe ff49 	bl	8001c48 <Error_Handler>
	}

	/* CAN filter configuration structure for Filter Bank 2 */
	sFilterConfig.FilterBank = 2;
 8002db6:	4b1a      	ldr	r3, [pc, #104]	; (8002e20 <CAN_FilterConfig+0xb8>)
 8002db8:	2202      	movs	r2, #2
 8002dba:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterIdHigh = 0x20 << 5;
 8002dbc:	4b18      	ldr	r3, [pc, #96]	; (8002e20 <CAN_FilterConfig+0xb8>)
 8002dbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dc2:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8002dc4:	4b16      	ldr	r3, [pc, #88]	; (8002e20 <CAN_FilterConfig+0xb8>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = (0xFFFF << 3) << 5;
 8002dca:	4b15      	ldr	r3, [pc, #84]	; (8002e20 <CAN_FilterConfig+0xb8>)
 8002dcc:	4a15      	ldr	r2, [pc, #84]	; (8002e24 <CAN_FilterConfig+0xbc>)
 8002dce:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8002dd0:	4b13      	ldr	r3, [pc, #76]	; (8002e20 <CAN_FilterConfig+0xb8>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	60da      	str	r2, [r3, #12]

	/* Configure CAN filter */
	if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig)!= HAL_OK)
 8002dd6:	4912      	ldr	r1, [pc, #72]	; (8002e20 <CAN_FilterConfig+0xb8>)
 8002dd8:	4813      	ldr	r0, [pc, #76]	; (8002e28 <CAN_FilterConfig+0xc0>)
 8002dda:	f000 ff39 	bl	8003c50 <HAL_CAN_ConfigFilter>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <CAN_FilterConfig+0x80>
	{
		Error_Handler();
 8002de4:	f7fe ff30 	bl	8001c48 <Error_Handler>
	}

	/* CAN filter configuration structure for Filter Bank 3 */
	sFilterConfig.FilterBank = 3;
 8002de8:	4b0d      	ldr	r3, [pc, #52]	; (8002e20 <CAN_FilterConfig+0xb8>)
 8002dea:	2203      	movs	r2, #3
 8002dec:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterIdHigh = 0x40 << 5;
 8002dee:	4b0c      	ldr	r3, [pc, #48]	; (8002e20 <CAN_FilterConfig+0xb8>)
 8002df0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002df4:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8002df6:	4b0a      	ldr	r3, [pc, #40]	; (8002e20 <CAN_FilterConfig+0xb8>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0xFFFF << 5;
 8002dfc:	4b08      	ldr	r3, [pc, #32]	; (8002e20 <CAN_FilterConfig+0xb8>)
 8002dfe:	4a0b      	ldr	r2, [pc, #44]	; (8002e2c <CAN_FilterConfig+0xc4>)
 8002e00:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8002e02:	4b07      	ldr	r3, [pc, #28]	; (8002e20 <CAN_FilterConfig+0xb8>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	60da      	str	r2, [r3, #12]

	/* Configure CAN filter */
	if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig)!= HAL_OK)
 8002e08:	4905      	ldr	r1, [pc, #20]	; (8002e20 <CAN_FilterConfig+0xb8>)
 8002e0a:	4807      	ldr	r0, [pc, #28]	; (8002e28 <CAN_FilterConfig+0xc0>)
 8002e0c:	f000 ff20 	bl	8003c50 <HAL_CAN_ConfigFilter>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <CAN_FilterConfig+0xb2>
	{
		Error_Handler();
 8002e16:	f7fe ff17 	bl	8001c48 <Error_Handler>
	}
}
 8002e1a:	bf00      	nop
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	20000368 	.word	0x20000368
 8002e24:	00ffff00 	.word	0x00ffff00
 8002e28:	200001a0 	.word	0x200001a0
 8002e2c:	001fffe0 	.word	0x001fffe0

08002e30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e34:	4b06      	ldr	r3, [pc, #24]	; (8002e50 <SystemInit+0x20>)
 8002e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e3a:	4a05      	ldr	r2, [pc, #20]	; (8002e50 <SystemInit+0x20>)
 8002e3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e44:	bf00      	nop
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	e000ed00 	.word	0xe000ed00

08002e54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e58:	4b0e      	ldr	r3, [pc, #56]	; (8002e94 <HAL_Init+0x40>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a0d      	ldr	r2, [pc, #52]	; (8002e94 <HAL_Init+0x40>)
 8002e5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e64:	4b0b      	ldr	r3, [pc, #44]	; (8002e94 <HAL_Init+0x40>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a0a      	ldr	r2, [pc, #40]	; (8002e94 <HAL_Init+0x40>)
 8002e6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e70:	4b08      	ldr	r3, [pc, #32]	; (8002e94 <HAL_Init+0x40>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a07      	ldr	r2, [pc, #28]	; (8002e94 <HAL_Init+0x40>)
 8002e76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e7c:	2003      	movs	r0, #3
 8002e7e:	f001 fd13 	bl	80048a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e82:	200f      	movs	r0, #15
 8002e84:	f000 f808 	bl	8002e98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e88:	f7ff fb36 	bl	80024f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	40023c00 	.word	0x40023c00

08002e98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ea0:	4b12      	ldr	r3, [pc, #72]	; (8002eec <HAL_InitTick+0x54>)
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	4b12      	ldr	r3, [pc, #72]	; (8002ef0 <HAL_InitTick+0x58>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002eae:	fbb3 f3f1 	udiv	r3, r3, r1
 8002eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f001 fd2b 	bl	8004912 <HAL_SYSTICK_Config>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e00e      	b.n	8002ee4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2b0f      	cmp	r3, #15
 8002eca:	d80a      	bhi.n	8002ee2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ecc:	2200      	movs	r2, #0
 8002ece:	6879      	ldr	r1, [r7, #4]
 8002ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ed4:	f001 fcf3 	bl	80048be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ed8:	4a06      	ldr	r2, [pc, #24]	; (8002ef4 <HAL_InitTick+0x5c>)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	e000      	b.n	8002ee4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3708      	adds	r7, #8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	20000058 	.word	0x20000058
 8002ef0:	20000060 	.word	0x20000060
 8002ef4:	2000005c 	.word	0x2000005c

08002ef8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002efc:	4b06      	ldr	r3, [pc, #24]	; (8002f18 <HAL_IncTick+0x20>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	461a      	mov	r2, r3
 8002f02:	4b06      	ldr	r3, [pc, #24]	; (8002f1c <HAL_IncTick+0x24>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4413      	add	r3, r2
 8002f08:	4a04      	ldr	r2, [pc, #16]	; (8002f1c <HAL_IncTick+0x24>)
 8002f0a:	6013      	str	r3, [r2, #0]
}
 8002f0c:	bf00      	nop
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	20000060 	.word	0x20000060
 8002f1c:	20000390 	.word	0x20000390

08002f20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  return uwTick;
 8002f24:	4b03      	ldr	r3, [pc, #12]	; (8002f34 <HAL_GetTick+0x14>)
 8002f26:	681b      	ldr	r3, [r3, #0]
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	20000390 	.word	0x20000390

08002f38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f40:	f7ff ffee 	bl	8002f20 <HAL_GetTick>
 8002f44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f50:	d005      	beq.n	8002f5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f52:	4b0a      	ldr	r3, [pc, #40]	; (8002f7c <HAL_Delay+0x44>)
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	461a      	mov	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f5e:	bf00      	nop
 8002f60:	f7ff ffde 	bl	8002f20 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d8f7      	bhi.n	8002f60 <HAL_Delay+0x28>
  {
  }
}
 8002f70:	bf00      	nop
 8002f72:	bf00      	nop
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	20000060 	.word	0x20000060

08002f80 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e033      	b.n	8002ffe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d109      	bne.n	8002fb2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7fd ff88 	bl	8000eb4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	f003 0310 	and.w	r3, r3, #16
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d118      	bne.n	8002ff0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002fc6:	f023 0302 	bic.w	r3, r3, #2
 8002fca:	f043 0202 	orr.w	r2, r3, #2
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 fbb8 	bl	8003748 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	f023 0303 	bic.w	r3, r3, #3
 8002fe6:	f043 0201 	orr.w	r2, r3, #1
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	641a      	str	r2, [r3, #64]	; 0x40
 8002fee:	e001      	b.n	8002ff4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b084      	sub	sp, #16
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800300e:	2300      	movs	r3, #0
 8003010:	60fb      	str	r3, [r7, #12]
 8003012:	2300      	movs	r3, #0
 8003014:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0302 	and.w	r3, r3, #2
 8003020:	2b02      	cmp	r3, #2
 8003022:	bf0c      	ite	eq
 8003024:	2301      	moveq	r3, #1
 8003026:	2300      	movne	r3, #0
 8003028:	b2db      	uxtb	r3, r3
 800302a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f003 0320 	and.w	r3, r3, #32
 8003036:	2b20      	cmp	r3, #32
 8003038:	bf0c      	ite	eq
 800303a:	2301      	moveq	r3, #1
 800303c:	2300      	movne	r3, #0
 800303e:	b2db      	uxtb	r3, r3
 8003040:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d049      	beq.n	80030dc <HAL_ADC_IRQHandler+0xd6>
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d046      	beq.n	80030dc <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	f003 0310 	and.w	r3, r3, #16
 8003056:	2b00      	cmp	r3, #0
 8003058:	d105      	bne.n	8003066 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d12b      	bne.n	80030cc <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003078:	2b00      	cmp	r3, #0
 800307a:	d127      	bne.n	80030cc <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003082:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003086:	2b00      	cmp	r3, #0
 8003088:	d006      	beq.n	8003098 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003094:	2b00      	cmp	r3, #0
 8003096:	d119      	bne.n	80030cc <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f022 0220 	bic.w	r2, r2, #32
 80030a6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d105      	bne.n	80030cc <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c4:	f043 0201 	orr.w	r2, r3, #1
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f7ff f9ff 	bl	80024d0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f06f 0212 	mvn.w	r2, #18
 80030da:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0304 	and.w	r3, r3, #4
 80030e6:	2b04      	cmp	r3, #4
 80030e8:	bf0c      	ite	eq
 80030ea:	2301      	moveq	r3, #1
 80030ec:	2300      	movne	r3, #0
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030fc:	2b80      	cmp	r3, #128	; 0x80
 80030fe:	bf0c      	ite	eq
 8003100:	2301      	moveq	r3, #1
 8003102:	2300      	movne	r3, #0
 8003104:	b2db      	uxtb	r3, r3
 8003106:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d057      	beq.n	80031be <HAL_ADC_IRQHandler+0x1b8>
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d054      	beq.n	80031be <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003118:	f003 0310 	and.w	r3, r3, #16
 800311c:	2b00      	cmp	r3, #0
 800311e:	d105      	bne.n	800312c <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003124:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d139      	bne.n	80031ae <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003140:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003144:	2b00      	cmp	r3, #0
 8003146:	d006      	beq.n	8003156 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003152:	2b00      	cmp	r3, #0
 8003154:	d12b      	bne.n	80031ae <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003160:	2b00      	cmp	r3, #0
 8003162:	d124      	bne.n	80031ae <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800316e:	2b00      	cmp	r3, #0
 8003170:	d11d      	bne.n	80031ae <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003176:	2b00      	cmp	r3, #0
 8003178:	d119      	bne.n	80031ae <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	685a      	ldr	r2, [r3, #4]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003188:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d105      	bne.n	80031ae <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a6:	f043 0201 	orr.w	r2, r3, #1
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 fc48 	bl	8003a44 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f06f 020c 	mvn.w	r2, #12
 80031bc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	bf0c      	ite	eq
 80031cc:	2301      	moveq	r3, #1
 80031ce:	2300      	movne	r3, #0
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031de:	2b40      	cmp	r3, #64	; 0x40
 80031e0:	bf0c      	ite	eq
 80031e2:	2301      	moveq	r3, #1
 80031e4:	2300      	movne	r3, #0
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d017      	beq.n	8003220 <HAL_ADC_IRQHandler+0x21a>
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d014      	beq.n	8003220 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	2b01      	cmp	r3, #1
 8003202:	d10d      	bne.n	8003220 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003208:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f000 f953 	bl	80034bc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f06f 0201 	mvn.w	r2, #1
 800321e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0320 	and.w	r3, r3, #32
 800322a:	2b20      	cmp	r3, #32
 800322c:	bf0c      	ite	eq
 800322e:	2301      	moveq	r3, #1
 8003230:	2300      	movne	r3, #0
 8003232:	b2db      	uxtb	r3, r3
 8003234:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003240:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003244:	bf0c      	ite	eq
 8003246:	2301      	moveq	r3, #1
 8003248:	2300      	movne	r3, #0
 800324a:	b2db      	uxtb	r3, r3
 800324c:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d015      	beq.n	8003280 <HAL_ADC_IRQHandler+0x27a>
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d012      	beq.n	8003280 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800325e:	f043 0202 	orr.w	r2, r3, #2
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f06f 0220 	mvn.w	r2, #32
 800326e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 f92d 	bl	80034d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f06f 0220 	mvn.w	r2, #32
 800327e:	601a      	str	r2, [r3, #0]
  }
}
 8003280:	bf00      	nop
 8003282:	3710      	adds	r7, #16
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003294:	2300      	movs	r3, #0
 8003296:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d101      	bne.n	80032a6 <HAL_ADC_Start_DMA+0x1e>
 80032a2:	2302      	movs	r3, #2
 80032a4:	e0e9      	b.n	800347a <HAL_ADC_Start_DMA+0x1f2>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2201      	movs	r2, #1
 80032aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f003 0301 	and.w	r3, r3, #1
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d018      	beq.n	80032ee <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	689a      	ldr	r2, [r3, #8]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f042 0201 	orr.w	r2, r2, #1
 80032ca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80032cc:	4b6d      	ldr	r3, [pc, #436]	; (8003484 <HAL_ADC_Start_DMA+0x1fc>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a6d      	ldr	r2, [pc, #436]	; (8003488 <HAL_ADC_Start_DMA+0x200>)
 80032d2:	fba2 2303 	umull	r2, r3, r2, r3
 80032d6:	0c9a      	lsrs	r2, r3, #18
 80032d8:	4613      	mov	r3, r2
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	4413      	add	r3, r2
 80032de:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80032e0:	e002      	b.n	80032e8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	3b01      	subs	r3, #1
 80032e6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1f9      	bne.n	80032e2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032fc:	d107      	bne.n	800330e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	689a      	ldr	r2, [r3, #8]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800330c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f003 0301 	and.w	r3, r3, #1
 8003318:	2b01      	cmp	r3, #1
 800331a:	f040 80a1 	bne.w	8003460 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003326:	f023 0301 	bic.w	r3, r3, #1
 800332a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800333c:	2b00      	cmp	r3, #0
 800333e:	d007      	beq.n	8003350 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003344:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003348:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003354:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003358:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800335c:	d106      	bne.n	800336c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003362:	f023 0206 	bic.w	r2, r3, #6
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	645a      	str	r2, [r3, #68]	; 0x44
 800336a:	e002      	b.n	8003372 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800337a:	4b44      	ldr	r3, [pc, #272]	; (800348c <HAL_ADC_Start_DMA+0x204>)
 800337c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003382:	4a43      	ldr	r2, [pc, #268]	; (8003490 <HAL_ADC_Start_DMA+0x208>)
 8003384:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338a:	4a42      	ldr	r2, [pc, #264]	; (8003494 <HAL_ADC_Start_DMA+0x20c>)
 800338c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003392:	4a41      	ldr	r2, [pc, #260]	; (8003498 <HAL_ADC_Start_DMA+0x210>)
 8003394:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800339e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685a      	ldr	r2, [r3, #4]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80033ae:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	689a      	ldr	r2, [r3, #8]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033be:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	334c      	adds	r3, #76	; 0x4c
 80033ca:	4619      	mov	r1, r3
 80033cc:	68ba      	ldr	r2, [r7, #8]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f001 fb5a 	bl	8004a88 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f003 031f 	and.w	r3, r3, #31
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d12a      	bne.n	8003436 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a2d      	ldr	r2, [pc, #180]	; (800349c <HAL_ADC_Start_DMA+0x214>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d015      	beq.n	8003416 <HAL_ADC_Start_DMA+0x18e>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a2c      	ldr	r2, [pc, #176]	; (80034a0 <HAL_ADC_Start_DMA+0x218>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d105      	bne.n	8003400 <HAL_ADC_Start_DMA+0x178>
 80033f4:	4b25      	ldr	r3, [pc, #148]	; (800348c <HAL_ADC_Start_DMA+0x204>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f003 031f 	and.w	r3, r3, #31
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00a      	beq.n	8003416 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a27      	ldr	r2, [pc, #156]	; (80034a4 <HAL_ADC_Start_DMA+0x21c>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d136      	bne.n	8003478 <HAL_ADC_Start_DMA+0x1f0>
 800340a:	4b20      	ldr	r3, [pc, #128]	; (800348c <HAL_ADC_Start_DMA+0x204>)
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f003 0310 	and.w	r3, r3, #16
 8003412:	2b00      	cmp	r3, #0
 8003414:	d130      	bne.n	8003478 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d129      	bne.n	8003478 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	689a      	ldr	r2, [r3, #8]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003432:	609a      	str	r2, [r3, #8]
 8003434:	e020      	b.n	8003478 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a18      	ldr	r2, [pc, #96]	; (800349c <HAL_ADC_Start_DMA+0x214>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d11b      	bne.n	8003478 <HAL_ADC_Start_DMA+0x1f0>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d114      	bne.n	8003478 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	689a      	ldr	r2, [r3, #8]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800345c:	609a      	str	r2, [r3, #8]
 800345e:	e00b      	b.n	8003478 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003464:	f043 0210 	orr.w	r2, r3, #16
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003470:	f043 0201 	orr.w	r2, r3, #1
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3718      	adds	r7, #24
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	20000058 	.word	0x20000058
 8003488:	431bde83 	.word	0x431bde83
 800348c:	40012300 	.word	0x40012300
 8003490:	08003941 	.word	0x08003941
 8003494:	080039fb 	.word	0x080039fb
 8003498:	08003a17 	.word	0x08003a17
 800349c:	40012000 	.word	0x40012000
 80034a0:	40012100 	.word	0x40012100
 80034a4:	40012200 	.word	0x40012200

080034a8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80034ee:	2300      	movs	r3, #0
 80034f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d101      	bne.n	8003500 <HAL_ADC_ConfigChannel+0x1c>
 80034fc:	2302      	movs	r3, #2
 80034fe:	e113      	b.n	8003728 <HAL_ADC_ConfigChannel+0x244>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2b09      	cmp	r3, #9
 800350e:	d925      	bls.n	800355c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68d9      	ldr	r1, [r3, #12]
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	b29b      	uxth	r3, r3
 800351c:	461a      	mov	r2, r3
 800351e:	4613      	mov	r3, r2
 8003520:	005b      	lsls	r3, r3, #1
 8003522:	4413      	add	r3, r2
 8003524:	3b1e      	subs	r3, #30
 8003526:	2207      	movs	r2, #7
 8003528:	fa02 f303 	lsl.w	r3, r2, r3
 800352c:	43da      	mvns	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	400a      	ands	r2, r1
 8003534:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68d9      	ldr	r1, [r3, #12]
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	689a      	ldr	r2, [r3, #8]
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	b29b      	uxth	r3, r3
 8003546:	4618      	mov	r0, r3
 8003548:	4603      	mov	r3, r0
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	4403      	add	r3, r0
 800354e:	3b1e      	subs	r3, #30
 8003550:	409a      	lsls	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	430a      	orrs	r2, r1
 8003558:	60da      	str	r2, [r3, #12]
 800355a:	e022      	b.n	80035a2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6919      	ldr	r1, [r3, #16]
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	b29b      	uxth	r3, r3
 8003568:	461a      	mov	r2, r3
 800356a:	4613      	mov	r3, r2
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	4413      	add	r3, r2
 8003570:	2207      	movs	r2, #7
 8003572:	fa02 f303 	lsl.w	r3, r2, r3
 8003576:	43da      	mvns	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	400a      	ands	r2, r1
 800357e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	6919      	ldr	r1, [r3, #16]
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	689a      	ldr	r2, [r3, #8]
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	b29b      	uxth	r3, r3
 8003590:	4618      	mov	r0, r3
 8003592:	4603      	mov	r3, r0
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	4403      	add	r3, r0
 8003598:	409a      	lsls	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	430a      	orrs	r2, r1
 80035a0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	2b06      	cmp	r3, #6
 80035a8:	d824      	bhi.n	80035f4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685a      	ldr	r2, [r3, #4]
 80035b4:	4613      	mov	r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	4413      	add	r3, r2
 80035ba:	3b05      	subs	r3, #5
 80035bc:	221f      	movs	r2, #31
 80035be:	fa02 f303 	lsl.w	r3, r2, r3
 80035c2:	43da      	mvns	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	400a      	ands	r2, r1
 80035ca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	4618      	mov	r0, r3
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685a      	ldr	r2, [r3, #4]
 80035de:	4613      	mov	r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	4413      	add	r3, r2
 80035e4:	3b05      	subs	r3, #5
 80035e6:	fa00 f203 	lsl.w	r2, r0, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	430a      	orrs	r2, r1
 80035f0:	635a      	str	r2, [r3, #52]	; 0x34
 80035f2:	e04c      	b.n	800368e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	2b0c      	cmp	r3, #12
 80035fa:	d824      	bhi.n	8003646 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685a      	ldr	r2, [r3, #4]
 8003606:	4613      	mov	r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4413      	add	r3, r2
 800360c:	3b23      	subs	r3, #35	; 0x23
 800360e:	221f      	movs	r2, #31
 8003610:	fa02 f303 	lsl.w	r3, r2, r3
 8003614:	43da      	mvns	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	400a      	ands	r2, r1
 800361c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	b29b      	uxth	r3, r3
 800362a:	4618      	mov	r0, r3
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685a      	ldr	r2, [r3, #4]
 8003630:	4613      	mov	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4413      	add	r3, r2
 8003636:	3b23      	subs	r3, #35	; 0x23
 8003638:	fa00 f203 	lsl.w	r2, r0, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	430a      	orrs	r2, r1
 8003642:	631a      	str	r2, [r3, #48]	; 0x30
 8003644:	e023      	b.n	800368e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685a      	ldr	r2, [r3, #4]
 8003650:	4613      	mov	r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	4413      	add	r3, r2
 8003656:	3b41      	subs	r3, #65	; 0x41
 8003658:	221f      	movs	r2, #31
 800365a:	fa02 f303 	lsl.w	r3, r2, r3
 800365e:	43da      	mvns	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	400a      	ands	r2, r1
 8003666:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	b29b      	uxth	r3, r3
 8003674:	4618      	mov	r0, r3
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685a      	ldr	r2, [r3, #4]
 800367a:	4613      	mov	r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	4413      	add	r3, r2
 8003680:	3b41      	subs	r3, #65	; 0x41
 8003682:	fa00 f203 	lsl.w	r2, r0, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	430a      	orrs	r2, r1
 800368c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800368e:	4b29      	ldr	r3, [pc, #164]	; (8003734 <HAL_ADC_ConfigChannel+0x250>)
 8003690:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a28      	ldr	r2, [pc, #160]	; (8003738 <HAL_ADC_ConfigChannel+0x254>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d10f      	bne.n	80036bc <HAL_ADC_ConfigChannel+0x1d8>
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2b12      	cmp	r3, #18
 80036a2:	d10b      	bne.n	80036bc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a1d      	ldr	r2, [pc, #116]	; (8003738 <HAL_ADC_ConfigChannel+0x254>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d12b      	bne.n	800371e <HAL_ADC_ConfigChannel+0x23a>
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a1c      	ldr	r2, [pc, #112]	; (800373c <HAL_ADC_ConfigChannel+0x258>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d003      	beq.n	80036d8 <HAL_ADC_ConfigChannel+0x1f4>
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2b11      	cmp	r3, #17
 80036d6:	d122      	bne.n	800371e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a11      	ldr	r2, [pc, #68]	; (800373c <HAL_ADC_ConfigChannel+0x258>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d111      	bne.n	800371e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80036fa:	4b11      	ldr	r3, [pc, #68]	; (8003740 <HAL_ADC_ConfigChannel+0x25c>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a11      	ldr	r2, [pc, #68]	; (8003744 <HAL_ADC_ConfigChannel+0x260>)
 8003700:	fba2 2303 	umull	r2, r3, r2, r3
 8003704:	0c9a      	lsrs	r2, r3, #18
 8003706:	4613      	mov	r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	4413      	add	r3, r2
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003710:	e002      	b.n	8003718 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	3b01      	subs	r3, #1
 8003716:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1f9      	bne.n	8003712 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3714      	adds	r7, #20
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr
 8003734:	40012300 	.word	0x40012300
 8003738:	40012000 	.word	0x40012000
 800373c:	10000012 	.word	0x10000012
 8003740:	20000058 	.word	0x20000058
 8003744:	431bde83 	.word	0x431bde83

08003748 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003750:	4b79      	ldr	r3, [pc, #484]	; (8003938 <ADC_Init+0x1f0>)
 8003752:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	431a      	orrs	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800377c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	6859      	ldr	r1, [r3, #4]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	021a      	lsls	r2, r3, #8
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	430a      	orrs	r2, r1
 8003790:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80037a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	6859      	ldr	r1, [r3, #4]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689a      	ldr	r2, [r3, #8]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	430a      	orrs	r2, r1
 80037b2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689a      	ldr	r2, [r3, #8]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6899      	ldr	r1, [r3, #8]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68da      	ldr	r2, [r3, #12]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	430a      	orrs	r2, r1
 80037d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037da:	4a58      	ldr	r2, [pc, #352]	; (800393c <ADC_Init+0x1f4>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d022      	beq.n	8003826 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	689a      	ldr	r2, [r3, #8]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	6899      	ldr	r1, [r3, #8]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	430a      	orrs	r2, r1
 8003800:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	689a      	ldr	r2, [r3, #8]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003810:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6899      	ldr	r1, [r3, #8]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	430a      	orrs	r2, r1
 8003822:	609a      	str	r2, [r3, #8]
 8003824:	e00f      	b.n	8003846 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	689a      	ldr	r2, [r3, #8]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003834:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003844:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	689a      	ldr	r2, [r3, #8]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f022 0202 	bic.w	r2, r2, #2
 8003854:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6899      	ldr	r1, [r3, #8]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	7e1b      	ldrb	r3, [r3, #24]
 8003860:	005a      	lsls	r2, r3, #1
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	430a      	orrs	r2, r1
 8003868:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d01b      	beq.n	80038ac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685a      	ldr	r2, [r3, #4]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003882:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	685a      	ldr	r2, [r3, #4]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003892:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6859      	ldr	r1, [r3, #4]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389e:	3b01      	subs	r3, #1
 80038a0:	035a      	lsls	r2, r3, #13
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	430a      	orrs	r2, r1
 80038a8:	605a      	str	r2, [r3, #4]
 80038aa:	e007      	b.n	80038bc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	685a      	ldr	r2, [r3, #4]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80038ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	69db      	ldr	r3, [r3, #28]
 80038d6:	3b01      	subs	r3, #1
 80038d8:	051a      	lsls	r2, r3, #20
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	430a      	orrs	r2, r1
 80038e0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	689a      	ldr	r2, [r3, #8]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80038f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	6899      	ldr	r1, [r3, #8]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80038fe:	025a      	lsls	r2, r3, #9
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	430a      	orrs	r2, r1
 8003906:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	689a      	ldr	r2, [r3, #8]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003916:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	6899      	ldr	r1, [r3, #8]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	029a      	lsls	r2, r3, #10
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	430a      	orrs	r2, r1
 800392a:	609a      	str	r2, [r3, #8]
}
 800392c:	bf00      	nop
 800392e:	3714      	adds	r7, #20
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr
 8003938:	40012300 	.word	0x40012300
 800393c:	0f000001 	.word	0x0f000001

08003940 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003952:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003956:	2b00      	cmp	r3, #0
 8003958:	d13c      	bne.n	80039d4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d12b      	bne.n	80039cc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003978:	2b00      	cmp	r3, #0
 800397a:	d127      	bne.n	80039cc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003982:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003986:	2b00      	cmp	r3, #0
 8003988:	d006      	beq.n	8003998 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003994:	2b00      	cmp	r3, #0
 8003996:	d119      	bne.n	80039cc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	685a      	ldr	r2, [r3, #4]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f022 0220 	bic.w	r2, r2, #32
 80039a6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d105      	bne.n	80039cc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c4:	f043 0201 	orr.w	r2, r3, #1
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80039cc:	68f8      	ldr	r0, [r7, #12]
 80039ce:	f7fe fd7f 	bl	80024d0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80039d2:	e00e      	b.n	80039f2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d8:	f003 0310 	and.w	r3, r3, #16
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d003      	beq.n	80039e8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80039e0:	68f8      	ldr	r0, [r7, #12]
 80039e2:	f7ff fd75 	bl	80034d0 <HAL_ADC_ErrorCallback>
}
 80039e6:	e004      	b.n	80039f2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	4798      	blx	r3
}
 80039f2:	bf00      	nop
 80039f4:	3710      	adds	r7, #16
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}

080039fa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b084      	sub	sp, #16
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a06:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003a08:	68f8      	ldr	r0, [r7, #12]
 8003a0a:	f7ff fd4d 	bl	80034a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a0e:	bf00      	nop
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b084      	sub	sp, #16
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a22:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2240      	movs	r2, #64	; 0x40
 8003a28:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2e:	f043 0204 	orr.w	r2, r3, #4
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003a36:	68f8      	ldr	r0, [r7, #12]
 8003a38:	f7ff fd4a 	bl	80034d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a3c:	bf00      	nop
 8003a3e:	3710      	adds	r7, #16
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d101      	bne.n	8003a6a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e0ed      	b.n	8003c46 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d102      	bne.n	8003a7c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f7fd fc9a 	bl	80013b0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f042 0201 	orr.w	r2, r2, #1
 8003a8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a8c:	f7ff fa48 	bl	8002f20 <HAL_GetTick>
 8003a90:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003a92:	e012      	b.n	8003aba <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003a94:	f7ff fa44 	bl	8002f20 <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	2b0a      	cmp	r3, #10
 8003aa0:	d90b      	bls.n	8003aba <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2205      	movs	r2, #5
 8003ab2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e0c5      	b.n	8003c46 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f003 0301 	and.w	r3, r3, #1
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d0e5      	beq.n	8003a94 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f022 0202 	bic.w	r2, r2, #2
 8003ad6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ad8:	f7ff fa22 	bl	8002f20 <HAL_GetTick>
 8003adc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003ade:	e012      	b.n	8003b06 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003ae0:	f7ff fa1e 	bl	8002f20 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b0a      	cmp	r3, #10
 8003aec:	d90b      	bls.n	8003b06 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2205      	movs	r2, #5
 8003afe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e09f      	b.n	8003c46 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1e5      	bne.n	8003ae0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	7e1b      	ldrb	r3, [r3, #24]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d108      	bne.n	8003b2e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b2a:	601a      	str	r2, [r3, #0]
 8003b2c:	e007      	b.n	8003b3e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	7e5b      	ldrb	r3, [r3, #25]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d108      	bne.n	8003b58 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b54:	601a      	str	r2, [r3, #0]
 8003b56:	e007      	b.n	8003b68 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b66:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	7e9b      	ldrb	r3, [r3, #26]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d108      	bne.n	8003b82 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f042 0220 	orr.w	r2, r2, #32
 8003b7e:	601a      	str	r2, [r3, #0]
 8003b80:	e007      	b.n	8003b92 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 0220 	bic.w	r2, r2, #32
 8003b90:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	7edb      	ldrb	r3, [r3, #27]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d108      	bne.n	8003bac <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f022 0210 	bic.w	r2, r2, #16
 8003ba8:	601a      	str	r2, [r3, #0]
 8003baa:	e007      	b.n	8003bbc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f042 0210 	orr.w	r2, r2, #16
 8003bba:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	7f1b      	ldrb	r3, [r3, #28]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d108      	bne.n	8003bd6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f042 0208 	orr.w	r2, r2, #8
 8003bd2:	601a      	str	r2, [r3, #0]
 8003bd4:	e007      	b.n	8003be6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f022 0208 	bic.w	r2, r2, #8
 8003be4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	7f5b      	ldrb	r3, [r3, #29]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d108      	bne.n	8003c00 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f042 0204 	orr.w	r2, r2, #4
 8003bfc:	601a      	str	r2, [r3, #0]
 8003bfe:	e007      	b.n	8003c10 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f022 0204 	bic.w	r2, r2, #4
 8003c0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	689a      	ldr	r2, [r3, #8]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	431a      	orrs	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	431a      	orrs	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	695b      	ldr	r3, [r3, #20]
 8003c24:	ea42 0103 	orr.w	r1, r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	1e5a      	subs	r2, r3, #1
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	430a      	orrs	r2, r1
 8003c34:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
	...

08003c50 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b087      	sub	sp, #28
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c66:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003c68:	7cfb      	ldrb	r3, [r7, #19]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d003      	beq.n	8003c76 <HAL_CAN_ConfigFilter+0x26>
 8003c6e:	7cfb      	ldrb	r3, [r7, #19]
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	f040 80be 	bne.w	8003df2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003c76:	4b65      	ldr	r3, [pc, #404]	; (8003e0c <HAL_CAN_ConfigFilter+0x1bc>)
 8003c78:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003c80:	f043 0201 	orr.w	r2, r3, #1
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003c90:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca4:	021b      	lsls	r3, r3, #8
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	f003 031f 	and.w	r3, r3, #31
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	43db      	mvns	r3, r3
 8003cc8:	401a      	ands	r2, r3
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	69db      	ldr	r3, [r3, #28]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d123      	bne.n	8003d20 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	43db      	mvns	r3, r3
 8003ce2:	401a      	ands	r2, r3
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003cf6:	683a      	ldr	r2, [r7, #0]
 8003cf8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003cfa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	3248      	adds	r2, #72	; 0x48
 8003d00:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003d14:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003d16:	6979      	ldr	r1, [r7, #20]
 8003d18:	3348      	adds	r3, #72	; 0x48
 8003d1a:	00db      	lsls	r3, r3, #3
 8003d1c:	440b      	add	r3, r1
 8003d1e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	69db      	ldr	r3, [r3, #28]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d122      	bne.n	8003d6e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	431a      	orrs	r2, r3
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003d44:	683a      	ldr	r2, [r7, #0]
 8003d46:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003d48:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	3248      	adds	r2, #72	; 0x48
 8003d4e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003d62:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003d64:	6979      	ldr	r1, [r7, #20]
 8003d66:	3348      	adds	r3, #72	; 0x48
 8003d68:	00db      	lsls	r3, r3, #3
 8003d6a:	440b      	add	r3, r1
 8003d6c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d109      	bne.n	8003d8a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	43db      	mvns	r3, r3
 8003d80:	401a      	ands	r2, r3
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003d88:	e007      	b.n	8003d9a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	431a      	orrs	r2, r3
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d109      	bne.n	8003db6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	43db      	mvns	r3, r3
 8003dac:	401a      	ands	r2, r3
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003db4:	e007      	b.n	8003dc6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d107      	bne.n	8003dde <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	431a      	orrs	r2, r3
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003de4:	f023 0201 	bic.w	r2, r3, #1
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003dee:	2300      	movs	r3, #0
 8003df0:	e006      	b.n	8003e00 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
  }
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	371c      	adds	r7, #28
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr
 8003e0c:	40006400 	.word	0x40006400

08003e10 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d12e      	bne.n	8003e82 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2202      	movs	r2, #2
 8003e28:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 0201 	bic.w	r2, r2, #1
 8003e3a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003e3c:	f7ff f870 	bl	8002f20 <HAL_GetTick>
 8003e40:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003e42:	e012      	b.n	8003e6a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003e44:	f7ff f86c 	bl	8002f20 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b0a      	cmp	r3, #10
 8003e50:	d90b      	bls.n	8003e6a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e56:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2205      	movs	r2, #5
 8003e62:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e012      	b.n	8003e90 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f003 0301 	and.w	r3, r3, #1
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1e5      	bne.n	8003e44 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	e006      	b.n	8003e90 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e86:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
  }
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3710      	adds	r7, #16
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b089      	sub	sp, #36	; 0x24
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	607a      	str	r2, [r7, #4]
 8003ea4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003eac:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003eb6:	7ffb      	ldrb	r3, [r7, #31]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d003      	beq.n	8003ec4 <HAL_CAN_AddTxMessage+0x2c>
 8003ebc:	7ffb      	ldrb	r3, [r7, #31]
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	f040 80b8 	bne.w	8004034 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d10a      	bne.n	8003ee4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d105      	bne.n	8003ee4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	f000 80a0 	beq.w	8004024 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	0e1b      	lsrs	r3, r3, #24
 8003ee8:	f003 0303 	and.w	r3, r3, #3
 8003eec:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d907      	bls.n	8003f04 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e09e      	b.n	8004042 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003f04:	2201      	movs	r2, #1
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	409a      	lsls	r2, r3
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10d      	bne.n	8003f32 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003f20:	68f9      	ldr	r1, [r7, #12]
 8003f22:	6809      	ldr	r1, [r1, #0]
 8003f24:	431a      	orrs	r2, r3
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	3318      	adds	r3, #24
 8003f2a:	011b      	lsls	r3, r3, #4
 8003f2c:	440b      	add	r3, r1
 8003f2e:	601a      	str	r2, [r3, #0]
 8003f30:	e00f      	b.n	8003f52 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003f3c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003f42:	68f9      	ldr	r1, [r7, #12]
 8003f44:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003f46:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	3318      	adds	r3, #24
 8003f4c:	011b      	lsls	r3, r3, #4
 8003f4e:	440b      	add	r3, r1
 8003f50:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6819      	ldr	r1, [r3, #0]
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	691a      	ldr	r2, [r3, #16]
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	3318      	adds	r3, #24
 8003f5e:	011b      	lsls	r3, r3, #4
 8003f60:	440b      	add	r3, r1
 8003f62:	3304      	adds	r3, #4
 8003f64:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	7d1b      	ldrb	r3, [r3, #20]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d111      	bne.n	8003f92 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	3318      	adds	r3, #24
 8003f76:	011b      	lsls	r3, r3, #4
 8003f78:	4413      	add	r3, r2
 8003f7a:	3304      	adds	r3, #4
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	6811      	ldr	r1, [r2, #0]
 8003f82:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	3318      	adds	r3, #24
 8003f8a:	011b      	lsls	r3, r3, #4
 8003f8c:	440b      	add	r3, r1
 8003f8e:	3304      	adds	r3, #4
 8003f90:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	3307      	adds	r3, #7
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	061a      	lsls	r2, r3, #24
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	3306      	adds	r3, #6
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	041b      	lsls	r3, r3, #16
 8003fa2:	431a      	orrs	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	3305      	adds	r3, #5
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	021b      	lsls	r3, r3, #8
 8003fac:	4313      	orrs	r3, r2
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	3204      	adds	r2, #4
 8003fb2:	7812      	ldrb	r2, [r2, #0]
 8003fb4:	4610      	mov	r0, r2
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	6811      	ldr	r1, [r2, #0]
 8003fba:	ea43 0200 	orr.w	r2, r3, r0
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	011b      	lsls	r3, r3, #4
 8003fc2:	440b      	add	r3, r1
 8003fc4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003fc8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	3303      	adds	r3, #3
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	061a      	lsls	r2, r3, #24
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	3302      	adds	r3, #2
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	041b      	lsls	r3, r3, #16
 8003fda:	431a      	orrs	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	3301      	adds	r3, #1
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	021b      	lsls	r3, r3, #8
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	7812      	ldrb	r2, [r2, #0]
 8003fea:	4610      	mov	r0, r2
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	6811      	ldr	r1, [r2, #0]
 8003ff0:	ea43 0200 	orr.w	r2, r3, r0
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	011b      	lsls	r3, r3, #4
 8003ff8:	440b      	add	r3, r1
 8003ffa:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003ffe:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	3318      	adds	r3, #24
 8004008:	011b      	lsls	r3, r3, #4
 800400a:	4413      	add	r3, r2
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	6811      	ldr	r1, [r2, #0]
 8004012:	f043 0201 	orr.w	r2, r3, #1
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	3318      	adds	r3, #24
 800401a:	011b      	lsls	r3, r3, #4
 800401c:	440b      	add	r3, r1
 800401e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004020:	2300      	movs	r3, #0
 8004022:	e00e      	b.n	8004042 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004028:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e006      	b.n	8004042 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004038:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
  }
}
 8004042:	4618      	mov	r0, r3
 8004044:	3724      	adds	r7, #36	; 0x24
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr

0800404e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800404e:	b480      	push	{r7}
 8004050:	b087      	sub	sp, #28
 8004052:	af00      	add	r7, sp, #0
 8004054:	60f8      	str	r0, [r7, #12]
 8004056:	60b9      	str	r1, [r7, #8]
 8004058:	607a      	str	r2, [r7, #4]
 800405a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004062:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004064:	7dfb      	ldrb	r3, [r7, #23]
 8004066:	2b01      	cmp	r3, #1
 8004068:	d003      	beq.n	8004072 <HAL_CAN_GetRxMessage+0x24>
 800406a:	7dfb      	ldrb	r3, [r7, #23]
 800406c:	2b02      	cmp	r3, #2
 800406e:	f040 80f3 	bne.w	8004258 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d10e      	bne.n	8004096 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	f003 0303 	and.w	r3, r3, #3
 8004082:	2b00      	cmp	r3, #0
 8004084:	d116      	bne.n	80040b4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e0e7      	b.n	8004266 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	f003 0303 	and.w	r3, r3, #3
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d107      	bne.n	80040b4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e0d8      	b.n	8004266 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	331b      	adds	r3, #27
 80040bc:	011b      	lsls	r3, r3, #4
 80040be:	4413      	add	r3, r2
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0204 	and.w	r2, r3, #4
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d10c      	bne.n	80040ec <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	331b      	adds	r3, #27
 80040da:	011b      	lsls	r3, r3, #4
 80040dc:	4413      	add	r3, r2
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	0d5b      	lsrs	r3, r3, #21
 80040e2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	601a      	str	r2, [r3, #0]
 80040ea:	e00b      	b.n	8004104 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	331b      	adds	r3, #27
 80040f4:	011b      	lsls	r3, r3, #4
 80040f6:	4413      	add	r3, r2
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	08db      	lsrs	r3, r3, #3
 80040fc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	331b      	adds	r3, #27
 800410c:	011b      	lsls	r3, r3, #4
 800410e:	4413      	add	r3, r2
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0202 	and.w	r2, r3, #2
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	331b      	adds	r3, #27
 8004122:	011b      	lsls	r3, r3, #4
 8004124:	4413      	add	r3, r2
 8004126:	3304      	adds	r3, #4
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 020f 	and.w	r2, r3, #15
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	331b      	adds	r3, #27
 800413a:	011b      	lsls	r3, r3, #4
 800413c:	4413      	add	r3, r2
 800413e:	3304      	adds	r3, #4
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	0a1b      	lsrs	r3, r3, #8
 8004144:	b2da      	uxtb	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	331b      	adds	r3, #27
 8004152:	011b      	lsls	r3, r3, #4
 8004154:	4413      	add	r3, r2
 8004156:	3304      	adds	r3, #4
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	0c1b      	lsrs	r3, r3, #16
 800415c:	b29a      	uxth	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	011b      	lsls	r3, r3, #4
 800416a:	4413      	add	r3, r2
 800416c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	b2da      	uxtb	r2, r3
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	011b      	lsls	r3, r3, #4
 8004180:	4413      	add	r3, r2
 8004182:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	0a1a      	lsrs	r2, r3, #8
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	3301      	adds	r3, #1
 800418e:	b2d2      	uxtb	r2, r2
 8004190:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	011b      	lsls	r3, r3, #4
 800419a:	4413      	add	r3, r2
 800419c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	0c1a      	lsrs	r2, r3, #16
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	3302      	adds	r3, #2
 80041a8:	b2d2      	uxtb	r2, r2
 80041aa:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	011b      	lsls	r3, r3, #4
 80041b4:	4413      	add	r3, r2
 80041b6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	0e1a      	lsrs	r2, r3, #24
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	3303      	adds	r3, #3
 80041c2:	b2d2      	uxtb	r2, r2
 80041c4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	011b      	lsls	r3, r3, #4
 80041ce:	4413      	add	r3, r2
 80041d0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	3304      	adds	r3, #4
 80041da:	b2d2      	uxtb	r2, r2
 80041dc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	011b      	lsls	r3, r3, #4
 80041e6:	4413      	add	r3, r2
 80041e8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	0a1a      	lsrs	r2, r3, #8
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	3305      	adds	r3, #5
 80041f4:	b2d2      	uxtb	r2, r2
 80041f6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	011b      	lsls	r3, r3, #4
 8004200:	4413      	add	r3, r2
 8004202:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	0c1a      	lsrs	r2, r3, #16
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	3306      	adds	r3, #6
 800420e:	b2d2      	uxtb	r2, r2
 8004210:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	011b      	lsls	r3, r3, #4
 800421a:	4413      	add	r3, r2
 800421c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	0e1a      	lsrs	r2, r3, #24
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	3307      	adds	r3, #7
 8004228:	b2d2      	uxtb	r2, r2
 800422a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d108      	bne.n	8004244 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68da      	ldr	r2, [r3, #12]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f042 0220 	orr.w	r2, r2, #32
 8004240:	60da      	str	r2, [r3, #12]
 8004242:	e007      	b.n	8004254 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	691a      	ldr	r2, [r3, #16]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f042 0220 	orr.w	r2, r2, #32
 8004252:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004254:	2300      	movs	r3, #0
 8004256:	e006      	b.n	8004266 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
  }
}
 8004266:	4618      	mov	r0, r3
 8004268:	371c      	adds	r7, #28
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr

08004272 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004272:	b480      	push	{r7}
 8004274:	b085      	sub	sp, #20
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
 800427a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004282:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004284:	7bfb      	ldrb	r3, [r7, #15]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d002      	beq.n	8004290 <HAL_CAN_ActivateNotification+0x1e>
 800428a:	7bfb      	ldrb	r3, [r7, #15]
 800428c:	2b02      	cmp	r3, #2
 800428e:	d109      	bne.n	80042a4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	6959      	ldr	r1, [r3, #20]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	683a      	ldr	r2, [r7, #0]
 800429c:	430a      	orrs	r2, r1
 800429e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80042a0:	2300      	movs	r3, #0
 80042a2:	e006      	b.n	80042b2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
  }
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3714      	adds	r7, #20
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr

080042be <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80042be:	b580      	push	{r7, lr}
 80042c0:	b08a      	sub	sp, #40	; 0x28
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80042c6:	2300      	movs	r3, #0
 80042c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	695b      	ldr	r3, [r3, #20]
 80042d0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80042fa:	6a3b      	ldr	r3, [r7, #32]
 80042fc:	f003 0301 	and.w	r3, r3, #1
 8004300:	2b00      	cmp	r3, #0
 8004302:	d07c      	beq.n	80043fe <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	2b00      	cmp	r3, #0
 800430c:	d023      	beq.n	8004356 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2201      	movs	r2, #1
 8004314:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	f003 0302 	and.w	r3, r3, #2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d003      	beq.n	8004328 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f7fd f9f1 	bl	8001708 <HAL_CAN_TxMailbox0CompleteCallback>
 8004326:	e016      	b.n	8004356 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	f003 0304 	and.w	r3, r3, #4
 800432e:	2b00      	cmp	r3, #0
 8004330:	d004      	beq.n	800433c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004334:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004338:	627b      	str	r3, [r7, #36]	; 0x24
 800433a:	e00c      	b.n	8004356 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	f003 0308 	and.w	r3, r3, #8
 8004342:	2b00      	cmp	r3, #0
 8004344:	d004      	beq.n	8004350 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004348:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800434c:	627b      	str	r3, [r7, #36]	; 0x24
 800434e:	e002      	b.n	8004356 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f000 f97f 	bl	8004654 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800435c:	2b00      	cmp	r3, #0
 800435e:	d024      	beq.n	80043aa <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004368:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004370:	2b00      	cmp	r3, #0
 8004372:	d003      	beq.n	800437c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f000 f959 	bl	800462c <HAL_CAN_TxMailbox1CompleteCallback>
 800437a:	e016      	b.n	80043aa <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004382:	2b00      	cmp	r3, #0
 8004384:	d004      	beq.n	8004390 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004388:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800438c:	627b      	str	r3, [r7, #36]	; 0x24
 800438e:	e00c      	b.n	80043aa <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004396:	2b00      	cmp	r3, #0
 8004398:	d004      	beq.n	80043a4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800439a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043a0:	627b      	str	r3, [r7, #36]	; 0x24
 80043a2:	e002      	b.n	80043aa <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 f95f 	bl	8004668 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d024      	beq.n	80043fe <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80043bc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d003      	beq.n	80043d0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f000 f939 	bl	8004640 <HAL_CAN_TxMailbox2CompleteCallback>
 80043ce:	e016      	b.n	80043fe <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d004      	beq.n	80043e4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80043da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043e0:	627b      	str	r3, [r7, #36]	; 0x24
 80043e2:	e00c      	b.n	80043fe <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d004      	beq.n	80043f8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80043ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043f4:	627b      	str	r3, [r7, #36]	; 0x24
 80043f6:	e002      	b.n	80043fe <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 f93f 	bl	800467c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80043fe:	6a3b      	ldr	r3, [r7, #32]
 8004400:	f003 0308 	and.w	r3, r3, #8
 8004404:	2b00      	cmp	r3, #0
 8004406:	d00c      	beq.n	8004422 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	f003 0310 	and.w	r3, r3, #16
 800440e:	2b00      	cmp	r3, #0
 8004410:	d007      	beq.n	8004422 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004414:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004418:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2210      	movs	r2, #16
 8004420:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004422:	6a3b      	ldr	r3, [r7, #32]
 8004424:	f003 0304 	and.w	r3, r3, #4
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00b      	beq.n	8004444 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	f003 0308 	and.w	r3, r3, #8
 8004432:	2b00      	cmp	r3, #0
 8004434:	d006      	beq.n	8004444 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2208      	movs	r2, #8
 800443c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 f926 	bl	8004690 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004444:	6a3b      	ldr	r3, [r7, #32]
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b00      	cmp	r3, #0
 800444c:	d009      	beq.n	8004462 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	f003 0303 	and.w	r3, r3, #3
 8004458:	2b00      	cmp	r3, #0
 800445a:	d002      	beq.n	8004462 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f7fd f93b 	bl	80016d8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004462:	6a3b      	ldr	r3, [r7, #32]
 8004464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004468:	2b00      	cmp	r3, #0
 800446a:	d00c      	beq.n	8004486 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	f003 0310 	and.w	r3, r3, #16
 8004472:	2b00      	cmp	r3, #0
 8004474:	d007      	beq.n	8004486 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004478:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800447c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2210      	movs	r2, #16
 8004484:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004486:	6a3b      	ldr	r3, [r7, #32]
 8004488:	f003 0320 	and.w	r3, r3, #32
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00b      	beq.n	80044a8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	f003 0308 	and.w	r3, r3, #8
 8004496:	2b00      	cmp	r3, #0
 8004498:	d006      	beq.n	80044a8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2208      	movs	r2, #8
 80044a0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 f908 	bl	80046b8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80044a8:	6a3b      	ldr	r3, [r7, #32]
 80044aa:	f003 0310 	and.w	r3, r3, #16
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d009      	beq.n	80044c6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	f003 0303 	and.w	r3, r3, #3
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d002      	beq.n	80044c6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 f8ef 	bl	80046a4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80044c6:	6a3b      	ldr	r3, [r7, #32]
 80044c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d00b      	beq.n	80044e8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	f003 0310 	and.w	r3, r3, #16
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d006      	beq.n	80044e8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2210      	movs	r2, #16
 80044e0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 f8f2 	bl	80046cc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80044e8:	6a3b      	ldr	r3, [r7, #32]
 80044ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00b      	beq.n	800450a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	f003 0308 	and.w	r3, r3, #8
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d006      	beq.n	800450a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2208      	movs	r2, #8
 8004502:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 f8eb 	bl	80046e0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800450a:	6a3b      	ldr	r3, [r7, #32]
 800450c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d07b      	beq.n	800460c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	f003 0304 	and.w	r3, r3, #4
 800451a:	2b00      	cmp	r3, #0
 800451c:	d072      	beq.n	8004604 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800451e:	6a3b      	ldr	r3, [r7, #32]
 8004520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004524:	2b00      	cmp	r3, #0
 8004526:	d008      	beq.n	800453a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800452e:	2b00      	cmp	r3, #0
 8004530:	d003      	beq.n	800453a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004534:	f043 0301 	orr.w	r3, r3, #1
 8004538:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800453a:	6a3b      	ldr	r3, [r7, #32]
 800453c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004540:	2b00      	cmp	r3, #0
 8004542:	d008      	beq.n	8004556 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800454a:	2b00      	cmp	r3, #0
 800454c:	d003      	beq.n	8004556 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800454e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004550:	f043 0302 	orr.w	r3, r3, #2
 8004554:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004556:	6a3b      	ldr	r3, [r7, #32]
 8004558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800455c:	2b00      	cmp	r3, #0
 800455e:	d008      	beq.n	8004572 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004566:	2b00      	cmp	r3, #0
 8004568:	d003      	beq.n	8004572 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800456a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456c:	f043 0304 	orr.w	r3, r3, #4
 8004570:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004572:	6a3b      	ldr	r3, [r7, #32]
 8004574:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004578:	2b00      	cmp	r3, #0
 800457a:	d043      	beq.n	8004604 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004582:	2b00      	cmp	r3, #0
 8004584:	d03e      	beq.n	8004604 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800458c:	2b60      	cmp	r3, #96	; 0x60
 800458e:	d02b      	beq.n	80045e8 <HAL_CAN_IRQHandler+0x32a>
 8004590:	2b60      	cmp	r3, #96	; 0x60
 8004592:	d82e      	bhi.n	80045f2 <HAL_CAN_IRQHandler+0x334>
 8004594:	2b50      	cmp	r3, #80	; 0x50
 8004596:	d022      	beq.n	80045de <HAL_CAN_IRQHandler+0x320>
 8004598:	2b50      	cmp	r3, #80	; 0x50
 800459a:	d82a      	bhi.n	80045f2 <HAL_CAN_IRQHandler+0x334>
 800459c:	2b40      	cmp	r3, #64	; 0x40
 800459e:	d019      	beq.n	80045d4 <HAL_CAN_IRQHandler+0x316>
 80045a0:	2b40      	cmp	r3, #64	; 0x40
 80045a2:	d826      	bhi.n	80045f2 <HAL_CAN_IRQHandler+0x334>
 80045a4:	2b30      	cmp	r3, #48	; 0x30
 80045a6:	d010      	beq.n	80045ca <HAL_CAN_IRQHandler+0x30c>
 80045a8:	2b30      	cmp	r3, #48	; 0x30
 80045aa:	d822      	bhi.n	80045f2 <HAL_CAN_IRQHandler+0x334>
 80045ac:	2b10      	cmp	r3, #16
 80045ae:	d002      	beq.n	80045b6 <HAL_CAN_IRQHandler+0x2f8>
 80045b0:	2b20      	cmp	r3, #32
 80045b2:	d005      	beq.n	80045c0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80045b4:	e01d      	b.n	80045f2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80045b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b8:	f043 0308 	orr.w	r3, r3, #8
 80045bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80045be:	e019      	b.n	80045f4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80045c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c2:	f043 0310 	orr.w	r3, r3, #16
 80045c6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80045c8:	e014      	b.n	80045f4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80045ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045cc:	f043 0320 	orr.w	r3, r3, #32
 80045d0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80045d2:	e00f      	b.n	80045f4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80045d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045da:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80045dc:	e00a      	b.n	80045f4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80045de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045e4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80045e6:	e005      	b.n	80045f4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80045e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045ee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80045f0:	e000      	b.n	80045f4 <HAL_CAN_IRQHandler+0x336>
            break;
 80045f2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	699a      	ldr	r2, [r3, #24]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004602:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2204      	movs	r2, #4
 800460a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800460c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460e:	2b00      	cmp	r3, #0
 8004610:	d008      	beq.n	8004624 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004618:	431a      	orrs	r2, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 f868 	bl	80046f4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004624:	bf00      	nop
 8004626:	3728      	adds	r7, #40	; 0x28
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004648:	bf00      	nop
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800465c:	bf00      	nop
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004670:	bf00      	nop
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004684:	bf00      	nop
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004698:	bf00      	nop
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80046c0:	bf00      	nop
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80046d4:	bf00      	nop
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80046e8:	bf00      	nop
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004708:	b480      	push	{r7}
 800470a:	b085      	sub	sp, #20
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f003 0307 	and.w	r3, r3, #7
 8004716:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004718:	4b0c      	ldr	r3, [pc, #48]	; (800474c <__NVIC_SetPriorityGrouping+0x44>)
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800471e:	68ba      	ldr	r2, [r7, #8]
 8004720:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004724:	4013      	ands	r3, r2
 8004726:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004730:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004734:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004738:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800473a:	4a04      	ldr	r2, [pc, #16]	; (800474c <__NVIC_SetPriorityGrouping+0x44>)
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	60d3      	str	r3, [r2, #12]
}
 8004740:	bf00      	nop
 8004742:	3714      	adds	r7, #20
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr
 800474c:	e000ed00 	.word	0xe000ed00

08004750 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004750:	b480      	push	{r7}
 8004752:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004754:	4b04      	ldr	r3, [pc, #16]	; (8004768 <__NVIC_GetPriorityGrouping+0x18>)
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	0a1b      	lsrs	r3, r3, #8
 800475a:	f003 0307 	and.w	r3, r3, #7
}
 800475e:	4618      	mov	r0, r3
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr
 8004768:	e000ed00 	.word	0xe000ed00

0800476c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	4603      	mov	r3, r0
 8004774:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800477a:	2b00      	cmp	r3, #0
 800477c:	db0b      	blt.n	8004796 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800477e:	79fb      	ldrb	r3, [r7, #7]
 8004780:	f003 021f 	and.w	r2, r3, #31
 8004784:	4907      	ldr	r1, [pc, #28]	; (80047a4 <__NVIC_EnableIRQ+0x38>)
 8004786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800478a:	095b      	lsrs	r3, r3, #5
 800478c:	2001      	movs	r0, #1
 800478e:	fa00 f202 	lsl.w	r2, r0, r2
 8004792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004796:	bf00      	nop
 8004798:	370c      	adds	r7, #12
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	e000e100 	.word	0xe000e100

080047a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	4603      	mov	r3, r0
 80047b0:	6039      	str	r1, [r7, #0]
 80047b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	db0a      	blt.n	80047d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	b2da      	uxtb	r2, r3
 80047c0:	490c      	ldr	r1, [pc, #48]	; (80047f4 <__NVIC_SetPriority+0x4c>)
 80047c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047c6:	0112      	lsls	r2, r2, #4
 80047c8:	b2d2      	uxtb	r2, r2
 80047ca:	440b      	add	r3, r1
 80047cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80047d0:	e00a      	b.n	80047e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	b2da      	uxtb	r2, r3
 80047d6:	4908      	ldr	r1, [pc, #32]	; (80047f8 <__NVIC_SetPriority+0x50>)
 80047d8:	79fb      	ldrb	r3, [r7, #7]
 80047da:	f003 030f 	and.w	r3, r3, #15
 80047de:	3b04      	subs	r3, #4
 80047e0:	0112      	lsls	r2, r2, #4
 80047e2:	b2d2      	uxtb	r2, r2
 80047e4:	440b      	add	r3, r1
 80047e6:	761a      	strb	r2, [r3, #24]
}
 80047e8:	bf00      	nop
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr
 80047f4:	e000e100 	.word	0xe000e100
 80047f8:	e000ed00 	.word	0xe000ed00

080047fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b089      	sub	sp, #36	; 0x24
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f003 0307 	and.w	r3, r3, #7
 800480e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	f1c3 0307 	rsb	r3, r3, #7
 8004816:	2b04      	cmp	r3, #4
 8004818:	bf28      	it	cs
 800481a:	2304      	movcs	r3, #4
 800481c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	3304      	adds	r3, #4
 8004822:	2b06      	cmp	r3, #6
 8004824:	d902      	bls.n	800482c <NVIC_EncodePriority+0x30>
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	3b03      	subs	r3, #3
 800482a:	e000      	b.n	800482e <NVIC_EncodePriority+0x32>
 800482c:	2300      	movs	r3, #0
 800482e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004830:	f04f 32ff 	mov.w	r2, #4294967295
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	fa02 f303 	lsl.w	r3, r2, r3
 800483a:	43da      	mvns	r2, r3
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	401a      	ands	r2, r3
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004844:	f04f 31ff 	mov.w	r1, #4294967295
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	fa01 f303 	lsl.w	r3, r1, r3
 800484e:	43d9      	mvns	r1, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004854:	4313      	orrs	r3, r2
         );
}
 8004856:	4618      	mov	r0, r3
 8004858:	3724      	adds	r7, #36	; 0x24
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr
	...

08004864 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	3b01      	subs	r3, #1
 8004870:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004874:	d301      	bcc.n	800487a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004876:	2301      	movs	r3, #1
 8004878:	e00f      	b.n	800489a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800487a:	4a0a      	ldr	r2, [pc, #40]	; (80048a4 <SysTick_Config+0x40>)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	3b01      	subs	r3, #1
 8004880:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004882:	210f      	movs	r1, #15
 8004884:	f04f 30ff 	mov.w	r0, #4294967295
 8004888:	f7ff ff8e 	bl	80047a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800488c:	4b05      	ldr	r3, [pc, #20]	; (80048a4 <SysTick_Config+0x40>)
 800488e:	2200      	movs	r2, #0
 8004890:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004892:	4b04      	ldr	r3, [pc, #16]	; (80048a4 <SysTick_Config+0x40>)
 8004894:	2207      	movs	r2, #7
 8004896:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3708      	adds	r7, #8
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	e000e010 	.word	0xe000e010

080048a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f7ff ff29 	bl	8004708 <__NVIC_SetPriorityGrouping>
}
 80048b6:	bf00      	nop
 80048b8:	3708      	adds	r7, #8
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}

080048be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80048be:	b580      	push	{r7, lr}
 80048c0:	b086      	sub	sp, #24
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	4603      	mov	r3, r0
 80048c6:	60b9      	str	r1, [r7, #8]
 80048c8:	607a      	str	r2, [r7, #4]
 80048ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80048cc:	2300      	movs	r3, #0
 80048ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80048d0:	f7ff ff3e 	bl	8004750 <__NVIC_GetPriorityGrouping>
 80048d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	68b9      	ldr	r1, [r7, #8]
 80048da:	6978      	ldr	r0, [r7, #20]
 80048dc:	f7ff ff8e 	bl	80047fc <NVIC_EncodePriority>
 80048e0:	4602      	mov	r2, r0
 80048e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048e6:	4611      	mov	r1, r2
 80048e8:	4618      	mov	r0, r3
 80048ea:	f7ff ff5d 	bl	80047a8 <__NVIC_SetPriority>
}
 80048ee:	bf00      	nop
 80048f0:	3718      	adds	r7, #24
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}

080048f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048f6:	b580      	push	{r7, lr}
 80048f8:	b082      	sub	sp, #8
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	4603      	mov	r3, r0
 80048fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004904:	4618      	mov	r0, r3
 8004906:	f7ff ff31 	bl	800476c <__NVIC_EnableIRQ>
}
 800490a:	bf00      	nop
 800490c:	3708      	adds	r7, #8
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004912:	b580      	push	{r7, lr}
 8004914:	b082      	sub	sp, #8
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f7ff ffa2 	bl	8004864 <SysTick_Config>
 8004920:	4603      	mov	r3, r0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3708      	adds	r7, #8
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
	...

0800492c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b086      	sub	sp, #24
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004934:	2300      	movs	r3, #0
 8004936:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004938:	f7fe faf2 	bl	8002f20 <HAL_GetTick>
 800493c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d101      	bne.n	8004948 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e099      	b.n	8004a7c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2202      	movs	r2, #2
 800494c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f022 0201 	bic.w	r2, r2, #1
 8004966:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004968:	e00f      	b.n	800498a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800496a:	f7fe fad9 	bl	8002f20 <HAL_GetTick>
 800496e:	4602      	mov	r2, r0
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	2b05      	cmp	r3, #5
 8004976:	d908      	bls.n	800498a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2220      	movs	r2, #32
 800497c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2203      	movs	r2, #3
 8004982:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e078      	b.n	8004a7c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0301 	and.w	r3, r3, #1
 8004994:	2b00      	cmp	r3, #0
 8004996:	d1e8      	bne.n	800496a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80049a0:	697a      	ldr	r2, [r7, #20]
 80049a2:	4b38      	ldr	r3, [pc, #224]	; (8004a84 <HAL_DMA_Init+0x158>)
 80049a4:	4013      	ands	r3, r2
 80049a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685a      	ldr	r2, [r3, #4]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80049b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	691b      	ldr	r3, [r3, #16]
 80049bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a1b      	ldr	r3, [r3, #32]
 80049d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80049d6:	697a      	ldr	r2, [r7, #20]
 80049d8:	4313      	orrs	r3, r2
 80049da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e0:	2b04      	cmp	r3, #4
 80049e2:	d107      	bne.n	80049f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ec:	4313      	orrs	r3, r2
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	697a      	ldr	r2, [r7, #20]
 80049fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	695b      	ldr	r3, [r3, #20]
 8004a02:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	f023 0307 	bic.w	r3, r3, #7
 8004a0a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a10:	697a      	ldr	r2, [r7, #20]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1a:	2b04      	cmp	r3, #4
 8004a1c:	d117      	bne.n	8004a4e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a22:	697a      	ldr	r2, [r7, #20]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00e      	beq.n	8004a4e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f000 fa6f 	bl	8004f14 <DMA_CheckFifoParam>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d008      	beq.n	8004a4e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2240      	movs	r2, #64	; 0x40
 8004a40:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e016      	b.n	8004a7c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	697a      	ldr	r2, [r7, #20]
 8004a54:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 fa26 	bl	8004ea8 <DMA_CalcBaseAndBitshift>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a64:	223f      	movs	r2, #63	; 0x3f
 8004a66:	409a      	lsls	r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2201      	movs	r2, #1
 8004a76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3718      	adds	r7, #24
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	f010803f 	.word	0xf010803f

08004a88 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b086      	sub	sp, #24
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	607a      	str	r2, [r7, #4]
 8004a94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a96:	2300      	movs	r3, #0
 8004a98:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a9e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d101      	bne.n	8004aae <HAL_DMA_Start_IT+0x26>
 8004aaa:	2302      	movs	r3, #2
 8004aac:	e040      	b.n	8004b30 <HAL_DMA_Start_IT+0xa8>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d12f      	bne.n	8004b22 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2202      	movs	r2, #2
 8004ac6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2200      	movs	r2, #0
 8004ace:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	68b9      	ldr	r1, [r7, #8]
 8004ad6:	68f8      	ldr	r0, [r7, #12]
 8004ad8:	f000 f9b8 	bl	8004e4c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ae0:	223f      	movs	r2, #63	; 0x3f
 8004ae2:	409a      	lsls	r2, r3
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f042 0216 	orr.w	r2, r2, #22
 8004af6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d007      	beq.n	8004b10 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f042 0208 	orr.w	r2, r2, #8
 8004b0e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f042 0201 	orr.w	r2, r2, #1
 8004b1e:	601a      	str	r2, [r3, #0]
 8004b20:	e005      	b.n	8004b2e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004b2a:	2302      	movs	r3, #2
 8004b2c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004b2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3718      	adds	r7, #24
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b086      	sub	sp, #24
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004b40:	2300      	movs	r3, #0
 8004b42:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004b44:	4b8e      	ldr	r3, [pc, #568]	; (8004d80 <HAL_DMA_IRQHandler+0x248>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a8e      	ldr	r2, [pc, #568]	; (8004d84 <HAL_DMA_IRQHandler+0x24c>)
 8004b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b4e:	0a9b      	lsrs	r3, r3, #10
 8004b50:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b56:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b62:	2208      	movs	r2, #8
 8004b64:	409a      	lsls	r2, r3
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	4013      	ands	r3, r2
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d01a      	beq.n	8004ba4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0304 	and.w	r3, r3, #4
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d013      	beq.n	8004ba4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f022 0204 	bic.w	r2, r2, #4
 8004b8a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b90:	2208      	movs	r2, #8
 8004b92:	409a      	lsls	r2, r3
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b9c:	f043 0201 	orr.w	r2, r3, #1
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ba8:	2201      	movs	r2, #1
 8004baa:	409a      	lsls	r2, r3
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	4013      	ands	r3, r2
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d012      	beq.n	8004bda <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	695b      	ldr	r3, [r3, #20]
 8004bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00b      	beq.n	8004bda <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	409a      	lsls	r2, r3
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bd2:	f043 0202 	orr.w	r2, r3, #2
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bde:	2204      	movs	r2, #4
 8004be0:	409a      	lsls	r2, r3
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	4013      	ands	r3, r2
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d012      	beq.n	8004c10 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0302 	and.w	r3, r3, #2
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d00b      	beq.n	8004c10 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bfc:	2204      	movs	r2, #4
 8004bfe:	409a      	lsls	r2, r3
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c08:	f043 0204 	orr.w	r2, r3, #4
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c14:	2210      	movs	r2, #16
 8004c16:	409a      	lsls	r2, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d043      	beq.n	8004ca8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0308 	and.w	r3, r3, #8
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d03c      	beq.n	8004ca8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c32:	2210      	movs	r2, #16
 8004c34:	409a      	lsls	r2, r3
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d018      	beq.n	8004c7a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d108      	bne.n	8004c68 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d024      	beq.n	8004ca8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	4798      	blx	r3
 8004c66:	e01f      	b.n	8004ca8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d01b      	beq.n	8004ca8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	4798      	blx	r3
 8004c78:	e016      	b.n	8004ca8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d107      	bne.n	8004c98 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f022 0208 	bic.w	r2, r2, #8
 8004c96:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d003      	beq.n	8004ca8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cac:	2220      	movs	r2, #32
 8004cae:	409a      	lsls	r2, r3
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	f000 808f 	beq.w	8004dd8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0310 	and.w	r3, r3, #16
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	f000 8087 	beq.w	8004dd8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cce:	2220      	movs	r2, #32
 8004cd0:	409a      	lsls	r2, r3
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	2b05      	cmp	r3, #5
 8004ce0:	d136      	bne.n	8004d50 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f022 0216 	bic.w	r2, r2, #22
 8004cf0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	695a      	ldr	r2, [r3, #20]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d00:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d103      	bne.n	8004d12 <HAL_DMA_IRQHandler+0x1da>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d007      	beq.n	8004d22 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f022 0208 	bic.w	r2, r2, #8
 8004d20:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d26:	223f      	movs	r2, #63	; 0x3f
 8004d28:	409a      	lsls	r2, r3
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d07e      	beq.n	8004e44 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	4798      	blx	r3
        }
        return;
 8004d4e:	e079      	b.n	8004e44 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d01d      	beq.n	8004d9a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d10d      	bne.n	8004d88 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d031      	beq.n	8004dd8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	4798      	blx	r3
 8004d7c:	e02c      	b.n	8004dd8 <HAL_DMA_IRQHandler+0x2a0>
 8004d7e:	bf00      	nop
 8004d80:	20000058 	.word	0x20000058
 8004d84:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d023      	beq.n	8004dd8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	4798      	blx	r3
 8004d98:	e01e      	b.n	8004dd8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d10f      	bne.n	8004dc8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f022 0210 	bic.w	r2, r2, #16
 8004db6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d003      	beq.n	8004dd8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d032      	beq.n	8004e46 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de4:	f003 0301 	and.w	r3, r3, #1
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d022      	beq.n	8004e32 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2205      	movs	r2, #5
 8004df0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f022 0201 	bic.w	r2, r2, #1
 8004e02:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	3301      	adds	r3, #1
 8004e08:	60bb      	str	r3, [r7, #8]
 8004e0a:	697a      	ldr	r2, [r7, #20]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d307      	bcc.n	8004e20 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d1f2      	bne.n	8004e04 <HAL_DMA_IRQHandler+0x2cc>
 8004e1e:	e000      	b.n	8004e22 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004e20:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2201      	movs	r2, #1
 8004e26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d005      	beq.n	8004e46 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	4798      	blx	r3
 8004e42:	e000      	b.n	8004e46 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004e44:	bf00      	nop
    }
  }
}
 8004e46:	3718      	adds	r7, #24
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b085      	sub	sp, #20
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
 8004e58:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004e68:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	683a      	ldr	r2, [r7, #0]
 8004e70:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	2b40      	cmp	r3, #64	; 0x40
 8004e78:	d108      	bne.n	8004e8c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68ba      	ldr	r2, [r7, #8]
 8004e88:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004e8a:	e007      	b.n	8004e9c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68ba      	ldr	r2, [r7, #8]
 8004e92:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	60da      	str	r2, [r3, #12]
}
 8004e9c:	bf00      	nop
 8004e9e:	3714      	adds	r7, #20
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b085      	sub	sp, #20
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	3b10      	subs	r3, #16
 8004eb8:	4a14      	ldr	r2, [pc, #80]	; (8004f0c <DMA_CalcBaseAndBitshift+0x64>)
 8004eba:	fba2 2303 	umull	r2, r3, r2, r3
 8004ebe:	091b      	lsrs	r3, r3, #4
 8004ec0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004ec2:	4a13      	ldr	r2, [pc, #76]	; (8004f10 <DMA_CalcBaseAndBitshift+0x68>)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	461a      	mov	r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2b03      	cmp	r3, #3
 8004ed4:	d909      	bls.n	8004eea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004ede:	f023 0303 	bic.w	r3, r3, #3
 8004ee2:	1d1a      	adds	r2, r3, #4
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	659a      	str	r2, [r3, #88]	; 0x58
 8004ee8:	e007      	b.n	8004efa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004ef2:	f023 0303 	bic.w	r3, r3, #3
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3714      	adds	r7, #20
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	aaaaaaab 	.word	0xaaaaaaab
 8004f10:	0800840c 	.word	0x0800840c

08004f14 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b085      	sub	sp, #20
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f24:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	699b      	ldr	r3, [r3, #24]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d11f      	bne.n	8004f6e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	2b03      	cmp	r3, #3
 8004f32:	d856      	bhi.n	8004fe2 <DMA_CheckFifoParam+0xce>
 8004f34:	a201      	add	r2, pc, #4	; (adr r2, 8004f3c <DMA_CheckFifoParam+0x28>)
 8004f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f3a:	bf00      	nop
 8004f3c:	08004f4d 	.word	0x08004f4d
 8004f40:	08004f5f 	.word	0x08004f5f
 8004f44:	08004f4d 	.word	0x08004f4d
 8004f48:	08004fe3 	.word	0x08004fe3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d046      	beq.n	8004fe6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f5c:	e043      	b.n	8004fe6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f62:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f66:	d140      	bne.n	8004fea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f6c:	e03d      	b.n	8004fea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f76:	d121      	bne.n	8004fbc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	2b03      	cmp	r3, #3
 8004f7c:	d837      	bhi.n	8004fee <DMA_CheckFifoParam+0xda>
 8004f7e:	a201      	add	r2, pc, #4	; (adr r2, 8004f84 <DMA_CheckFifoParam+0x70>)
 8004f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f84:	08004f95 	.word	0x08004f95
 8004f88:	08004f9b 	.word	0x08004f9b
 8004f8c:	08004f95 	.word	0x08004f95
 8004f90:	08004fad 	.word	0x08004fad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	73fb      	strb	r3, [r7, #15]
      break;
 8004f98:	e030      	b.n	8004ffc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d025      	beq.n	8004ff2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004faa:	e022      	b.n	8004ff2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004fb4:	d11f      	bne.n	8004ff6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004fba:	e01c      	b.n	8004ff6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d903      	bls.n	8004fca <DMA_CheckFifoParam+0xb6>
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	2b03      	cmp	r3, #3
 8004fc6:	d003      	beq.n	8004fd0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004fc8:	e018      	b.n	8004ffc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	73fb      	strb	r3, [r7, #15]
      break;
 8004fce:	e015      	b.n	8004ffc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00e      	beq.n	8004ffa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	73fb      	strb	r3, [r7, #15]
      break;
 8004fe0:	e00b      	b.n	8004ffa <DMA_CheckFifoParam+0xe6>
      break;
 8004fe2:	bf00      	nop
 8004fe4:	e00a      	b.n	8004ffc <DMA_CheckFifoParam+0xe8>
      break;
 8004fe6:	bf00      	nop
 8004fe8:	e008      	b.n	8004ffc <DMA_CheckFifoParam+0xe8>
      break;
 8004fea:	bf00      	nop
 8004fec:	e006      	b.n	8004ffc <DMA_CheckFifoParam+0xe8>
      break;
 8004fee:	bf00      	nop
 8004ff0:	e004      	b.n	8004ffc <DMA_CheckFifoParam+0xe8>
      break;
 8004ff2:	bf00      	nop
 8004ff4:	e002      	b.n	8004ffc <DMA_CheckFifoParam+0xe8>
      break;   
 8004ff6:	bf00      	nop
 8004ff8:	e000      	b.n	8004ffc <DMA_CheckFifoParam+0xe8>
      break;
 8004ffa:	bf00      	nop
    }
  } 
  
  return status; 
 8004ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3714      	adds	r7, #20
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop

0800500c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800500c:	b480      	push	{r7}
 800500e:	b089      	sub	sp, #36	; 0x24
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005016:	2300      	movs	r3, #0
 8005018:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800501a:	2300      	movs	r3, #0
 800501c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800501e:	2300      	movs	r3, #0
 8005020:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005022:	2300      	movs	r3, #0
 8005024:	61fb      	str	r3, [r7, #28]
 8005026:	e165      	b.n	80052f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005028:	2201      	movs	r2, #1
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	fa02 f303 	lsl.w	r3, r2, r3
 8005030:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	4013      	ands	r3, r2
 800503a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800503c:	693a      	ldr	r2, [r7, #16]
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	429a      	cmp	r2, r3
 8005042:	f040 8154 	bne.w	80052ee <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	f003 0303 	and.w	r3, r3, #3
 800504e:	2b01      	cmp	r3, #1
 8005050:	d005      	beq.n	800505e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800505a:	2b02      	cmp	r3, #2
 800505c:	d130      	bne.n	80050c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	005b      	lsls	r3, r3, #1
 8005068:	2203      	movs	r2, #3
 800506a:	fa02 f303 	lsl.w	r3, r2, r3
 800506e:	43db      	mvns	r3, r3
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	4013      	ands	r3, r2
 8005074:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	68da      	ldr	r2, [r3, #12]
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	005b      	lsls	r3, r3, #1
 800507e:	fa02 f303 	lsl.w	r3, r2, r3
 8005082:	69ba      	ldr	r2, [r7, #24]
 8005084:	4313      	orrs	r3, r2
 8005086:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	69ba      	ldr	r2, [r7, #24]
 800508c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005094:	2201      	movs	r2, #1
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	fa02 f303 	lsl.w	r3, r2, r3
 800509c:	43db      	mvns	r3, r3
 800509e:	69ba      	ldr	r2, [r7, #24]
 80050a0:	4013      	ands	r3, r2
 80050a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	091b      	lsrs	r3, r3, #4
 80050aa:	f003 0201 	and.w	r2, r3, #1
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	fa02 f303 	lsl.w	r3, r2, r3
 80050b4:	69ba      	ldr	r2, [r7, #24]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	69ba      	ldr	r2, [r7, #24]
 80050be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	f003 0303 	and.w	r3, r3, #3
 80050c8:	2b03      	cmp	r3, #3
 80050ca:	d017      	beq.n	80050fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	005b      	lsls	r3, r3, #1
 80050d6:	2203      	movs	r2, #3
 80050d8:	fa02 f303 	lsl.w	r3, r2, r3
 80050dc:	43db      	mvns	r3, r3
 80050de:	69ba      	ldr	r2, [r7, #24]
 80050e0:	4013      	ands	r3, r2
 80050e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	689a      	ldr	r2, [r3, #8]
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	005b      	lsls	r3, r3, #1
 80050ec:	fa02 f303 	lsl.w	r3, r2, r3
 80050f0:	69ba      	ldr	r2, [r7, #24]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	69ba      	ldr	r2, [r7, #24]
 80050fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	f003 0303 	and.w	r3, r3, #3
 8005104:	2b02      	cmp	r3, #2
 8005106:	d123      	bne.n	8005150 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	08da      	lsrs	r2, r3, #3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	3208      	adds	r2, #8
 8005110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005114:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	f003 0307 	and.w	r3, r3, #7
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	220f      	movs	r2, #15
 8005120:	fa02 f303 	lsl.w	r3, r2, r3
 8005124:	43db      	mvns	r3, r3
 8005126:	69ba      	ldr	r2, [r7, #24]
 8005128:	4013      	ands	r3, r2
 800512a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	691a      	ldr	r2, [r3, #16]
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	f003 0307 	and.w	r3, r3, #7
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	fa02 f303 	lsl.w	r3, r2, r3
 800513c:	69ba      	ldr	r2, [r7, #24]
 800513e:	4313      	orrs	r3, r2
 8005140:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	08da      	lsrs	r2, r3, #3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	3208      	adds	r2, #8
 800514a:	69b9      	ldr	r1, [r7, #24]
 800514c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	005b      	lsls	r3, r3, #1
 800515a:	2203      	movs	r2, #3
 800515c:	fa02 f303 	lsl.w	r3, r2, r3
 8005160:	43db      	mvns	r3, r3
 8005162:	69ba      	ldr	r2, [r7, #24]
 8005164:	4013      	ands	r3, r2
 8005166:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	f003 0203 	and.w	r2, r3, #3
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	005b      	lsls	r3, r3, #1
 8005174:	fa02 f303 	lsl.w	r3, r2, r3
 8005178:	69ba      	ldr	r2, [r7, #24]
 800517a:	4313      	orrs	r3, r2
 800517c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	69ba      	ldr	r2, [r7, #24]
 8005182:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800518c:	2b00      	cmp	r3, #0
 800518e:	f000 80ae 	beq.w	80052ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005192:	2300      	movs	r3, #0
 8005194:	60fb      	str	r3, [r7, #12]
 8005196:	4b5d      	ldr	r3, [pc, #372]	; (800530c <HAL_GPIO_Init+0x300>)
 8005198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800519a:	4a5c      	ldr	r2, [pc, #368]	; (800530c <HAL_GPIO_Init+0x300>)
 800519c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80051a0:	6453      	str	r3, [r2, #68]	; 0x44
 80051a2:	4b5a      	ldr	r3, [pc, #360]	; (800530c <HAL_GPIO_Init+0x300>)
 80051a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051aa:	60fb      	str	r3, [r7, #12]
 80051ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80051ae:	4a58      	ldr	r2, [pc, #352]	; (8005310 <HAL_GPIO_Init+0x304>)
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	089b      	lsrs	r3, r3, #2
 80051b4:	3302      	adds	r3, #2
 80051b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	f003 0303 	and.w	r3, r3, #3
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	220f      	movs	r2, #15
 80051c6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ca:	43db      	mvns	r3, r3
 80051cc:	69ba      	ldr	r2, [r7, #24]
 80051ce:	4013      	ands	r3, r2
 80051d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a4f      	ldr	r2, [pc, #316]	; (8005314 <HAL_GPIO_Init+0x308>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d025      	beq.n	8005226 <HAL_GPIO_Init+0x21a>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a4e      	ldr	r2, [pc, #312]	; (8005318 <HAL_GPIO_Init+0x30c>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d01f      	beq.n	8005222 <HAL_GPIO_Init+0x216>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a4d      	ldr	r2, [pc, #308]	; (800531c <HAL_GPIO_Init+0x310>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d019      	beq.n	800521e <HAL_GPIO_Init+0x212>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a4c      	ldr	r2, [pc, #304]	; (8005320 <HAL_GPIO_Init+0x314>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d013      	beq.n	800521a <HAL_GPIO_Init+0x20e>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a4b      	ldr	r2, [pc, #300]	; (8005324 <HAL_GPIO_Init+0x318>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d00d      	beq.n	8005216 <HAL_GPIO_Init+0x20a>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a4a      	ldr	r2, [pc, #296]	; (8005328 <HAL_GPIO_Init+0x31c>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d007      	beq.n	8005212 <HAL_GPIO_Init+0x206>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a49      	ldr	r2, [pc, #292]	; (800532c <HAL_GPIO_Init+0x320>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d101      	bne.n	800520e <HAL_GPIO_Init+0x202>
 800520a:	2306      	movs	r3, #6
 800520c:	e00c      	b.n	8005228 <HAL_GPIO_Init+0x21c>
 800520e:	2307      	movs	r3, #7
 8005210:	e00a      	b.n	8005228 <HAL_GPIO_Init+0x21c>
 8005212:	2305      	movs	r3, #5
 8005214:	e008      	b.n	8005228 <HAL_GPIO_Init+0x21c>
 8005216:	2304      	movs	r3, #4
 8005218:	e006      	b.n	8005228 <HAL_GPIO_Init+0x21c>
 800521a:	2303      	movs	r3, #3
 800521c:	e004      	b.n	8005228 <HAL_GPIO_Init+0x21c>
 800521e:	2302      	movs	r3, #2
 8005220:	e002      	b.n	8005228 <HAL_GPIO_Init+0x21c>
 8005222:	2301      	movs	r3, #1
 8005224:	e000      	b.n	8005228 <HAL_GPIO_Init+0x21c>
 8005226:	2300      	movs	r3, #0
 8005228:	69fa      	ldr	r2, [r7, #28]
 800522a:	f002 0203 	and.w	r2, r2, #3
 800522e:	0092      	lsls	r2, r2, #2
 8005230:	4093      	lsls	r3, r2
 8005232:	69ba      	ldr	r2, [r7, #24]
 8005234:	4313      	orrs	r3, r2
 8005236:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005238:	4935      	ldr	r1, [pc, #212]	; (8005310 <HAL_GPIO_Init+0x304>)
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	089b      	lsrs	r3, r3, #2
 800523e:	3302      	adds	r3, #2
 8005240:	69ba      	ldr	r2, [r7, #24]
 8005242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005246:	4b3a      	ldr	r3, [pc, #232]	; (8005330 <HAL_GPIO_Init+0x324>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	43db      	mvns	r3, r3
 8005250:	69ba      	ldr	r2, [r7, #24]
 8005252:	4013      	ands	r3, r2
 8005254:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800525e:	2b00      	cmp	r3, #0
 8005260:	d003      	beq.n	800526a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005262:	69ba      	ldr	r2, [r7, #24]
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	4313      	orrs	r3, r2
 8005268:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800526a:	4a31      	ldr	r2, [pc, #196]	; (8005330 <HAL_GPIO_Init+0x324>)
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005270:	4b2f      	ldr	r3, [pc, #188]	; (8005330 <HAL_GPIO_Init+0x324>)
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	43db      	mvns	r3, r3
 800527a:	69ba      	ldr	r2, [r7, #24]
 800527c:	4013      	ands	r3, r2
 800527e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d003      	beq.n	8005294 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800528c:	69ba      	ldr	r2, [r7, #24]
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	4313      	orrs	r3, r2
 8005292:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005294:	4a26      	ldr	r2, [pc, #152]	; (8005330 <HAL_GPIO_Init+0x324>)
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800529a:	4b25      	ldr	r3, [pc, #148]	; (8005330 <HAL_GPIO_Init+0x324>)
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	43db      	mvns	r3, r3
 80052a4:	69ba      	ldr	r2, [r7, #24]
 80052a6:	4013      	ands	r3, r2
 80052a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d003      	beq.n	80052be <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80052b6:	69ba      	ldr	r2, [r7, #24]
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80052be:	4a1c      	ldr	r2, [pc, #112]	; (8005330 <HAL_GPIO_Init+0x324>)
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80052c4:	4b1a      	ldr	r3, [pc, #104]	; (8005330 <HAL_GPIO_Init+0x324>)
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	43db      	mvns	r3, r3
 80052ce:	69ba      	ldr	r2, [r7, #24]
 80052d0:	4013      	ands	r3, r2
 80052d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d003      	beq.n	80052e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80052e0:	69ba      	ldr	r2, [r7, #24]
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80052e8:	4a11      	ldr	r2, [pc, #68]	; (8005330 <HAL_GPIO_Init+0x324>)
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	3301      	adds	r3, #1
 80052f2:	61fb      	str	r3, [r7, #28]
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	2b0f      	cmp	r3, #15
 80052f8:	f67f ae96 	bls.w	8005028 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80052fc:	bf00      	nop
 80052fe:	bf00      	nop
 8005300:	3724      	adds	r7, #36	; 0x24
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	40023800 	.word	0x40023800
 8005310:	40013800 	.word	0x40013800
 8005314:	40020000 	.word	0x40020000
 8005318:	40020400 	.word	0x40020400
 800531c:	40020800 	.word	0x40020800
 8005320:	40020c00 	.word	0x40020c00
 8005324:	40021000 	.word	0x40021000
 8005328:	40021400 	.word	0x40021400
 800532c:	40021800 	.word	0x40021800
 8005330:	40013c00 	.word	0x40013c00

08005334 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	460b      	mov	r3, r1
 800533e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	691a      	ldr	r2, [r3, #16]
 8005344:	887b      	ldrh	r3, [r7, #2]
 8005346:	4013      	ands	r3, r2
 8005348:	2b00      	cmp	r3, #0
 800534a:	d002      	beq.n	8005352 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800534c:	2301      	movs	r3, #1
 800534e:	73fb      	strb	r3, [r7, #15]
 8005350:	e001      	b.n	8005356 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005352:	2300      	movs	r3, #0
 8005354:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005356:	7bfb      	ldrb	r3, [r7, #15]
}
 8005358:	4618      	mov	r0, r3
 800535a:	3714      	adds	r7, #20
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	460b      	mov	r3, r1
 800536e:	807b      	strh	r3, [r7, #2]
 8005370:	4613      	mov	r3, r2
 8005372:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005374:	787b      	ldrb	r3, [r7, #1]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d003      	beq.n	8005382 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800537a:	887a      	ldrh	r2, [r7, #2]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005380:	e003      	b.n	800538a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005382:	887b      	ldrh	r3, [r7, #2]
 8005384:	041a      	lsls	r2, r3, #16
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	619a      	str	r2, [r3, #24]
}
 800538a:	bf00      	nop
 800538c:	370c      	adds	r7, #12
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr

08005396 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005396:	b480      	push	{r7}
 8005398:	b085      	sub	sp, #20
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
 800539e:	460b      	mov	r3, r1
 80053a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	695b      	ldr	r3, [r3, #20]
 80053a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80053a8:	887a      	ldrh	r2, [r7, #2]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	4013      	ands	r3, r2
 80053ae:	041a      	lsls	r2, r3, #16
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	43d9      	mvns	r1, r3
 80053b4:	887b      	ldrh	r3, [r7, #2]
 80053b6:	400b      	ands	r3, r1
 80053b8:	431a      	orrs	r2, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	619a      	str	r2, [r3, #24]
}
 80053be:	bf00      	nop
 80053c0:	3714      	adds	r7, #20
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr
	...

080053cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	4603      	mov	r3, r0
 80053d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80053d6:	4b08      	ldr	r3, [pc, #32]	; (80053f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80053d8:	695a      	ldr	r2, [r3, #20]
 80053da:	88fb      	ldrh	r3, [r7, #6]
 80053dc:	4013      	ands	r3, r2
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d006      	beq.n	80053f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80053e2:	4a05      	ldr	r2, [pc, #20]	; (80053f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80053e4:	88fb      	ldrh	r3, [r7, #6]
 80053e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80053e8:	88fb      	ldrh	r3, [r7, #6]
 80053ea:	4618      	mov	r0, r3
 80053ec:	f7fb fe96 	bl	800111c <HAL_GPIO_EXTI_Callback>
  }
}
 80053f0:	bf00      	nop
 80053f2:	3708      	adds	r7, #8
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	40013c00 	.word	0x40013c00

080053fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d101      	bne.n	8005410 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e0cc      	b.n	80055aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005410:	4b68      	ldr	r3, [pc, #416]	; (80055b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 030f 	and.w	r3, r3, #15
 8005418:	683a      	ldr	r2, [r7, #0]
 800541a:	429a      	cmp	r2, r3
 800541c:	d90c      	bls.n	8005438 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800541e:	4b65      	ldr	r3, [pc, #404]	; (80055b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005420:	683a      	ldr	r2, [r7, #0]
 8005422:	b2d2      	uxtb	r2, r2
 8005424:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005426:	4b63      	ldr	r3, [pc, #396]	; (80055b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 030f 	and.w	r3, r3, #15
 800542e:	683a      	ldr	r2, [r7, #0]
 8005430:	429a      	cmp	r2, r3
 8005432:	d001      	beq.n	8005438 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e0b8      	b.n	80055aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0302 	and.w	r3, r3, #2
 8005440:	2b00      	cmp	r3, #0
 8005442:	d020      	beq.n	8005486 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0304 	and.w	r3, r3, #4
 800544c:	2b00      	cmp	r3, #0
 800544e:	d005      	beq.n	800545c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005450:	4b59      	ldr	r3, [pc, #356]	; (80055b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	4a58      	ldr	r2, [pc, #352]	; (80055b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005456:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800545a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0308 	and.w	r3, r3, #8
 8005464:	2b00      	cmp	r3, #0
 8005466:	d005      	beq.n	8005474 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005468:	4b53      	ldr	r3, [pc, #332]	; (80055b8 <HAL_RCC_ClockConfig+0x1bc>)
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	4a52      	ldr	r2, [pc, #328]	; (80055b8 <HAL_RCC_ClockConfig+0x1bc>)
 800546e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005472:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005474:	4b50      	ldr	r3, [pc, #320]	; (80055b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	494d      	ldr	r1, [pc, #308]	; (80055b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005482:	4313      	orrs	r3, r2
 8005484:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0301 	and.w	r3, r3, #1
 800548e:	2b00      	cmp	r3, #0
 8005490:	d044      	beq.n	800551c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	2b01      	cmp	r3, #1
 8005498:	d107      	bne.n	80054aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800549a:	4b47      	ldr	r3, [pc, #284]	; (80055b8 <HAL_RCC_ClockConfig+0x1bc>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d119      	bne.n	80054da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e07f      	b.n	80055aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	2b02      	cmp	r3, #2
 80054b0:	d003      	beq.n	80054ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054b6:	2b03      	cmp	r3, #3
 80054b8:	d107      	bne.n	80054ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054ba:	4b3f      	ldr	r3, [pc, #252]	; (80055b8 <HAL_RCC_ClockConfig+0x1bc>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d109      	bne.n	80054da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e06f      	b.n	80055aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054ca:	4b3b      	ldr	r3, [pc, #236]	; (80055b8 <HAL_RCC_ClockConfig+0x1bc>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 0302 	and.w	r3, r3, #2
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d101      	bne.n	80054da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e067      	b.n	80055aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80054da:	4b37      	ldr	r3, [pc, #220]	; (80055b8 <HAL_RCC_ClockConfig+0x1bc>)
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	f023 0203 	bic.w	r2, r3, #3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	4934      	ldr	r1, [pc, #208]	; (80055b8 <HAL_RCC_ClockConfig+0x1bc>)
 80054e8:	4313      	orrs	r3, r2
 80054ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80054ec:	f7fd fd18 	bl	8002f20 <HAL_GetTick>
 80054f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054f2:	e00a      	b.n	800550a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054f4:	f7fd fd14 	bl	8002f20 <HAL_GetTick>
 80054f8:	4602      	mov	r2, r0
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005502:	4293      	cmp	r3, r2
 8005504:	d901      	bls.n	800550a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	e04f      	b.n	80055aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800550a:	4b2b      	ldr	r3, [pc, #172]	; (80055b8 <HAL_RCC_ClockConfig+0x1bc>)
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	f003 020c 	and.w	r2, r3, #12
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	429a      	cmp	r2, r3
 800551a:	d1eb      	bne.n	80054f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800551c:	4b25      	ldr	r3, [pc, #148]	; (80055b4 <HAL_RCC_ClockConfig+0x1b8>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 030f 	and.w	r3, r3, #15
 8005524:	683a      	ldr	r2, [r7, #0]
 8005526:	429a      	cmp	r2, r3
 8005528:	d20c      	bcs.n	8005544 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800552a:	4b22      	ldr	r3, [pc, #136]	; (80055b4 <HAL_RCC_ClockConfig+0x1b8>)
 800552c:	683a      	ldr	r2, [r7, #0]
 800552e:	b2d2      	uxtb	r2, r2
 8005530:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005532:	4b20      	ldr	r3, [pc, #128]	; (80055b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 030f 	and.w	r3, r3, #15
 800553a:	683a      	ldr	r2, [r7, #0]
 800553c:	429a      	cmp	r2, r3
 800553e:	d001      	beq.n	8005544 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e032      	b.n	80055aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0304 	and.w	r3, r3, #4
 800554c:	2b00      	cmp	r3, #0
 800554e:	d008      	beq.n	8005562 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005550:	4b19      	ldr	r3, [pc, #100]	; (80055b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	4916      	ldr	r1, [pc, #88]	; (80055b8 <HAL_RCC_ClockConfig+0x1bc>)
 800555e:	4313      	orrs	r3, r2
 8005560:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0308 	and.w	r3, r3, #8
 800556a:	2b00      	cmp	r3, #0
 800556c:	d009      	beq.n	8005582 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800556e:	4b12      	ldr	r3, [pc, #72]	; (80055b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	00db      	lsls	r3, r3, #3
 800557c:	490e      	ldr	r1, [pc, #56]	; (80055b8 <HAL_RCC_ClockConfig+0x1bc>)
 800557e:	4313      	orrs	r3, r2
 8005580:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005582:	f000 f855 	bl	8005630 <HAL_RCC_GetSysClockFreq>
 8005586:	4602      	mov	r2, r0
 8005588:	4b0b      	ldr	r3, [pc, #44]	; (80055b8 <HAL_RCC_ClockConfig+0x1bc>)
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	091b      	lsrs	r3, r3, #4
 800558e:	f003 030f 	and.w	r3, r3, #15
 8005592:	490a      	ldr	r1, [pc, #40]	; (80055bc <HAL_RCC_ClockConfig+0x1c0>)
 8005594:	5ccb      	ldrb	r3, [r1, r3]
 8005596:	fa22 f303 	lsr.w	r3, r2, r3
 800559a:	4a09      	ldr	r2, [pc, #36]	; (80055c0 <HAL_RCC_ClockConfig+0x1c4>)
 800559c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800559e:	4b09      	ldr	r3, [pc, #36]	; (80055c4 <HAL_RCC_ClockConfig+0x1c8>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7fd fc78 	bl	8002e98 <HAL_InitTick>

  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3710      	adds	r7, #16
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	40023c00 	.word	0x40023c00
 80055b8:	40023800 	.word	0x40023800
 80055bc:	080083f4 	.word	0x080083f4
 80055c0:	20000058 	.word	0x20000058
 80055c4:	2000005c 	.word	0x2000005c

080055c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055c8:	b480      	push	{r7}
 80055ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055cc:	4b03      	ldr	r3, [pc, #12]	; (80055dc <HAL_RCC_GetHCLKFreq+0x14>)
 80055ce:	681b      	ldr	r3, [r3, #0]
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	20000058 	.word	0x20000058

080055e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80055e4:	f7ff fff0 	bl	80055c8 <HAL_RCC_GetHCLKFreq>
 80055e8:	4602      	mov	r2, r0
 80055ea:	4b05      	ldr	r3, [pc, #20]	; (8005600 <HAL_RCC_GetPCLK1Freq+0x20>)
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	0a9b      	lsrs	r3, r3, #10
 80055f0:	f003 0307 	and.w	r3, r3, #7
 80055f4:	4903      	ldr	r1, [pc, #12]	; (8005604 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055f6:	5ccb      	ldrb	r3, [r1, r3]
 80055f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	40023800 	.word	0x40023800
 8005604:	08008404 	.word	0x08008404

08005608 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800560c:	f7ff ffdc 	bl	80055c8 <HAL_RCC_GetHCLKFreq>
 8005610:	4602      	mov	r2, r0
 8005612:	4b05      	ldr	r3, [pc, #20]	; (8005628 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	0b5b      	lsrs	r3, r3, #13
 8005618:	f003 0307 	and.w	r3, r3, #7
 800561c:	4903      	ldr	r1, [pc, #12]	; (800562c <HAL_RCC_GetPCLK2Freq+0x24>)
 800561e:	5ccb      	ldrb	r3, [r1, r3]
 8005620:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005624:	4618      	mov	r0, r3
 8005626:	bd80      	pop	{r7, pc}
 8005628:	40023800 	.word	0x40023800
 800562c:	08008404 	.word	0x08008404

08005630 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005630:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005634:	b0ae      	sub	sp, #184	; 0xb8
 8005636:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005638:	2300      	movs	r3, #0
 800563a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800563e:	2300      	movs	r3, #0
 8005640:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8005644:	2300      	movs	r3, #0
 8005646:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800564a:	2300      	movs	r3, #0
 800564c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8005650:	2300      	movs	r3, #0
 8005652:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005656:	4bcb      	ldr	r3, [pc, #812]	; (8005984 <HAL_RCC_GetSysClockFreq+0x354>)
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	f003 030c 	and.w	r3, r3, #12
 800565e:	2b0c      	cmp	r3, #12
 8005660:	f200 8206 	bhi.w	8005a70 <HAL_RCC_GetSysClockFreq+0x440>
 8005664:	a201      	add	r2, pc, #4	; (adr r2, 800566c <HAL_RCC_GetSysClockFreq+0x3c>)
 8005666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800566a:	bf00      	nop
 800566c:	080056a1 	.word	0x080056a1
 8005670:	08005a71 	.word	0x08005a71
 8005674:	08005a71 	.word	0x08005a71
 8005678:	08005a71 	.word	0x08005a71
 800567c:	080056a9 	.word	0x080056a9
 8005680:	08005a71 	.word	0x08005a71
 8005684:	08005a71 	.word	0x08005a71
 8005688:	08005a71 	.word	0x08005a71
 800568c:	080056b1 	.word	0x080056b1
 8005690:	08005a71 	.word	0x08005a71
 8005694:	08005a71 	.word	0x08005a71
 8005698:	08005a71 	.word	0x08005a71
 800569c:	080058a1 	.word	0x080058a1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80056a0:	4bb9      	ldr	r3, [pc, #740]	; (8005988 <HAL_RCC_GetSysClockFreq+0x358>)
 80056a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80056a6:	e1e7      	b.n	8005a78 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80056a8:	4bb8      	ldr	r3, [pc, #736]	; (800598c <HAL_RCC_GetSysClockFreq+0x35c>)
 80056aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80056ae:	e1e3      	b.n	8005a78 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80056b0:	4bb4      	ldr	r3, [pc, #720]	; (8005984 <HAL_RCC_GetSysClockFreq+0x354>)
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80056bc:	4bb1      	ldr	r3, [pc, #708]	; (8005984 <HAL_RCC_GetSysClockFreq+0x354>)
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d071      	beq.n	80057ac <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056c8:	4bae      	ldr	r3, [pc, #696]	; (8005984 <HAL_RCC_GetSysClockFreq+0x354>)
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	099b      	lsrs	r3, r3, #6
 80056ce:	2200      	movs	r2, #0
 80056d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80056d4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80056d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80056dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80056e4:	2300      	movs	r3, #0
 80056e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80056ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80056ee:	4622      	mov	r2, r4
 80056f0:	462b      	mov	r3, r5
 80056f2:	f04f 0000 	mov.w	r0, #0
 80056f6:	f04f 0100 	mov.w	r1, #0
 80056fa:	0159      	lsls	r1, r3, #5
 80056fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005700:	0150      	lsls	r0, r2, #5
 8005702:	4602      	mov	r2, r0
 8005704:	460b      	mov	r3, r1
 8005706:	4621      	mov	r1, r4
 8005708:	1a51      	subs	r1, r2, r1
 800570a:	6439      	str	r1, [r7, #64]	; 0x40
 800570c:	4629      	mov	r1, r5
 800570e:	eb63 0301 	sbc.w	r3, r3, r1
 8005712:	647b      	str	r3, [r7, #68]	; 0x44
 8005714:	f04f 0200 	mov.w	r2, #0
 8005718:	f04f 0300 	mov.w	r3, #0
 800571c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8005720:	4649      	mov	r1, r9
 8005722:	018b      	lsls	r3, r1, #6
 8005724:	4641      	mov	r1, r8
 8005726:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800572a:	4641      	mov	r1, r8
 800572c:	018a      	lsls	r2, r1, #6
 800572e:	4641      	mov	r1, r8
 8005730:	1a51      	subs	r1, r2, r1
 8005732:	63b9      	str	r1, [r7, #56]	; 0x38
 8005734:	4649      	mov	r1, r9
 8005736:	eb63 0301 	sbc.w	r3, r3, r1
 800573a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800573c:	f04f 0200 	mov.w	r2, #0
 8005740:	f04f 0300 	mov.w	r3, #0
 8005744:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8005748:	4649      	mov	r1, r9
 800574a:	00cb      	lsls	r3, r1, #3
 800574c:	4641      	mov	r1, r8
 800574e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005752:	4641      	mov	r1, r8
 8005754:	00ca      	lsls	r2, r1, #3
 8005756:	4610      	mov	r0, r2
 8005758:	4619      	mov	r1, r3
 800575a:	4603      	mov	r3, r0
 800575c:	4622      	mov	r2, r4
 800575e:	189b      	adds	r3, r3, r2
 8005760:	633b      	str	r3, [r7, #48]	; 0x30
 8005762:	462b      	mov	r3, r5
 8005764:	460a      	mov	r2, r1
 8005766:	eb42 0303 	adc.w	r3, r2, r3
 800576a:	637b      	str	r3, [r7, #52]	; 0x34
 800576c:	f04f 0200 	mov.w	r2, #0
 8005770:	f04f 0300 	mov.w	r3, #0
 8005774:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005778:	4629      	mov	r1, r5
 800577a:	024b      	lsls	r3, r1, #9
 800577c:	4621      	mov	r1, r4
 800577e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005782:	4621      	mov	r1, r4
 8005784:	024a      	lsls	r2, r1, #9
 8005786:	4610      	mov	r0, r2
 8005788:	4619      	mov	r1, r3
 800578a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800578e:	2200      	movs	r2, #0
 8005790:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005794:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005798:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800579c:	f7fb f9b6 	bl	8000b0c <__aeabi_uldivmod>
 80057a0:	4602      	mov	r2, r0
 80057a2:	460b      	mov	r3, r1
 80057a4:	4613      	mov	r3, r2
 80057a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80057aa:	e067      	b.n	800587c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057ac:	4b75      	ldr	r3, [pc, #468]	; (8005984 <HAL_RCC_GetSysClockFreq+0x354>)
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	099b      	lsrs	r3, r3, #6
 80057b2:	2200      	movs	r2, #0
 80057b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80057b8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80057bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80057c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80057c6:	2300      	movs	r3, #0
 80057c8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80057ca:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80057ce:	4622      	mov	r2, r4
 80057d0:	462b      	mov	r3, r5
 80057d2:	f04f 0000 	mov.w	r0, #0
 80057d6:	f04f 0100 	mov.w	r1, #0
 80057da:	0159      	lsls	r1, r3, #5
 80057dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057e0:	0150      	lsls	r0, r2, #5
 80057e2:	4602      	mov	r2, r0
 80057e4:	460b      	mov	r3, r1
 80057e6:	4621      	mov	r1, r4
 80057e8:	1a51      	subs	r1, r2, r1
 80057ea:	62b9      	str	r1, [r7, #40]	; 0x28
 80057ec:	4629      	mov	r1, r5
 80057ee:	eb63 0301 	sbc.w	r3, r3, r1
 80057f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057f4:	f04f 0200 	mov.w	r2, #0
 80057f8:	f04f 0300 	mov.w	r3, #0
 80057fc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8005800:	4649      	mov	r1, r9
 8005802:	018b      	lsls	r3, r1, #6
 8005804:	4641      	mov	r1, r8
 8005806:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800580a:	4641      	mov	r1, r8
 800580c:	018a      	lsls	r2, r1, #6
 800580e:	4641      	mov	r1, r8
 8005810:	ebb2 0a01 	subs.w	sl, r2, r1
 8005814:	4649      	mov	r1, r9
 8005816:	eb63 0b01 	sbc.w	fp, r3, r1
 800581a:	f04f 0200 	mov.w	r2, #0
 800581e:	f04f 0300 	mov.w	r3, #0
 8005822:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005826:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800582a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800582e:	4692      	mov	sl, r2
 8005830:	469b      	mov	fp, r3
 8005832:	4623      	mov	r3, r4
 8005834:	eb1a 0303 	adds.w	r3, sl, r3
 8005838:	623b      	str	r3, [r7, #32]
 800583a:	462b      	mov	r3, r5
 800583c:	eb4b 0303 	adc.w	r3, fp, r3
 8005840:	627b      	str	r3, [r7, #36]	; 0x24
 8005842:	f04f 0200 	mov.w	r2, #0
 8005846:	f04f 0300 	mov.w	r3, #0
 800584a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800584e:	4629      	mov	r1, r5
 8005850:	028b      	lsls	r3, r1, #10
 8005852:	4621      	mov	r1, r4
 8005854:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005858:	4621      	mov	r1, r4
 800585a:	028a      	lsls	r2, r1, #10
 800585c:	4610      	mov	r0, r2
 800585e:	4619      	mov	r1, r3
 8005860:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005864:	2200      	movs	r2, #0
 8005866:	673b      	str	r3, [r7, #112]	; 0x70
 8005868:	677a      	str	r2, [r7, #116]	; 0x74
 800586a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800586e:	f7fb f94d 	bl	8000b0c <__aeabi_uldivmod>
 8005872:	4602      	mov	r2, r0
 8005874:	460b      	mov	r3, r1
 8005876:	4613      	mov	r3, r2
 8005878:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800587c:	4b41      	ldr	r3, [pc, #260]	; (8005984 <HAL_RCC_GetSysClockFreq+0x354>)
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	0c1b      	lsrs	r3, r3, #16
 8005882:	f003 0303 	and.w	r3, r3, #3
 8005886:	3301      	adds	r3, #1
 8005888:	005b      	lsls	r3, r3, #1
 800588a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800588e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005892:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005896:	fbb2 f3f3 	udiv	r3, r2, r3
 800589a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800589e:	e0eb      	b.n	8005a78 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80058a0:	4b38      	ldr	r3, [pc, #224]	; (8005984 <HAL_RCC_GetSysClockFreq+0x354>)
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80058ac:	4b35      	ldr	r3, [pc, #212]	; (8005984 <HAL_RCC_GetSysClockFreq+0x354>)
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d06b      	beq.n	8005990 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058b8:	4b32      	ldr	r3, [pc, #200]	; (8005984 <HAL_RCC_GetSysClockFreq+0x354>)
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	099b      	lsrs	r3, r3, #6
 80058be:	2200      	movs	r2, #0
 80058c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80058c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80058c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058ca:	663b      	str	r3, [r7, #96]	; 0x60
 80058cc:	2300      	movs	r3, #0
 80058ce:	667b      	str	r3, [r7, #100]	; 0x64
 80058d0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80058d4:	4622      	mov	r2, r4
 80058d6:	462b      	mov	r3, r5
 80058d8:	f04f 0000 	mov.w	r0, #0
 80058dc:	f04f 0100 	mov.w	r1, #0
 80058e0:	0159      	lsls	r1, r3, #5
 80058e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058e6:	0150      	lsls	r0, r2, #5
 80058e8:	4602      	mov	r2, r0
 80058ea:	460b      	mov	r3, r1
 80058ec:	4621      	mov	r1, r4
 80058ee:	1a51      	subs	r1, r2, r1
 80058f0:	61b9      	str	r1, [r7, #24]
 80058f2:	4629      	mov	r1, r5
 80058f4:	eb63 0301 	sbc.w	r3, r3, r1
 80058f8:	61fb      	str	r3, [r7, #28]
 80058fa:	f04f 0200 	mov.w	r2, #0
 80058fe:	f04f 0300 	mov.w	r3, #0
 8005902:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005906:	4659      	mov	r1, fp
 8005908:	018b      	lsls	r3, r1, #6
 800590a:	4651      	mov	r1, sl
 800590c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005910:	4651      	mov	r1, sl
 8005912:	018a      	lsls	r2, r1, #6
 8005914:	4651      	mov	r1, sl
 8005916:	ebb2 0801 	subs.w	r8, r2, r1
 800591a:	4659      	mov	r1, fp
 800591c:	eb63 0901 	sbc.w	r9, r3, r1
 8005920:	f04f 0200 	mov.w	r2, #0
 8005924:	f04f 0300 	mov.w	r3, #0
 8005928:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800592c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005930:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005934:	4690      	mov	r8, r2
 8005936:	4699      	mov	r9, r3
 8005938:	4623      	mov	r3, r4
 800593a:	eb18 0303 	adds.w	r3, r8, r3
 800593e:	613b      	str	r3, [r7, #16]
 8005940:	462b      	mov	r3, r5
 8005942:	eb49 0303 	adc.w	r3, r9, r3
 8005946:	617b      	str	r3, [r7, #20]
 8005948:	f04f 0200 	mov.w	r2, #0
 800594c:	f04f 0300 	mov.w	r3, #0
 8005950:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005954:	4629      	mov	r1, r5
 8005956:	024b      	lsls	r3, r1, #9
 8005958:	4621      	mov	r1, r4
 800595a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800595e:	4621      	mov	r1, r4
 8005960:	024a      	lsls	r2, r1, #9
 8005962:	4610      	mov	r0, r2
 8005964:	4619      	mov	r1, r3
 8005966:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800596a:	2200      	movs	r2, #0
 800596c:	65bb      	str	r3, [r7, #88]	; 0x58
 800596e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005970:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005974:	f7fb f8ca 	bl	8000b0c <__aeabi_uldivmod>
 8005978:	4602      	mov	r2, r0
 800597a:	460b      	mov	r3, r1
 800597c:	4613      	mov	r3, r2
 800597e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005982:	e065      	b.n	8005a50 <HAL_RCC_GetSysClockFreq+0x420>
 8005984:	40023800 	.word	0x40023800
 8005988:	00f42400 	.word	0x00f42400
 800598c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005990:	4b3d      	ldr	r3, [pc, #244]	; (8005a88 <HAL_RCC_GetSysClockFreq+0x458>)
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	099b      	lsrs	r3, r3, #6
 8005996:	2200      	movs	r2, #0
 8005998:	4618      	mov	r0, r3
 800599a:	4611      	mov	r1, r2
 800599c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80059a0:	653b      	str	r3, [r7, #80]	; 0x50
 80059a2:	2300      	movs	r3, #0
 80059a4:	657b      	str	r3, [r7, #84]	; 0x54
 80059a6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80059aa:	4642      	mov	r2, r8
 80059ac:	464b      	mov	r3, r9
 80059ae:	f04f 0000 	mov.w	r0, #0
 80059b2:	f04f 0100 	mov.w	r1, #0
 80059b6:	0159      	lsls	r1, r3, #5
 80059b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059bc:	0150      	lsls	r0, r2, #5
 80059be:	4602      	mov	r2, r0
 80059c0:	460b      	mov	r3, r1
 80059c2:	4641      	mov	r1, r8
 80059c4:	1a51      	subs	r1, r2, r1
 80059c6:	60b9      	str	r1, [r7, #8]
 80059c8:	4649      	mov	r1, r9
 80059ca:	eb63 0301 	sbc.w	r3, r3, r1
 80059ce:	60fb      	str	r3, [r7, #12]
 80059d0:	f04f 0200 	mov.w	r2, #0
 80059d4:	f04f 0300 	mov.w	r3, #0
 80059d8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80059dc:	4659      	mov	r1, fp
 80059de:	018b      	lsls	r3, r1, #6
 80059e0:	4651      	mov	r1, sl
 80059e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80059e6:	4651      	mov	r1, sl
 80059e8:	018a      	lsls	r2, r1, #6
 80059ea:	4651      	mov	r1, sl
 80059ec:	1a54      	subs	r4, r2, r1
 80059ee:	4659      	mov	r1, fp
 80059f0:	eb63 0501 	sbc.w	r5, r3, r1
 80059f4:	f04f 0200 	mov.w	r2, #0
 80059f8:	f04f 0300 	mov.w	r3, #0
 80059fc:	00eb      	lsls	r3, r5, #3
 80059fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a02:	00e2      	lsls	r2, r4, #3
 8005a04:	4614      	mov	r4, r2
 8005a06:	461d      	mov	r5, r3
 8005a08:	4643      	mov	r3, r8
 8005a0a:	18e3      	adds	r3, r4, r3
 8005a0c:	603b      	str	r3, [r7, #0]
 8005a0e:	464b      	mov	r3, r9
 8005a10:	eb45 0303 	adc.w	r3, r5, r3
 8005a14:	607b      	str	r3, [r7, #4]
 8005a16:	f04f 0200 	mov.w	r2, #0
 8005a1a:	f04f 0300 	mov.w	r3, #0
 8005a1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a22:	4629      	mov	r1, r5
 8005a24:	028b      	lsls	r3, r1, #10
 8005a26:	4621      	mov	r1, r4
 8005a28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a2c:	4621      	mov	r1, r4
 8005a2e:	028a      	lsls	r2, r1, #10
 8005a30:	4610      	mov	r0, r2
 8005a32:	4619      	mov	r1, r3
 8005a34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a38:	2200      	movs	r2, #0
 8005a3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a3c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005a3e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005a42:	f7fb f863 	bl	8000b0c <__aeabi_uldivmod>
 8005a46:	4602      	mov	r2, r0
 8005a48:	460b      	mov	r3, r1
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005a50:	4b0d      	ldr	r3, [pc, #52]	; (8005a88 <HAL_RCC_GetSysClockFreq+0x458>)
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	0f1b      	lsrs	r3, r3, #28
 8005a56:	f003 0307 	and.w	r3, r3, #7
 8005a5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8005a5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005a62:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005a6e:	e003      	b.n	8005a78 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a70:	4b06      	ldr	r3, [pc, #24]	; (8005a8c <HAL_RCC_GetSysClockFreq+0x45c>)
 8005a72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005a76:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a78:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	37b8      	adds	r7, #184	; 0xb8
 8005a80:	46bd      	mov	sp, r7
 8005a82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a86:	bf00      	nop
 8005a88:	40023800 	.word	0x40023800
 8005a8c:	00f42400 	.word	0x00f42400

08005a90 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b086      	sub	sp, #24
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d101      	bne.n	8005aa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e28d      	b.n	8005fbe <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 0301 	and.w	r3, r3, #1
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	f000 8083 	beq.w	8005bb6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005ab0:	4b94      	ldr	r3, [pc, #592]	; (8005d04 <HAL_RCC_OscConfig+0x274>)
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	f003 030c 	and.w	r3, r3, #12
 8005ab8:	2b04      	cmp	r3, #4
 8005aba:	d019      	beq.n	8005af0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005abc:	4b91      	ldr	r3, [pc, #580]	; (8005d04 <HAL_RCC_OscConfig+0x274>)
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005ac4:	2b08      	cmp	r3, #8
 8005ac6:	d106      	bne.n	8005ad6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005ac8:	4b8e      	ldr	r3, [pc, #568]	; (8005d04 <HAL_RCC_OscConfig+0x274>)
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ad0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ad4:	d00c      	beq.n	8005af0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ad6:	4b8b      	ldr	r3, [pc, #556]	; (8005d04 <HAL_RCC_OscConfig+0x274>)
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005ade:	2b0c      	cmp	r3, #12
 8005ae0:	d112      	bne.n	8005b08 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ae2:	4b88      	ldr	r3, [pc, #544]	; (8005d04 <HAL_RCC_OscConfig+0x274>)
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005aea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005aee:	d10b      	bne.n	8005b08 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005af0:	4b84      	ldr	r3, [pc, #528]	; (8005d04 <HAL_RCC_OscConfig+0x274>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d05b      	beq.n	8005bb4 <HAL_RCC_OscConfig+0x124>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d157      	bne.n	8005bb4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	e25a      	b.n	8005fbe <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b10:	d106      	bne.n	8005b20 <HAL_RCC_OscConfig+0x90>
 8005b12:	4b7c      	ldr	r3, [pc, #496]	; (8005d04 <HAL_RCC_OscConfig+0x274>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a7b      	ldr	r2, [pc, #492]	; (8005d04 <HAL_RCC_OscConfig+0x274>)
 8005b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b1c:	6013      	str	r3, [r2, #0]
 8005b1e:	e01d      	b.n	8005b5c <HAL_RCC_OscConfig+0xcc>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b28:	d10c      	bne.n	8005b44 <HAL_RCC_OscConfig+0xb4>
 8005b2a:	4b76      	ldr	r3, [pc, #472]	; (8005d04 <HAL_RCC_OscConfig+0x274>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a75      	ldr	r2, [pc, #468]	; (8005d04 <HAL_RCC_OscConfig+0x274>)
 8005b30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b34:	6013      	str	r3, [r2, #0]
 8005b36:	4b73      	ldr	r3, [pc, #460]	; (8005d04 <HAL_RCC_OscConfig+0x274>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a72      	ldr	r2, [pc, #456]	; (8005d04 <HAL_RCC_OscConfig+0x274>)
 8005b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b40:	6013      	str	r3, [r2, #0]
 8005b42:	e00b      	b.n	8005b5c <HAL_RCC_OscConfig+0xcc>
 8005b44:	4b6f      	ldr	r3, [pc, #444]	; (8005d04 <HAL_RCC_OscConfig+0x274>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a6e      	ldr	r2, [pc, #440]	; (8005d04 <HAL_RCC_OscConfig+0x274>)
 8005b4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b4e:	6013      	str	r3, [r2, #0]
 8005b50:	4b6c      	ldr	r3, [pc, #432]	; (8005d04 <HAL_RCC_OscConfig+0x274>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a6b      	ldr	r2, [pc, #428]	; (8005d04 <HAL_RCC_OscConfig+0x274>)
 8005b56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d013      	beq.n	8005b8c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b64:	f7fd f9dc 	bl	8002f20 <HAL_GetTick>
 8005b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b6a:	e008      	b.n	8005b7e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b6c:	f7fd f9d8 	bl	8002f20 <HAL_GetTick>
 8005b70:	4602      	mov	r2, r0
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	2b64      	cmp	r3, #100	; 0x64
 8005b78:	d901      	bls.n	8005b7e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	e21f      	b.n	8005fbe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b7e:	4b61      	ldr	r3, [pc, #388]	; (8005d04 <HAL_RCC_OscConfig+0x274>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d0f0      	beq.n	8005b6c <HAL_RCC_OscConfig+0xdc>
 8005b8a:	e014      	b.n	8005bb6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b8c:	f7fd f9c8 	bl	8002f20 <HAL_GetTick>
 8005b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b92:	e008      	b.n	8005ba6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b94:	f7fd f9c4 	bl	8002f20 <HAL_GetTick>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	2b64      	cmp	r3, #100	; 0x64
 8005ba0:	d901      	bls.n	8005ba6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	e20b      	b.n	8005fbe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ba6:	4b57      	ldr	r3, [pc, #348]	; (8005d04 <HAL_RCC_OscConfig+0x274>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d1f0      	bne.n	8005b94 <HAL_RCC_OscConfig+0x104>
 8005bb2:	e000      	b.n	8005bb6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 0302 	and.w	r3, r3, #2
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d06f      	beq.n	8005ca2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005bc2:	4b50      	ldr	r3, [pc, #320]	; (8005d04 <HAL_RCC_OscConfig+0x274>)
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	f003 030c 	and.w	r3, r3, #12
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d017      	beq.n	8005bfe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005bce:	4b4d      	ldr	r3, [pc, #308]	; (8005d04 <HAL_RCC_OscConfig+0x274>)
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005bd6:	2b08      	cmp	r3, #8
 8005bd8:	d105      	bne.n	8005be6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005bda:	4b4a      	ldr	r3, [pc, #296]	; (8005d04 <HAL_RCC_OscConfig+0x274>)
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00b      	beq.n	8005bfe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005be6:	4b47      	ldr	r3, [pc, #284]	; (8005d04 <HAL_RCC_OscConfig+0x274>)
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005bee:	2b0c      	cmp	r3, #12
 8005bf0:	d11c      	bne.n	8005c2c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005bf2:	4b44      	ldr	r3, [pc, #272]	; (8005d04 <HAL_RCC_OscConfig+0x274>)
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d116      	bne.n	8005c2c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bfe:	4b41      	ldr	r3, [pc, #260]	; (8005d04 <HAL_RCC_OscConfig+0x274>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 0302 	and.w	r3, r3, #2
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d005      	beq.n	8005c16 <HAL_RCC_OscConfig+0x186>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d001      	beq.n	8005c16 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e1d3      	b.n	8005fbe <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c16:	4b3b      	ldr	r3, [pc, #236]	; (8005d04 <HAL_RCC_OscConfig+0x274>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	00db      	lsls	r3, r3, #3
 8005c24:	4937      	ldr	r1, [pc, #220]	; (8005d04 <HAL_RCC_OscConfig+0x274>)
 8005c26:	4313      	orrs	r3, r2
 8005c28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c2a:	e03a      	b.n	8005ca2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d020      	beq.n	8005c76 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c34:	4b34      	ldr	r3, [pc, #208]	; (8005d08 <HAL_RCC_OscConfig+0x278>)
 8005c36:	2201      	movs	r2, #1
 8005c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c3a:	f7fd f971 	bl	8002f20 <HAL_GetTick>
 8005c3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c40:	e008      	b.n	8005c54 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c42:	f7fd f96d 	bl	8002f20 <HAL_GetTick>
 8005c46:	4602      	mov	r2, r0
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	1ad3      	subs	r3, r2, r3
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	d901      	bls.n	8005c54 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005c50:	2303      	movs	r3, #3
 8005c52:	e1b4      	b.n	8005fbe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c54:	4b2b      	ldr	r3, [pc, #172]	; (8005d04 <HAL_RCC_OscConfig+0x274>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 0302 	and.w	r3, r3, #2
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d0f0      	beq.n	8005c42 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c60:	4b28      	ldr	r3, [pc, #160]	; (8005d04 <HAL_RCC_OscConfig+0x274>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	00db      	lsls	r3, r3, #3
 8005c6e:	4925      	ldr	r1, [pc, #148]	; (8005d04 <HAL_RCC_OscConfig+0x274>)
 8005c70:	4313      	orrs	r3, r2
 8005c72:	600b      	str	r3, [r1, #0]
 8005c74:	e015      	b.n	8005ca2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c76:	4b24      	ldr	r3, [pc, #144]	; (8005d08 <HAL_RCC_OscConfig+0x278>)
 8005c78:	2200      	movs	r2, #0
 8005c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c7c:	f7fd f950 	bl	8002f20 <HAL_GetTick>
 8005c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c82:	e008      	b.n	8005c96 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c84:	f7fd f94c 	bl	8002f20 <HAL_GetTick>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	d901      	bls.n	8005c96 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005c92:	2303      	movs	r3, #3
 8005c94:	e193      	b.n	8005fbe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c96:	4b1b      	ldr	r3, [pc, #108]	; (8005d04 <HAL_RCC_OscConfig+0x274>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 0302 	and.w	r3, r3, #2
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d1f0      	bne.n	8005c84 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 0308 	and.w	r3, r3, #8
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d036      	beq.n	8005d1c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	695b      	ldr	r3, [r3, #20]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d016      	beq.n	8005ce4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005cb6:	4b15      	ldr	r3, [pc, #84]	; (8005d0c <HAL_RCC_OscConfig+0x27c>)
 8005cb8:	2201      	movs	r2, #1
 8005cba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cbc:	f7fd f930 	bl	8002f20 <HAL_GetTick>
 8005cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cc2:	e008      	b.n	8005cd6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005cc4:	f7fd f92c 	bl	8002f20 <HAL_GetTick>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	d901      	bls.n	8005cd6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e173      	b.n	8005fbe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cd6:	4b0b      	ldr	r3, [pc, #44]	; (8005d04 <HAL_RCC_OscConfig+0x274>)
 8005cd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cda:	f003 0302 	and.w	r3, r3, #2
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d0f0      	beq.n	8005cc4 <HAL_RCC_OscConfig+0x234>
 8005ce2:	e01b      	b.n	8005d1c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ce4:	4b09      	ldr	r3, [pc, #36]	; (8005d0c <HAL_RCC_OscConfig+0x27c>)
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cea:	f7fd f919 	bl	8002f20 <HAL_GetTick>
 8005cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cf0:	e00e      	b.n	8005d10 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005cf2:	f7fd f915 	bl	8002f20 <HAL_GetTick>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	1ad3      	subs	r3, r2, r3
 8005cfc:	2b02      	cmp	r3, #2
 8005cfe:	d907      	bls.n	8005d10 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005d00:	2303      	movs	r3, #3
 8005d02:	e15c      	b.n	8005fbe <HAL_RCC_OscConfig+0x52e>
 8005d04:	40023800 	.word	0x40023800
 8005d08:	42470000 	.word	0x42470000
 8005d0c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d10:	4b8a      	ldr	r3, [pc, #552]	; (8005f3c <HAL_RCC_OscConfig+0x4ac>)
 8005d12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d14:	f003 0302 	and.w	r3, r3, #2
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d1ea      	bne.n	8005cf2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 0304 	and.w	r3, r3, #4
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	f000 8097 	beq.w	8005e58 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d2e:	4b83      	ldr	r3, [pc, #524]	; (8005f3c <HAL_RCC_OscConfig+0x4ac>)
 8005d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d10f      	bne.n	8005d5a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	60bb      	str	r3, [r7, #8]
 8005d3e:	4b7f      	ldr	r3, [pc, #508]	; (8005f3c <HAL_RCC_OscConfig+0x4ac>)
 8005d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d42:	4a7e      	ldr	r2, [pc, #504]	; (8005f3c <HAL_RCC_OscConfig+0x4ac>)
 8005d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d48:	6413      	str	r3, [r2, #64]	; 0x40
 8005d4a:	4b7c      	ldr	r3, [pc, #496]	; (8005f3c <HAL_RCC_OscConfig+0x4ac>)
 8005d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d52:	60bb      	str	r3, [r7, #8]
 8005d54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d56:	2301      	movs	r3, #1
 8005d58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d5a:	4b79      	ldr	r3, [pc, #484]	; (8005f40 <HAL_RCC_OscConfig+0x4b0>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d118      	bne.n	8005d98 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d66:	4b76      	ldr	r3, [pc, #472]	; (8005f40 <HAL_RCC_OscConfig+0x4b0>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a75      	ldr	r2, [pc, #468]	; (8005f40 <HAL_RCC_OscConfig+0x4b0>)
 8005d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d72:	f7fd f8d5 	bl	8002f20 <HAL_GetTick>
 8005d76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d78:	e008      	b.n	8005d8c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d7a:	f7fd f8d1 	bl	8002f20 <HAL_GetTick>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	1ad3      	subs	r3, r2, r3
 8005d84:	2b02      	cmp	r3, #2
 8005d86:	d901      	bls.n	8005d8c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005d88:	2303      	movs	r3, #3
 8005d8a:	e118      	b.n	8005fbe <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d8c:	4b6c      	ldr	r3, [pc, #432]	; (8005f40 <HAL_RCC_OscConfig+0x4b0>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d0f0      	beq.n	8005d7a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d106      	bne.n	8005dae <HAL_RCC_OscConfig+0x31e>
 8005da0:	4b66      	ldr	r3, [pc, #408]	; (8005f3c <HAL_RCC_OscConfig+0x4ac>)
 8005da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005da4:	4a65      	ldr	r2, [pc, #404]	; (8005f3c <HAL_RCC_OscConfig+0x4ac>)
 8005da6:	f043 0301 	orr.w	r3, r3, #1
 8005daa:	6713      	str	r3, [r2, #112]	; 0x70
 8005dac:	e01c      	b.n	8005de8 <HAL_RCC_OscConfig+0x358>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	2b05      	cmp	r3, #5
 8005db4:	d10c      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x340>
 8005db6:	4b61      	ldr	r3, [pc, #388]	; (8005f3c <HAL_RCC_OscConfig+0x4ac>)
 8005db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dba:	4a60      	ldr	r2, [pc, #384]	; (8005f3c <HAL_RCC_OscConfig+0x4ac>)
 8005dbc:	f043 0304 	orr.w	r3, r3, #4
 8005dc0:	6713      	str	r3, [r2, #112]	; 0x70
 8005dc2:	4b5e      	ldr	r3, [pc, #376]	; (8005f3c <HAL_RCC_OscConfig+0x4ac>)
 8005dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dc6:	4a5d      	ldr	r2, [pc, #372]	; (8005f3c <HAL_RCC_OscConfig+0x4ac>)
 8005dc8:	f043 0301 	orr.w	r3, r3, #1
 8005dcc:	6713      	str	r3, [r2, #112]	; 0x70
 8005dce:	e00b      	b.n	8005de8 <HAL_RCC_OscConfig+0x358>
 8005dd0:	4b5a      	ldr	r3, [pc, #360]	; (8005f3c <HAL_RCC_OscConfig+0x4ac>)
 8005dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dd4:	4a59      	ldr	r2, [pc, #356]	; (8005f3c <HAL_RCC_OscConfig+0x4ac>)
 8005dd6:	f023 0301 	bic.w	r3, r3, #1
 8005dda:	6713      	str	r3, [r2, #112]	; 0x70
 8005ddc:	4b57      	ldr	r3, [pc, #348]	; (8005f3c <HAL_RCC_OscConfig+0x4ac>)
 8005dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005de0:	4a56      	ldr	r2, [pc, #344]	; (8005f3c <HAL_RCC_OscConfig+0x4ac>)
 8005de2:	f023 0304 	bic.w	r3, r3, #4
 8005de6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d015      	beq.n	8005e1c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005df0:	f7fd f896 	bl	8002f20 <HAL_GetTick>
 8005df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005df6:	e00a      	b.n	8005e0e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005df8:	f7fd f892 	bl	8002f20 <HAL_GetTick>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d901      	bls.n	8005e0e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	e0d7      	b.n	8005fbe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e0e:	4b4b      	ldr	r3, [pc, #300]	; (8005f3c <HAL_RCC_OscConfig+0x4ac>)
 8005e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e12:	f003 0302 	and.w	r3, r3, #2
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d0ee      	beq.n	8005df8 <HAL_RCC_OscConfig+0x368>
 8005e1a:	e014      	b.n	8005e46 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e1c:	f7fd f880 	bl	8002f20 <HAL_GetTick>
 8005e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e22:	e00a      	b.n	8005e3a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e24:	f7fd f87c 	bl	8002f20 <HAL_GetTick>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d901      	bls.n	8005e3a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005e36:	2303      	movs	r3, #3
 8005e38:	e0c1      	b.n	8005fbe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e3a:	4b40      	ldr	r3, [pc, #256]	; (8005f3c <HAL_RCC_OscConfig+0x4ac>)
 8005e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e3e:	f003 0302 	and.w	r3, r3, #2
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d1ee      	bne.n	8005e24 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e46:	7dfb      	ldrb	r3, [r7, #23]
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d105      	bne.n	8005e58 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e4c:	4b3b      	ldr	r3, [pc, #236]	; (8005f3c <HAL_RCC_OscConfig+0x4ac>)
 8005e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e50:	4a3a      	ldr	r2, [pc, #232]	; (8005f3c <HAL_RCC_OscConfig+0x4ac>)
 8005e52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e56:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	699b      	ldr	r3, [r3, #24]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	f000 80ad 	beq.w	8005fbc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005e62:	4b36      	ldr	r3, [pc, #216]	; (8005f3c <HAL_RCC_OscConfig+0x4ac>)
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	f003 030c 	and.w	r3, r3, #12
 8005e6a:	2b08      	cmp	r3, #8
 8005e6c:	d060      	beq.n	8005f30 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	699b      	ldr	r3, [r3, #24]
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d145      	bne.n	8005f02 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e76:	4b33      	ldr	r3, [pc, #204]	; (8005f44 <HAL_RCC_OscConfig+0x4b4>)
 8005e78:	2200      	movs	r2, #0
 8005e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e7c:	f7fd f850 	bl	8002f20 <HAL_GetTick>
 8005e80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e82:	e008      	b.n	8005e96 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e84:	f7fd f84c 	bl	8002f20 <HAL_GetTick>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	1ad3      	subs	r3, r2, r3
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d901      	bls.n	8005e96 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005e92:	2303      	movs	r3, #3
 8005e94:	e093      	b.n	8005fbe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e96:	4b29      	ldr	r3, [pc, #164]	; (8005f3c <HAL_RCC_OscConfig+0x4ac>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d1f0      	bne.n	8005e84 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	69da      	ldr	r2, [r3, #28]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a1b      	ldr	r3, [r3, #32]
 8005eaa:	431a      	orrs	r2, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb0:	019b      	lsls	r3, r3, #6
 8005eb2:	431a      	orrs	r2, r3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb8:	085b      	lsrs	r3, r3, #1
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	041b      	lsls	r3, r3, #16
 8005ebe:	431a      	orrs	r2, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec4:	061b      	lsls	r3, r3, #24
 8005ec6:	431a      	orrs	r2, r3
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ecc:	071b      	lsls	r3, r3, #28
 8005ece:	491b      	ldr	r1, [pc, #108]	; (8005f3c <HAL_RCC_OscConfig+0x4ac>)
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ed4:	4b1b      	ldr	r3, [pc, #108]	; (8005f44 <HAL_RCC_OscConfig+0x4b4>)
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eda:	f7fd f821 	bl	8002f20 <HAL_GetTick>
 8005ede:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ee0:	e008      	b.n	8005ef4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ee2:	f7fd f81d 	bl	8002f20 <HAL_GetTick>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d901      	bls.n	8005ef4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	e064      	b.n	8005fbe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ef4:	4b11      	ldr	r3, [pc, #68]	; (8005f3c <HAL_RCC_OscConfig+0x4ac>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d0f0      	beq.n	8005ee2 <HAL_RCC_OscConfig+0x452>
 8005f00:	e05c      	b.n	8005fbc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f02:	4b10      	ldr	r3, [pc, #64]	; (8005f44 <HAL_RCC_OscConfig+0x4b4>)
 8005f04:	2200      	movs	r2, #0
 8005f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f08:	f7fd f80a 	bl	8002f20 <HAL_GetTick>
 8005f0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f0e:	e008      	b.n	8005f22 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f10:	f7fd f806 	bl	8002f20 <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	d901      	bls.n	8005f22 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	e04d      	b.n	8005fbe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f22:	4b06      	ldr	r3, [pc, #24]	; (8005f3c <HAL_RCC_OscConfig+0x4ac>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1f0      	bne.n	8005f10 <HAL_RCC_OscConfig+0x480>
 8005f2e:	e045      	b.n	8005fbc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	699b      	ldr	r3, [r3, #24]
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d107      	bne.n	8005f48 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e040      	b.n	8005fbe <HAL_RCC_OscConfig+0x52e>
 8005f3c:	40023800 	.word	0x40023800
 8005f40:	40007000 	.word	0x40007000
 8005f44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005f48:	4b1f      	ldr	r3, [pc, #124]	; (8005fc8 <HAL_RCC_OscConfig+0x538>)
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	699b      	ldr	r3, [r3, #24]
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d030      	beq.n	8005fb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d129      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d122      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005f78:	4013      	ands	r3, r2
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005f7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d119      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f8e:	085b      	lsrs	r3, r3, #1
 8005f90:	3b01      	subs	r3, #1
 8005f92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d10f      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d107      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d001      	beq.n	8005fbc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e000      	b.n	8005fbe <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3718      	adds	r7, #24
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	40023800 	.word	0x40023800

08005fcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b082      	sub	sp, #8
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d101      	bne.n	8005fde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e041      	b.n	8006062 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d106      	bne.n	8005ff8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f7fc fbd2 	bl	800279c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2202      	movs	r2, #2
 8005ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	3304      	adds	r3, #4
 8006008:	4619      	mov	r1, r3
 800600a:	4610      	mov	r0, r2
 800600c:	f000 fd52 	bl	8006ab4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006060:	2300      	movs	r3, #0
}
 8006062:	4618      	mov	r0, r3
 8006064:	3708      	adds	r7, #8
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
	...

0800606c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800606c:	b480      	push	{r7}
 800606e:	b085      	sub	sp, #20
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800607a:	b2db      	uxtb	r3, r3
 800607c:	2b01      	cmp	r3, #1
 800607e:	d001      	beq.n	8006084 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	e046      	b.n	8006112 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2202      	movs	r2, #2
 8006088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a23      	ldr	r2, [pc, #140]	; (8006120 <HAL_TIM_Base_Start+0xb4>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d022      	beq.n	80060dc <HAL_TIM_Base_Start+0x70>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800609e:	d01d      	beq.n	80060dc <HAL_TIM_Base_Start+0x70>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a1f      	ldr	r2, [pc, #124]	; (8006124 <HAL_TIM_Base_Start+0xb8>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d018      	beq.n	80060dc <HAL_TIM_Base_Start+0x70>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a1e      	ldr	r2, [pc, #120]	; (8006128 <HAL_TIM_Base_Start+0xbc>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d013      	beq.n	80060dc <HAL_TIM_Base_Start+0x70>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a1c      	ldr	r2, [pc, #112]	; (800612c <HAL_TIM_Base_Start+0xc0>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d00e      	beq.n	80060dc <HAL_TIM_Base_Start+0x70>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a1b      	ldr	r2, [pc, #108]	; (8006130 <HAL_TIM_Base_Start+0xc4>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d009      	beq.n	80060dc <HAL_TIM_Base_Start+0x70>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a19      	ldr	r2, [pc, #100]	; (8006134 <HAL_TIM_Base_Start+0xc8>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d004      	beq.n	80060dc <HAL_TIM_Base_Start+0x70>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a18      	ldr	r2, [pc, #96]	; (8006138 <HAL_TIM_Base_Start+0xcc>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d111      	bne.n	8006100 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	f003 0307 	and.w	r3, r3, #7
 80060e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2b06      	cmp	r3, #6
 80060ec:	d010      	beq.n	8006110 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f042 0201 	orr.w	r2, r2, #1
 80060fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060fe:	e007      	b.n	8006110 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f042 0201 	orr.w	r2, r2, #1
 800610e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	3714      	adds	r7, #20
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr
 800611e:	bf00      	nop
 8006120:	40010000 	.word	0x40010000
 8006124:	40000400 	.word	0x40000400
 8006128:	40000800 	.word	0x40000800
 800612c:	40000c00 	.word	0x40000c00
 8006130:	40010400 	.word	0x40010400
 8006134:	40014000 	.word	0x40014000
 8006138:	40001800 	.word	0x40001800

0800613c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800613c:	b480      	push	{r7}
 800613e:	b085      	sub	sp, #20
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800614a:	b2db      	uxtb	r3, r3
 800614c:	2b01      	cmp	r3, #1
 800614e:	d001      	beq.n	8006154 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e04e      	b.n	80061f2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2202      	movs	r2, #2
 8006158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	68da      	ldr	r2, [r3, #12]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f042 0201 	orr.w	r2, r2, #1
 800616a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a23      	ldr	r2, [pc, #140]	; (8006200 <HAL_TIM_Base_Start_IT+0xc4>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d022      	beq.n	80061bc <HAL_TIM_Base_Start_IT+0x80>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800617e:	d01d      	beq.n	80061bc <HAL_TIM_Base_Start_IT+0x80>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a1f      	ldr	r2, [pc, #124]	; (8006204 <HAL_TIM_Base_Start_IT+0xc8>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d018      	beq.n	80061bc <HAL_TIM_Base_Start_IT+0x80>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a1e      	ldr	r2, [pc, #120]	; (8006208 <HAL_TIM_Base_Start_IT+0xcc>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d013      	beq.n	80061bc <HAL_TIM_Base_Start_IT+0x80>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a1c      	ldr	r2, [pc, #112]	; (800620c <HAL_TIM_Base_Start_IT+0xd0>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d00e      	beq.n	80061bc <HAL_TIM_Base_Start_IT+0x80>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a1b      	ldr	r2, [pc, #108]	; (8006210 <HAL_TIM_Base_Start_IT+0xd4>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d009      	beq.n	80061bc <HAL_TIM_Base_Start_IT+0x80>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a19      	ldr	r2, [pc, #100]	; (8006214 <HAL_TIM_Base_Start_IT+0xd8>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d004      	beq.n	80061bc <HAL_TIM_Base_Start_IT+0x80>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a18      	ldr	r2, [pc, #96]	; (8006218 <HAL_TIM_Base_Start_IT+0xdc>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d111      	bne.n	80061e0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	f003 0307 	and.w	r3, r3, #7
 80061c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2b06      	cmp	r3, #6
 80061cc:	d010      	beq.n	80061f0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f042 0201 	orr.w	r2, r2, #1
 80061dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061de:	e007      	b.n	80061f0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f042 0201 	orr.w	r2, r2, #1
 80061ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3714      	adds	r7, #20
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop
 8006200:	40010000 	.word	0x40010000
 8006204:	40000400 	.word	0x40000400
 8006208:	40000800 	.word	0x40000800
 800620c:	40000c00 	.word	0x40000c00
 8006210:	40010400 	.word	0x40010400
 8006214:	40014000 	.word	0x40014000
 8006218:	40001800 	.word	0x40001800

0800621c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b082      	sub	sp, #8
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d101      	bne.n	800622e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e041      	b.n	80062b2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006234:	b2db      	uxtb	r3, r3
 8006236:	2b00      	cmp	r3, #0
 8006238:	d106      	bne.n	8006248 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 f839 	bl	80062ba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2202      	movs	r2, #2
 800624c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	3304      	adds	r3, #4
 8006258:	4619      	mov	r1, r3
 800625a:	4610      	mov	r0, r2
 800625c:	f000 fc2a 	bl	8006ab4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062b0:	2300      	movs	r3, #0
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3708      	adds	r7, #8
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}

080062ba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80062ba:	b480      	push	{r7}
 80062bc:	b083      	sub	sp, #12
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80062c2:	bf00      	nop
 80062c4:	370c      	adds	r7, #12
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr
	...

080062d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d109      	bne.n	80062f4 <HAL_TIM_PWM_Start+0x24>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	bf14      	ite	ne
 80062ec:	2301      	movne	r3, #1
 80062ee:	2300      	moveq	r3, #0
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	e022      	b.n	800633a <HAL_TIM_PWM_Start+0x6a>
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	2b04      	cmp	r3, #4
 80062f8:	d109      	bne.n	800630e <HAL_TIM_PWM_Start+0x3e>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006300:	b2db      	uxtb	r3, r3
 8006302:	2b01      	cmp	r3, #1
 8006304:	bf14      	ite	ne
 8006306:	2301      	movne	r3, #1
 8006308:	2300      	moveq	r3, #0
 800630a:	b2db      	uxtb	r3, r3
 800630c:	e015      	b.n	800633a <HAL_TIM_PWM_Start+0x6a>
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	2b08      	cmp	r3, #8
 8006312:	d109      	bne.n	8006328 <HAL_TIM_PWM_Start+0x58>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800631a:	b2db      	uxtb	r3, r3
 800631c:	2b01      	cmp	r3, #1
 800631e:	bf14      	ite	ne
 8006320:	2301      	movne	r3, #1
 8006322:	2300      	moveq	r3, #0
 8006324:	b2db      	uxtb	r3, r3
 8006326:	e008      	b.n	800633a <HAL_TIM_PWM_Start+0x6a>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800632e:	b2db      	uxtb	r3, r3
 8006330:	2b01      	cmp	r3, #1
 8006332:	bf14      	ite	ne
 8006334:	2301      	movne	r3, #1
 8006336:	2300      	moveq	r3, #0
 8006338:	b2db      	uxtb	r3, r3
 800633a:	2b00      	cmp	r3, #0
 800633c:	d001      	beq.n	8006342 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e07c      	b.n	800643c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d104      	bne.n	8006352 <HAL_TIM_PWM_Start+0x82>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2202      	movs	r2, #2
 800634c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006350:	e013      	b.n	800637a <HAL_TIM_PWM_Start+0xaa>
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	2b04      	cmp	r3, #4
 8006356:	d104      	bne.n	8006362 <HAL_TIM_PWM_Start+0x92>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2202      	movs	r2, #2
 800635c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006360:	e00b      	b.n	800637a <HAL_TIM_PWM_Start+0xaa>
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	2b08      	cmp	r3, #8
 8006366:	d104      	bne.n	8006372 <HAL_TIM_PWM_Start+0xa2>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2202      	movs	r2, #2
 800636c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006370:	e003      	b.n	800637a <HAL_TIM_PWM_Start+0xaa>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2202      	movs	r2, #2
 8006376:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2201      	movs	r2, #1
 8006380:	6839      	ldr	r1, [r7, #0]
 8006382:	4618      	mov	r0, r3
 8006384:	f000 fe80 	bl	8007088 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a2d      	ldr	r2, [pc, #180]	; (8006444 <HAL_TIM_PWM_Start+0x174>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d004      	beq.n	800639c <HAL_TIM_PWM_Start+0xcc>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a2c      	ldr	r2, [pc, #176]	; (8006448 <HAL_TIM_PWM_Start+0x178>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d101      	bne.n	80063a0 <HAL_TIM_PWM_Start+0xd0>
 800639c:	2301      	movs	r3, #1
 800639e:	e000      	b.n	80063a2 <HAL_TIM_PWM_Start+0xd2>
 80063a0:	2300      	movs	r3, #0
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d007      	beq.n	80063b6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a22      	ldr	r2, [pc, #136]	; (8006444 <HAL_TIM_PWM_Start+0x174>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d022      	beq.n	8006406 <HAL_TIM_PWM_Start+0x136>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063c8:	d01d      	beq.n	8006406 <HAL_TIM_PWM_Start+0x136>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a1f      	ldr	r2, [pc, #124]	; (800644c <HAL_TIM_PWM_Start+0x17c>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d018      	beq.n	8006406 <HAL_TIM_PWM_Start+0x136>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a1d      	ldr	r2, [pc, #116]	; (8006450 <HAL_TIM_PWM_Start+0x180>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d013      	beq.n	8006406 <HAL_TIM_PWM_Start+0x136>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a1c      	ldr	r2, [pc, #112]	; (8006454 <HAL_TIM_PWM_Start+0x184>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d00e      	beq.n	8006406 <HAL_TIM_PWM_Start+0x136>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a16      	ldr	r2, [pc, #88]	; (8006448 <HAL_TIM_PWM_Start+0x178>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d009      	beq.n	8006406 <HAL_TIM_PWM_Start+0x136>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a18      	ldr	r2, [pc, #96]	; (8006458 <HAL_TIM_PWM_Start+0x188>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d004      	beq.n	8006406 <HAL_TIM_PWM_Start+0x136>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a16      	ldr	r2, [pc, #88]	; (800645c <HAL_TIM_PWM_Start+0x18c>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d111      	bne.n	800642a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	f003 0307 	and.w	r3, r3, #7
 8006410:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2b06      	cmp	r3, #6
 8006416:	d010      	beq.n	800643a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f042 0201 	orr.w	r2, r2, #1
 8006426:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006428:	e007      	b.n	800643a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f042 0201 	orr.w	r2, r2, #1
 8006438:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800643a:	2300      	movs	r3, #0
}
 800643c:	4618      	mov	r0, r3
 800643e:	3710      	adds	r7, #16
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}
 8006444:	40010000 	.word	0x40010000
 8006448:	40010400 	.word	0x40010400
 800644c:	40000400 	.word	0x40000400
 8006450:	40000800 	.word	0x40000800
 8006454:	40000c00 	.word	0x40000c00
 8006458:	40014000 	.word	0x40014000
 800645c:	40001800 	.word	0x40001800

08006460 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2200      	movs	r2, #0
 8006470:	6839      	ldr	r1, [r7, #0]
 8006472:	4618      	mov	r0, r3
 8006474:	f000 fe08 	bl	8007088 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a2e      	ldr	r2, [pc, #184]	; (8006538 <HAL_TIM_PWM_Stop+0xd8>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d004      	beq.n	800648c <HAL_TIM_PWM_Stop+0x2c>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a2d      	ldr	r2, [pc, #180]	; (800653c <HAL_TIM_PWM_Stop+0xdc>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d101      	bne.n	8006490 <HAL_TIM_PWM_Stop+0x30>
 800648c:	2301      	movs	r3, #1
 800648e:	e000      	b.n	8006492 <HAL_TIM_PWM_Stop+0x32>
 8006490:	2300      	movs	r3, #0
 8006492:	2b00      	cmp	r3, #0
 8006494:	d017      	beq.n	80064c6 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	6a1a      	ldr	r2, [r3, #32]
 800649c:	f241 1311 	movw	r3, #4369	; 0x1111
 80064a0:	4013      	ands	r3, r2
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d10f      	bne.n	80064c6 <HAL_TIM_PWM_Stop+0x66>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	6a1a      	ldr	r2, [r3, #32]
 80064ac:	f240 4344 	movw	r3, #1092	; 0x444
 80064b0:	4013      	ands	r3, r2
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d107      	bne.n	80064c6 <HAL_TIM_PWM_Stop+0x66>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80064c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	6a1a      	ldr	r2, [r3, #32]
 80064cc:	f241 1311 	movw	r3, #4369	; 0x1111
 80064d0:	4013      	ands	r3, r2
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d10f      	bne.n	80064f6 <HAL_TIM_PWM_Stop+0x96>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	6a1a      	ldr	r2, [r3, #32]
 80064dc:	f240 4344 	movw	r3, #1092	; 0x444
 80064e0:	4013      	ands	r3, r2
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d107      	bne.n	80064f6 <HAL_TIM_PWM_Stop+0x96>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f022 0201 	bic.w	r2, r2, #1
 80064f4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d104      	bne.n	8006506 <HAL_TIM_PWM_Stop+0xa6>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006504:	e013      	b.n	800652e <HAL_TIM_PWM_Stop+0xce>
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	2b04      	cmp	r3, #4
 800650a:	d104      	bne.n	8006516 <HAL_TIM_PWM_Stop+0xb6>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006514:	e00b      	b.n	800652e <HAL_TIM_PWM_Stop+0xce>
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	2b08      	cmp	r3, #8
 800651a:	d104      	bne.n	8006526 <HAL_TIM_PWM_Stop+0xc6>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006524:	e003      	b.n	800652e <HAL_TIM_PWM_Stop+0xce>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2201      	movs	r2, #1
 800652a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	3708      	adds	r7, #8
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}
 8006538:	40010000 	.word	0x40010000
 800653c:	40010400 	.word	0x40010400

08006540 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b082      	sub	sp, #8
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	f003 0302 	and.w	r3, r3, #2
 8006552:	2b02      	cmp	r3, #2
 8006554:	d122      	bne.n	800659c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	f003 0302 	and.w	r3, r3, #2
 8006560:	2b02      	cmp	r3, #2
 8006562:	d11b      	bne.n	800659c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f06f 0202 	mvn.w	r2, #2
 800656c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2201      	movs	r2, #1
 8006572:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	699b      	ldr	r3, [r3, #24]
 800657a:	f003 0303 	and.w	r3, r3, #3
 800657e:	2b00      	cmp	r3, #0
 8006580:	d003      	beq.n	800658a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 fa77 	bl	8006a76 <HAL_TIM_IC_CaptureCallback>
 8006588:	e005      	b.n	8006596 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 fa69 	bl	8006a62 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 fa7a 	bl	8006a8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2200      	movs	r2, #0
 800659a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	f003 0304 	and.w	r3, r3, #4
 80065a6:	2b04      	cmp	r3, #4
 80065a8:	d122      	bne.n	80065f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	f003 0304 	and.w	r3, r3, #4
 80065b4:	2b04      	cmp	r3, #4
 80065b6:	d11b      	bne.n	80065f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f06f 0204 	mvn.w	r2, #4
 80065c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2202      	movs	r2, #2
 80065c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	699b      	ldr	r3, [r3, #24]
 80065ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d003      	beq.n	80065de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 fa4d 	bl	8006a76 <HAL_TIM_IC_CaptureCallback>
 80065dc:	e005      	b.n	80065ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 fa3f 	bl	8006a62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 fa50 	bl	8006a8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	691b      	ldr	r3, [r3, #16]
 80065f6:	f003 0308 	and.w	r3, r3, #8
 80065fa:	2b08      	cmp	r3, #8
 80065fc:	d122      	bne.n	8006644 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	68db      	ldr	r3, [r3, #12]
 8006604:	f003 0308 	and.w	r3, r3, #8
 8006608:	2b08      	cmp	r3, #8
 800660a:	d11b      	bne.n	8006644 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f06f 0208 	mvn.w	r2, #8
 8006614:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2204      	movs	r2, #4
 800661a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	69db      	ldr	r3, [r3, #28]
 8006622:	f003 0303 	and.w	r3, r3, #3
 8006626:	2b00      	cmp	r3, #0
 8006628:	d003      	beq.n	8006632 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 fa23 	bl	8006a76 <HAL_TIM_IC_CaptureCallback>
 8006630:	e005      	b.n	800663e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 fa15 	bl	8006a62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 fa26 	bl	8006a8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	f003 0310 	and.w	r3, r3, #16
 800664e:	2b10      	cmp	r3, #16
 8006650:	d122      	bne.n	8006698 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	f003 0310 	and.w	r3, r3, #16
 800665c:	2b10      	cmp	r3, #16
 800665e:	d11b      	bne.n	8006698 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f06f 0210 	mvn.w	r2, #16
 8006668:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2208      	movs	r2, #8
 800666e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	69db      	ldr	r3, [r3, #28]
 8006676:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800667a:	2b00      	cmp	r3, #0
 800667c:	d003      	beq.n	8006686 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 f9f9 	bl	8006a76 <HAL_TIM_IC_CaptureCallback>
 8006684:	e005      	b.n	8006692 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 f9eb 	bl	8006a62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 f9fc 	bl	8006a8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	691b      	ldr	r3, [r3, #16]
 800669e:	f003 0301 	and.w	r3, r3, #1
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d10e      	bne.n	80066c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	f003 0301 	and.w	r3, r3, #1
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d107      	bne.n	80066c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f06f 0201 	mvn.w	r2, #1
 80066bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f7fb f832 	bl	8001728 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ce:	2b80      	cmp	r3, #128	; 0x80
 80066d0:	d10e      	bne.n	80066f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066dc:	2b80      	cmp	r3, #128	; 0x80
 80066de:	d107      	bne.n	80066f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80066e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 fd78 	bl	80071e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	691b      	ldr	r3, [r3, #16]
 80066f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066fa:	2b40      	cmp	r3, #64	; 0x40
 80066fc:	d10e      	bne.n	800671c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006708:	2b40      	cmp	r3, #64	; 0x40
 800670a:	d107      	bne.n	800671c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 f9c1 	bl	8006a9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	f003 0320 	and.w	r3, r3, #32
 8006726:	2b20      	cmp	r3, #32
 8006728:	d10e      	bne.n	8006748 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	f003 0320 	and.w	r3, r3, #32
 8006734:	2b20      	cmp	r3, #32
 8006736:	d107      	bne.n	8006748 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f06f 0220 	mvn.w	r2, #32
 8006740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f000 fd42 	bl	80071cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006748:	bf00      	nop
 800674a:	3708      	adds	r7, #8
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}

08006750 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b086      	sub	sp, #24
 8006754:	af00      	add	r7, sp, #0
 8006756:	60f8      	str	r0, [r7, #12]
 8006758:	60b9      	str	r1, [r7, #8]
 800675a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800675c:	2300      	movs	r3, #0
 800675e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006766:	2b01      	cmp	r3, #1
 8006768:	d101      	bne.n	800676e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800676a:	2302      	movs	r3, #2
 800676c:	e0ae      	b.n	80068cc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2201      	movs	r2, #1
 8006772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2b0c      	cmp	r3, #12
 800677a:	f200 809f 	bhi.w	80068bc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800677e:	a201      	add	r2, pc, #4	; (adr r2, 8006784 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006784:	080067b9 	.word	0x080067b9
 8006788:	080068bd 	.word	0x080068bd
 800678c:	080068bd 	.word	0x080068bd
 8006790:	080068bd 	.word	0x080068bd
 8006794:	080067f9 	.word	0x080067f9
 8006798:	080068bd 	.word	0x080068bd
 800679c:	080068bd 	.word	0x080068bd
 80067a0:	080068bd 	.word	0x080068bd
 80067a4:	0800683b 	.word	0x0800683b
 80067a8:	080068bd 	.word	0x080068bd
 80067ac:	080068bd 	.word	0x080068bd
 80067b0:	080068bd 	.word	0x080068bd
 80067b4:	0800687b 	.word	0x0800687b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68b9      	ldr	r1, [r7, #8]
 80067be:	4618      	mov	r0, r3
 80067c0:	f000 fa18 	bl	8006bf4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	699a      	ldr	r2, [r3, #24]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f042 0208 	orr.w	r2, r2, #8
 80067d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	699a      	ldr	r2, [r3, #24]
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f022 0204 	bic.w	r2, r2, #4
 80067e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	6999      	ldr	r1, [r3, #24]
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	691a      	ldr	r2, [r3, #16]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	430a      	orrs	r2, r1
 80067f4:	619a      	str	r2, [r3, #24]
      break;
 80067f6:	e064      	b.n	80068c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	68b9      	ldr	r1, [r7, #8]
 80067fe:	4618      	mov	r0, r3
 8006800:	f000 fa68 	bl	8006cd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	699a      	ldr	r2, [r3, #24]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006812:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	699a      	ldr	r2, [r3, #24]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006822:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	6999      	ldr	r1, [r3, #24]
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	021a      	lsls	r2, r3, #8
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	430a      	orrs	r2, r1
 8006836:	619a      	str	r2, [r3, #24]
      break;
 8006838:	e043      	b.n	80068c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68b9      	ldr	r1, [r7, #8]
 8006840:	4618      	mov	r0, r3
 8006842:	f000 fabd 	bl	8006dc0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	69da      	ldr	r2, [r3, #28]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f042 0208 	orr.w	r2, r2, #8
 8006854:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	69da      	ldr	r2, [r3, #28]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f022 0204 	bic.w	r2, r2, #4
 8006864:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	69d9      	ldr	r1, [r3, #28]
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	691a      	ldr	r2, [r3, #16]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	430a      	orrs	r2, r1
 8006876:	61da      	str	r2, [r3, #28]
      break;
 8006878:	e023      	b.n	80068c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	68b9      	ldr	r1, [r7, #8]
 8006880:	4618      	mov	r0, r3
 8006882:	f000 fb11 	bl	8006ea8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	69da      	ldr	r2, [r3, #28]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006894:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	69da      	ldr	r2, [r3, #28]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	69d9      	ldr	r1, [r3, #28]
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	691b      	ldr	r3, [r3, #16]
 80068b0:	021a      	lsls	r2, r3, #8
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	430a      	orrs	r2, r1
 80068b8:	61da      	str	r2, [r3, #28]
      break;
 80068ba:	e002      	b.n	80068c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	75fb      	strb	r3, [r7, #23]
      break;
 80068c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2200      	movs	r2, #0
 80068c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80068ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3718      	adds	r7, #24
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068de:	2300      	movs	r3, #0
 80068e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d101      	bne.n	80068f0 <HAL_TIM_ConfigClockSource+0x1c>
 80068ec:	2302      	movs	r3, #2
 80068ee:	e0b4      	b.n	8006a5a <HAL_TIM_ConfigClockSource+0x186>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2202      	movs	r2, #2
 80068fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800690e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006916:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68ba      	ldr	r2, [r7, #8]
 800691e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006928:	d03e      	beq.n	80069a8 <HAL_TIM_ConfigClockSource+0xd4>
 800692a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800692e:	f200 8087 	bhi.w	8006a40 <HAL_TIM_ConfigClockSource+0x16c>
 8006932:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006936:	f000 8086 	beq.w	8006a46 <HAL_TIM_ConfigClockSource+0x172>
 800693a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800693e:	d87f      	bhi.n	8006a40 <HAL_TIM_ConfigClockSource+0x16c>
 8006940:	2b70      	cmp	r3, #112	; 0x70
 8006942:	d01a      	beq.n	800697a <HAL_TIM_ConfigClockSource+0xa6>
 8006944:	2b70      	cmp	r3, #112	; 0x70
 8006946:	d87b      	bhi.n	8006a40 <HAL_TIM_ConfigClockSource+0x16c>
 8006948:	2b60      	cmp	r3, #96	; 0x60
 800694a:	d050      	beq.n	80069ee <HAL_TIM_ConfigClockSource+0x11a>
 800694c:	2b60      	cmp	r3, #96	; 0x60
 800694e:	d877      	bhi.n	8006a40 <HAL_TIM_ConfigClockSource+0x16c>
 8006950:	2b50      	cmp	r3, #80	; 0x50
 8006952:	d03c      	beq.n	80069ce <HAL_TIM_ConfigClockSource+0xfa>
 8006954:	2b50      	cmp	r3, #80	; 0x50
 8006956:	d873      	bhi.n	8006a40 <HAL_TIM_ConfigClockSource+0x16c>
 8006958:	2b40      	cmp	r3, #64	; 0x40
 800695a:	d058      	beq.n	8006a0e <HAL_TIM_ConfigClockSource+0x13a>
 800695c:	2b40      	cmp	r3, #64	; 0x40
 800695e:	d86f      	bhi.n	8006a40 <HAL_TIM_ConfigClockSource+0x16c>
 8006960:	2b30      	cmp	r3, #48	; 0x30
 8006962:	d064      	beq.n	8006a2e <HAL_TIM_ConfigClockSource+0x15a>
 8006964:	2b30      	cmp	r3, #48	; 0x30
 8006966:	d86b      	bhi.n	8006a40 <HAL_TIM_ConfigClockSource+0x16c>
 8006968:	2b20      	cmp	r3, #32
 800696a:	d060      	beq.n	8006a2e <HAL_TIM_ConfigClockSource+0x15a>
 800696c:	2b20      	cmp	r3, #32
 800696e:	d867      	bhi.n	8006a40 <HAL_TIM_ConfigClockSource+0x16c>
 8006970:	2b00      	cmp	r3, #0
 8006972:	d05c      	beq.n	8006a2e <HAL_TIM_ConfigClockSource+0x15a>
 8006974:	2b10      	cmp	r3, #16
 8006976:	d05a      	beq.n	8006a2e <HAL_TIM_ConfigClockSource+0x15a>
 8006978:	e062      	b.n	8006a40 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6818      	ldr	r0, [r3, #0]
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	6899      	ldr	r1, [r3, #8]
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	685a      	ldr	r2, [r3, #4]
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	f000 fb5d 	bl	8007048 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800699c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	68ba      	ldr	r2, [r7, #8]
 80069a4:	609a      	str	r2, [r3, #8]
      break;
 80069a6:	e04f      	b.n	8006a48 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6818      	ldr	r0, [r3, #0]
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	6899      	ldr	r1, [r3, #8]
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	685a      	ldr	r2, [r3, #4]
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	f000 fb46 	bl	8007048 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	689a      	ldr	r2, [r3, #8]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80069ca:	609a      	str	r2, [r3, #8]
      break;
 80069cc:	e03c      	b.n	8006a48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6818      	ldr	r0, [r3, #0]
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	6859      	ldr	r1, [r3, #4]
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	68db      	ldr	r3, [r3, #12]
 80069da:	461a      	mov	r2, r3
 80069dc:	f000 faba 	bl	8006f54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	2150      	movs	r1, #80	; 0x50
 80069e6:	4618      	mov	r0, r3
 80069e8:	f000 fb13 	bl	8007012 <TIM_ITRx_SetConfig>
      break;
 80069ec:	e02c      	b.n	8006a48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6818      	ldr	r0, [r3, #0]
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	6859      	ldr	r1, [r3, #4]
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	68db      	ldr	r3, [r3, #12]
 80069fa:	461a      	mov	r2, r3
 80069fc:	f000 fad9 	bl	8006fb2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	2160      	movs	r1, #96	; 0x60
 8006a06:	4618      	mov	r0, r3
 8006a08:	f000 fb03 	bl	8007012 <TIM_ITRx_SetConfig>
      break;
 8006a0c:	e01c      	b.n	8006a48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6818      	ldr	r0, [r3, #0]
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	6859      	ldr	r1, [r3, #4]
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	f000 fa9a 	bl	8006f54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	2140      	movs	r1, #64	; 0x40
 8006a26:	4618      	mov	r0, r3
 8006a28:	f000 faf3 	bl	8007012 <TIM_ITRx_SetConfig>
      break;
 8006a2c:	e00c      	b.n	8006a48 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4619      	mov	r1, r3
 8006a38:	4610      	mov	r0, r2
 8006a3a:	f000 faea 	bl	8007012 <TIM_ITRx_SetConfig>
      break;
 8006a3e:	e003      	b.n	8006a48 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	73fb      	strb	r3, [r7, #15]
      break;
 8006a44:	e000      	b.n	8006a48 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006a46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3710      	adds	r7, #16
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}

08006a62 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a62:	b480      	push	{r7}
 8006a64:	b083      	sub	sp, #12
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a6a:	bf00      	nop
 8006a6c:	370c      	adds	r7, #12
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr

08006a76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a76:	b480      	push	{r7}
 8006a78:	b083      	sub	sp, #12
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a7e:	bf00      	nop
 8006a80:	370c      	adds	r7, #12
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr

08006a8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a8a:	b480      	push	{r7}
 8006a8c:	b083      	sub	sp, #12
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a92:	bf00      	nop
 8006a94:	370c      	adds	r7, #12
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr

08006a9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a9e:	b480      	push	{r7}
 8006aa0:	b083      	sub	sp, #12
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006aa6:	bf00      	nop
 8006aa8:	370c      	adds	r7, #12
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr
	...

08006ab4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b085      	sub	sp, #20
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4a40      	ldr	r2, [pc, #256]	; (8006bc8 <TIM_Base_SetConfig+0x114>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d013      	beq.n	8006af4 <TIM_Base_SetConfig+0x40>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ad2:	d00f      	beq.n	8006af4 <TIM_Base_SetConfig+0x40>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	4a3d      	ldr	r2, [pc, #244]	; (8006bcc <TIM_Base_SetConfig+0x118>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d00b      	beq.n	8006af4 <TIM_Base_SetConfig+0x40>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4a3c      	ldr	r2, [pc, #240]	; (8006bd0 <TIM_Base_SetConfig+0x11c>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d007      	beq.n	8006af4 <TIM_Base_SetConfig+0x40>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4a3b      	ldr	r2, [pc, #236]	; (8006bd4 <TIM_Base_SetConfig+0x120>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d003      	beq.n	8006af4 <TIM_Base_SetConfig+0x40>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	4a3a      	ldr	r2, [pc, #232]	; (8006bd8 <TIM_Base_SetConfig+0x124>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d108      	bne.n	8006b06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006afa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	68fa      	ldr	r2, [r7, #12]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	4a2f      	ldr	r2, [pc, #188]	; (8006bc8 <TIM_Base_SetConfig+0x114>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d02b      	beq.n	8006b66 <TIM_Base_SetConfig+0xb2>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b14:	d027      	beq.n	8006b66 <TIM_Base_SetConfig+0xb2>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	4a2c      	ldr	r2, [pc, #176]	; (8006bcc <TIM_Base_SetConfig+0x118>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d023      	beq.n	8006b66 <TIM_Base_SetConfig+0xb2>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4a2b      	ldr	r2, [pc, #172]	; (8006bd0 <TIM_Base_SetConfig+0x11c>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d01f      	beq.n	8006b66 <TIM_Base_SetConfig+0xb2>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4a2a      	ldr	r2, [pc, #168]	; (8006bd4 <TIM_Base_SetConfig+0x120>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d01b      	beq.n	8006b66 <TIM_Base_SetConfig+0xb2>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	4a29      	ldr	r2, [pc, #164]	; (8006bd8 <TIM_Base_SetConfig+0x124>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d017      	beq.n	8006b66 <TIM_Base_SetConfig+0xb2>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a28      	ldr	r2, [pc, #160]	; (8006bdc <TIM_Base_SetConfig+0x128>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d013      	beq.n	8006b66 <TIM_Base_SetConfig+0xb2>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a27      	ldr	r2, [pc, #156]	; (8006be0 <TIM_Base_SetConfig+0x12c>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d00f      	beq.n	8006b66 <TIM_Base_SetConfig+0xb2>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4a26      	ldr	r2, [pc, #152]	; (8006be4 <TIM_Base_SetConfig+0x130>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d00b      	beq.n	8006b66 <TIM_Base_SetConfig+0xb2>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a25      	ldr	r2, [pc, #148]	; (8006be8 <TIM_Base_SetConfig+0x134>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d007      	beq.n	8006b66 <TIM_Base_SetConfig+0xb2>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a24      	ldr	r2, [pc, #144]	; (8006bec <TIM_Base_SetConfig+0x138>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d003      	beq.n	8006b66 <TIM_Base_SetConfig+0xb2>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a23      	ldr	r2, [pc, #140]	; (8006bf0 <TIM_Base_SetConfig+0x13c>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d108      	bne.n	8006b78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	68db      	ldr	r3, [r3, #12]
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	4313      	orrs	r3, r2
 8006b76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	695b      	ldr	r3, [r3, #20]
 8006b82:	4313      	orrs	r3, r2
 8006b84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	68fa      	ldr	r2, [r7, #12]
 8006b8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	689a      	ldr	r2, [r3, #8]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4a0a      	ldr	r2, [pc, #40]	; (8006bc8 <TIM_Base_SetConfig+0x114>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d003      	beq.n	8006bac <TIM_Base_SetConfig+0xf8>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4a0c      	ldr	r2, [pc, #48]	; (8006bd8 <TIM_Base_SetConfig+0x124>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d103      	bne.n	8006bb4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	691a      	ldr	r2, [r3, #16]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	615a      	str	r2, [r3, #20]
}
 8006bba:	bf00      	nop
 8006bbc:	3714      	adds	r7, #20
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr
 8006bc6:	bf00      	nop
 8006bc8:	40010000 	.word	0x40010000
 8006bcc:	40000400 	.word	0x40000400
 8006bd0:	40000800 	.word	0x40000800
 8006bd4:	40000c00 	.word	0x40000c00
 8006bd8:	40010400 	.word	0x40010400
 8006bdc:	40014000 	.word	0x40014000
 8006be0:	40014400 	.word	0x40014400
 8006be4:	40014800 	.word	0x40014800
 8006be8:	40001800 	.word	0x40001800
 8006bec:	40001c00 	.word	0x40001c00
 8006bf0:	40002000 	.word	0x40002000

08006bf4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b087      	sub	sp, #28
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a1b      	ldr	r3, [r3, #32]
 8006c02:	f023 0201 	bic.w	r2, r3, #1
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6a1b      	ldr	r3, [r3, #32]
 8006c0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	699b      	ldr	r3, [r3, #24]
 8006c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f023 0303 	bic.w	r3, r3, #3
 8006c2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	68fa      	ldr	r2, [r7, #12]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	f023 0302 	bic.w	r3, r3, #2
 8006c3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	697a      	ldr	r2, [r7, #20]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	4a20      	ldr	r2, [pc, #128]	; (8006ccc <TIM_OC1_SetConfig+0xd8>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d003      	beq.n	8006c58 <TIM_OC1_SetConfig+0x64>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	4a1f      	ldr	r2, [pc, #124]	; (8006cd0 <TIM_OC1_SetConfig+0xdc>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d10c      	bne.n	8006c72 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	f023 0308 	bic.w	r3, r3, #8
 8006c5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	697a      	ldr	r2, [r7, #20]
 8006c66:	4313      	orrs	r3, r2
 8006c68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	f023 0304 	bic.w	r3, r3, #4
 8006c70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4a15      	ldr	r2, [pc, #84]	; (8006ccc <TIM_OC1_SetConfig+0xd8>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d003      	beq.n	8006c82 <TIM_OC1_SetConfig+0x8e>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a14      	ldr	r2, [pc, #80]	; (8006cd0 <TIM_OC1_SetConfig+0xdc>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d111      	bne.n	8006ca6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	695b      	ldr	r3, [r3, #20]
 8006c96:	693a      	ldr	r2, [r7, #16]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	699b      	ldr	r3, [r3, #24]
 8006ca0:	693a      	ldr	r2, [r7, #16]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	693a      	ldr	r2, [r7, #16]
 8006caa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	68fa      	ldr	r2, [r7, #12]
 8006cb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	685a      	ldr	r2, [r3, #4]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	697a      	ldr	r2, [r7, #20]
 8006cbe:	621a      	str	r2, [r3, #32]
}
 8006cc0:	bf00      	nop
 8006cc2:	371c      	adds	r7, #28
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr
 8006ccc:	40010000 	.word	0x40010000
 8006cd0:	40010400 	.word	0x40010400

08006cd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b087      	sub	sp, #28
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a1b      	ldr	r3, [r3, #32]
 8006ce2:	f023 0210 	bic.w	r2, r3, #16
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a1b      	ldr	r3, [r3, #32]
 8006cee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	699b      	ldr	r3, [r3, #24]
 8006cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	021b      	lsls	r3, r3, #8
 8006d12:	68fa      	ldr	r2, [r7, #12]
 8006d14:	4313      	orrs	r3, r2
 8006d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	f023 0320 	bic.w	r3, r3, #32
 8006d1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	011b      	lsls	r3, r3, #4
 8006d26:	697a      	ldr	r2, [r7, #20]
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4a22      	ldr	r2, [pc, #136]	; (8006db8 <TIM_OC2_SetConfig+0xe4>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d003      	beq.n	8006d3c <TIM_OC2_SetConfig+0x68>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a21      	ldr	r2, [pc, #132]	; (8006dbc <TIM_OC2_SetConfig+0xe8>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d10d      	bne.n	8006d58 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	68db      	ldr	r3, [r3, #12]
 8006d48:	011b      	lsls	r3, r3, #4
 8006d4a:	697a      	ldr	r2, [r7, #20]
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	4a17      	ldr	r2, [pc, #92]	; (8006db8 <TIM_OC2_SetConfig+0xe4>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d003      	beq.n	8006d68 <TIM_OC2_SetConfig+0x94>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a16      	ldr	r2, [pc, #88]	; (8006dbc <TIM_OC2_SetConfig+0xe8>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d113      	bne.n	8006d90 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	695b      	ldr	r3, [r3, #20]
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	693a      	ldr	r2, [r7, #16]
 8006d80:	4313      	orrs	r3, r2
 8006d82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	699b      	ldr	r3, [r3, #24]
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	693a      	ldr	r2, [r7, #16]
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	693a      	ldr	r2, [r7, #16]
 8006d94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	68fa      	ldr	r2, [r7, #12]
 8006d9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	685a      	ldr	r2, [r3, #4]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	697a      	ldr	r2, [r7, #20]
 8006da8:	621a      	str	r2, [r3, #32]
}
 8006daa:	bf00      	nop
 8006dac:	371c      	adds	r7, #28
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr
 8006db6:	bf00      	nop
 8006db8:	40010000 	.word	0x40010000
 8006dbc:	40010400 	.word	0x40010400

08006dc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b087      	sub	sp, #28
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6a1b      	ldr	r3, [r3, #32]
 8006dce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6a1b      	ldr	r3, [r3, #32]
 8006dda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	69db      	ldr	r3, [r3, #28]
 8006de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f023 0303 	bic.w	r3, r3, #3
 8006df6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	68fa      	ldr	r2, [r7, #12]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	021b      	lsls	r3, r3, #8
 8006e10:	697a      	ldr	r2, [r7, #20]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	4a21      	ldr	r2, [pc, #132]	; (8006ea0 <TIM_OC3_SetConfig+0xe0>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d003      	beq.n	8006e26 <TIM_OC3_SetConfig+0x66>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4a20      	ldr	r2, [pc, #128]	; (8006ea4 <TIM_OC3_SetConfig+0xe4>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d10d      	bne.n	8006e42 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	021b      	lsls	r3, r3, #8
 8006e34:	697a      	ldr	r2, [r7, #20]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a16      	ldr	r2, [pc, #88]	; (8006ea0 <TIM_OC3_SetConfig+0xe0>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d003      	beq.n	8006e52 <TIM_OC3_SetConfig+0x92>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4a15      	ldr	r2, [pc, #84]	; (8006ea4 <TIM_OC3_SetConfig+0xe4>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d113      	bne.n	8006e7a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	695b      	ldr	r3, [r3, #20]
 8006e66:	011b      	lsls	r3, r3, #4
 8006e68:	693a      	ldr	r2, [r7, #16]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	699b      	ldr	r3, [r3, #24]
 8006e72:	011b      	lsls	r3, r3, #4
 8006e74:	693a      	ldr	r2, [r7, #16]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	693a      	ldr	r2, [r7, #16]
 8006e7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	68fa      	ldr	r2, [r7, #12]
 8006e84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	685a      	ldr	r2, [r3, #4]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	697a      	ldr	r2, [r7, #20]
 8006e92:	621a      	str	r2, [r3, #32]
}
 8006e94:	bf00      	nop
 8006e96:	371c      	adds	r7, #28
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr
 8006ea0:	40010000 	.word	0x40010000
 8006ea4:	40010400 	.word	0x40010400

08006ea8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b087      	sub	sp, #28
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a1b      	ldr	r3, [r3, #32]
 8006eb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a1b      	ldr	r3, [r3, #32]
 8006ec2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	69db      	ldr	r3, [r3, #28]
 8006ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ede:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	021b      	lsls	r3, r3, #8
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ef2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	031b      	lsls	r3, r3, #12
 8006efa:	693a      	ldr	r2, [r7, #16]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	4a12      	ldr	r2, [pc, #72]	; (8006f4c <TIM_OC4_SetConfig+0xa4>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d003      	beq.n	8006f10 <TIM_OC4_SetConfig+0x68>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	4a11      	ldr	r2, [pc, #68]	; (8006f50 <TIM_OC4_SetConfig+0xa8>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d109      	bne.n	8006f24 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	695b      	ldr	r3, [r3, #20]
 8006f1c:	019b      	lsls	r3, r3, #6
 8006f1e:	697a      	ldr	r2, [r7, #20]
 8006f20:	4313      	orrs	r3, r2
 8006f22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	697a      	ldr	r2, [r7, #20]
 8006f28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	68fa      	ldr	r2, [r7, #12]
 8006f2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	685a      	ldr	r2, [r3, #4]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	693a      	ldr	r2, [r7, #16]
 8006f3c:	621a      	str	r2, [r3, #32]
}
 8006f3e:	bf00      	nop
 8006f40:	371c      	adds	r7, #28
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr
 8006f4a:	bf00      	nop
 8006f4c:	40010000 	.word	0x40010000
 8006f50:	40010400 	.word	0x40010400

08006f54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b087      	sub	sp, #28
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	60b9      	str	r1, [r7, #8]
 8006f5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	6a1b      	ldr	r3, [r3, #32]
 8006f64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	6a1b      	ldr	r3, [r3, #32]
 8006f6a:	f023 0201 	bic.w	r2, r3, #1
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	699b      	ldr	r3, [r3, #24]
 8006f76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	011b      	lsls	r3, r3, #4
 8006f84:	693a      	ldr	r2, [r7, #16]
 8006f86:	4313      	orrs	r3, r2
 8006f88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	f023 030a 	bic.w	r3, r3, #10
 8006f90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f92:	697a      	ldr	r2, [r7, #20]
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	4313      	orrs	r3, r2
 8006f98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	693a      	ldr	r2, [r7, #16]
 8006f9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	697a      	ldr	r2, [r7, #20]
 8006fa4:	621a      	str	r2, [r3, #32]
}
 8006fa6:	bf00      	nop
 8006fa8:	371c      	adds	r7, #28
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr

08006fb2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fb2:	b480      	push	{r7}
 8006fb4:	b087      	sub	sp, #28
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	60f8      	str	r0, [r7, #12]
 8006fba:	60b9      	str	r1, [r7, #8]
 8006fbc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	6a1b      	ldr	r3, [r3, #32]
 8006fc2:	f023 0210 	bic.w	r2, r3, #16
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	699b      	ldr	r3, [r3, #24]
 8006fce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	6a1b      	ldr	r3, [r3, #32]
 8006fd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006fdc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	031b      	lsls	r3, r3, #12
 8006fe2:	697a      	ldr	r2, [r7, #20]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006fee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	011b      	lsls	r3, r3, #4
 8006ff4:	693a      	ldr	r2, [r7, #16]
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	697a      	ldr	r2, [r7, #20]
 8006ffe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	693a      	ldr	r2, [r7, #16]
 8007004:	621a      	str	r2, [r3, #32]
}
 8007006:	bf00      	nop
 8007008:	371c      	adds	r7, #28
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr

08007012 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007012:	b480      	push	{r7}
 8007014:	b085      	sub	sp, #20
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
 800701a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007028:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800702a:	683a      	ldr	r2, [r7, #0]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	4313      	orrs	r3, r2
 8007030:	f043 0307 	orr.w	r3, r3, #7
 8007034:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	68fa      	ldr	r2, [r7, #12]
 800703a:	609a      	str	r2, [r3, #8]
}
 800703c:	bf00      	nop
 800703e:	3714      	adds	r7, #20
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007048:	b480      	push	{r7}
 800704a:	b087      	sub	sp, #28
 800704c:	af00      	add	r7, sp, #0
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	607a      	str	r2, [r7, #4]
 8007054:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007062:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	021a      	lsls	r2, r3, #8
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	431a      	orrs	r2, r3
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	4313      	orrs	r3, r2
 8007070:	697a      	ldr	r2, [r7, #20]
 8007072:	4313      	orrs	r3, r2
 8007074:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	697a      	ldr	r2, [r7, #20]
 800707a:	609a      	str	r2, [r3, #8]
}
 800707c:	bf00      	nop
 800707e:	371c      	adds	r7, #28
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007088:	b480      	push	{r7}
 800708a:	b087      	sub	sp, #28
 800708c:	af00      	add	r7, sp, #0
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	f003 031f 	and.w	r3, r3, #31
 800709a:	2201      	movs	r2, #1
 800709c:	fa02 f303 	lsl.w	r3, r2, r3
 80070a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	6a1a      	ldr	r2, [r3, #32]
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	43db      	mvns	r3, r3
 80070aa:	401a      	ands	r2, r3
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	6a1a      	ldr	r2, [r3, #32]
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	f003 031f 	and.w	r3, r3, #31
 80070ba:	6879      	ldr	r1, [r7, #4]
 80070bc:	fa01 f303 	lsl.w	r3, r1, r3
 80070c0:	431a      	orrs	r2, r3
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	621a      	str	r2, [r3, #32]
}
 80070c6:	bf00      	nop
 80070c8:	371c      	adds	r7, #28
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr
	...

080070d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b085      	sub	sp, #20
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d101      	bne.n	80070ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80070e8:	2302      	movs	r3, #2
 80070ea:	e05a      	b.n	80071a2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2202      	movs	r2, #2
 80070f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007112:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	68fa      	ldr	r2, [r7, #12]
 800711a:	4313      	orrs	r3, r2
 800711c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	68fa      	ldr	r2, [r7, #12]
 8007124:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a21      	ldr	r2, [pc, #132]	; (80071b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d022      	beq.n	8007176 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007138:	d01d      	beq.n	8007176 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a1d      	ldr	r2, [pc, #116]	; (80071b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d018      	beq.n	8007176 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a1b      	ldr	r2, [pc, #108]	; (80071b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d013      	beq.n	8007176 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a1a      	ldr	r2, [pc, #104]	; (80071bc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d00e      	beq.n	8007176 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a18      	ldr	r2, [pc, #96]	; (80071c0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d009      	beq.n	8007176 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a17      	ldr	r2, [pc, #92]	; (80071c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d004      	beq.n	8007176 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a15      	ldr	r2, [pc, #84]	; (80071c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d10c      	bne.n	8007190 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800717c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	68ba      	ldr	r2, [r7, #8]
 8007184:	4313      	orrs	r3, r2
 8007186:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	68ba      	ldr	r2, [r7, #8]
 800718e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2200      	movs	r2, #0
 800719c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071a0:	2300      	movs	r3, #0
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3714      	adds	r7, #20
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop
 80071b0:	40010000 	.word	0x40010000
 80071b4:	40000400 	.word	0x40000400
 80071b8:	40000800 	.word	0x40000800
 80071bc:	40000c00 	.word	0x40000c00
 80071c0:	40010400 	.word	0x40010400
 80071c4:	40014000 	.word	0x40014000
 80071c8:	40001800 	.word	0x40001800

080071cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80071d4:	bf00      	nop
 80071d6:	370c      	adds	r7, #12
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b083      	sub	sp, #12
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80071e8:	bf00      	nop
 80071ea:	370c      	adds	r7, #12
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr

080071f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b082      	sub	sp, #8
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d101      	bne.n	8007206 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	e03f      	b.n	8007286 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800720c:	b2db      	uxtb	r3, r3
 800720e:	2b00      	cmp	r3, #0
 8007210:	d106      	bne.n	8007220 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2200      	movs	r2, #0
 8007216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f7fb fb26 	bl	800286c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2224      	movs	r2, #36	; 0x24
 8007224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	68da      	ldr	r2, [r3, #12]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007236:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 f929 	bl	8007490 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	691a      	ldr	r2, [r3, #16]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800724c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	695a      	ldr	r2, [r3, #20]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800725c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	68da      	ldr	r2, [r3, #12]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800726c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2220      	movs	r2, #32
 8007278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2220      	movs	r2, #32
 8007280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007284:	2300      	movs	r3, #0
}
 8007286:	4618      	mov	r0, r3
 8007288:	3708      	adds	r7, #8
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}

0800728e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800728e:	b580      	push	{r7, lr}
 8007290:	b08a      	sub	sp, #40	; 0x28
 8007292:	af02      	add	r7, sp, #8
 8007294:	60f8      	str	r0, [r7, #12]
 8007296:	60b9      	str	r1, [r7, #8]
 8007298:	603b      	str	r3, [r7, #0]
 800729a:	4613      	mov	r3, r2
 800729c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800729e:	2300      	movs	r3, #0
 80072a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	2b20      	cmp	r3, #32
 80072ac:	d17c      	bne.n	80073a8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d002      	beq.n	80072ba <HAL_UART_Transmit+0x2c>
 80072b4:	88fb      	ldrh	r3, [r7, #6]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d101      	bne.n	80072be <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	e075      	b.n	80073aa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d101      	bne.n	80072cc <HAL_UART_Transmit+0x3e>
 80072c8:	2302      	movs	r3, #2
 80072ca:	e06e      	b.n	80073aa <HAL_UART_Transmit+0x11c>
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2201      	movs	r2, #1
 80072d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2200      	movs	r2, #0
 80072d8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2221      	movs	r2, #33	; 0x21
 80072de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80072e2:	f7fb fe1d 	bl	8002f20 <HAL_GetTick>
 80072e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	88fa      	ldrh	r2, [r7, #6]
 80072ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	88fa      	ldrh	r2, [r7, #6]
 80072f2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072fc:	d108      	bne.n	8007310 <HAL_UART_Transmit+0x82>
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	691b      	ldr	r3, [r3, #16]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d104      	bne.n	8007310 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007306:	2300      	movs	r3, #0
 8007308:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	61bb      	str	r3, [r7, #24]
 800730e:	e003      	b.n	8007318 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007314:	2300      	movs	r3, #0
 8007316:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2200      	movs	r2, #0
 800731c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007320:	e02a      	b.n	8007378 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	9300      	str	r3, [sp, #0]
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	2200      	movs	r2, #0
 800732a:	2180      	movs	r1, #128	; 0x80
 800732c:	68f8      	ldr	r0, [r7, #12]
 800732e:	f000 f840 	bl	80073b2 <UART_WaitOnFlagUntilTimeout>
 8007332:	4603      	mov	r3, r0
 8007334:	2b00      	cmp	r3, #0
 8007336:	d001      	beq.n	800733c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007338:	2303      	movs	r3, #3
 800733a:	e036      	b.n	80073aa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d10b      	bne.n	800735a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007342:	69bb      	ldr	r3, [r7, #24]
 8007344:	881b      	ldrh	r3, [r3, #0]
 8007346:	461a      	mov	r2, r3
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007350:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007352:	69bb      	ldr	r3, [r7, #24]
 8007354:	3302      	adds	r3, #2
 8007356:	61bb      	str	r3, [r7, #24]
 8007358:	e007      	b.n	800736a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800735a:	69fb      	ldr	r3, [r7, #28]
 800735c:	781a      	ldrb	r2, [r3, #0]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	3301      	adds	r3, #1
 8007368:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800736e:	b29b      	uxth	r3, r3
 8007370:	3b01      	subs	r3, #1
 8007372:	b29a      	uxth	r2, r3
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800737c:	b29b      	uxth	r3, r3
 800737e:	2b00      	cmp	r3, #0
 8007380:	d1cf      	bne.n	8007322 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	9300      	str	r3, [sp, #0]
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	2200      	movs	r2, #0
 800738a:	2140      	movs	r1, #64	; 0x40
 800738c:	68f8      	ldr	r0, [r7, #12]
 800738e:	f000 f810 	bl	80073b2 <UART_WaitOnFlagUntilTimeout>
 8007392:	4603      	mov	r3, r0
 8007394:	2b00      	cmp	r3, #0
 8007396:	d001      	beq.n	800739c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007398:	2303      	movs	r3, #3
 800739a:	e006      	b.n	80073aa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2220      	movs	r2, #32
 80073a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80073a4:	2300      	movs	r3, #0
 80073a6:	e000      	b.n	80073aa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80073a8:	2302      	movs	r3, #2
  }
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3720      	adds	r7, #32
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}

080073b2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80073b2:	b580      	push	{r7, lr}
 80073b4:	b090      	sub	sp, #64	; 0x40
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	60f8      	str	r0, [r7, #12]
 80073ba:	60b9      	str	r1, [r7, #8]
 80073bc:	603b      	str	r3, [r7, #0]
 80073be:	4613      	mov	r3, r2
 80073c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073c2:	e050      	b.n	8007466 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ca:	d04c      	beq.n	8007466 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80073cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d007      	beq.n	80073e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80073d2:	f7fb fda5 	bl	8002f20 <HAL_GetTick>
 80073d6:	4602      	mov	r2, r0
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	1ad3      	subs	r3, r2, r3
 80073dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073de:	429a      	cmp	r2, r3
 80073e0:	d241      	bcs.n	8007466 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	330c      	adds	r3, #12
 80073e8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ec:	e853 3f00 	ldrex	r3, [r3]
 80073f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80073f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	330c      	adds	r3, #12
 8007400:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007402:	637a      	str	r2, [r7, #52]	; 0x34
 8007404:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007406:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007408:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800740a:	e841 2300 	strex	r3, r2, [r1]
 800740e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007412:	2b00      	cmp	r3, #0
 8007414:	d1e5      	bne.n	80073e2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	3314      	adds	r3, #20
 800741c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	e853 3f00 	ldrex	r3, [r3]
 8007424:	613b      	str	r3, [r7, #16]
   return(result);
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	f023 0301 	bic.w	r3, r3, #1
 800742c:	63bb      	str	r3, [r7, #56]	; 0x38
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	3314      	adds	r3, #20
 8007434:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007436:	623a      	str	r2, [r7, #32]
 8007438:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743a:	69f9      	ldr	r1, [r7, #28]
 800743c:	6a3a      	ldr	r2, [r7, #32]
 800743e:	e841 2300 	strex	r3, r2, [r1]
 8007442:	61bb      	str	r3, [r7, #24]
   return(result);
 8007444:	69bb      	ldr	r3, [r7, #24]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d1e5      	bne.n	8007416 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2220      	movs	r2, #32
 800744e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2220      	movs	r2, #32
 8007456:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2200      	movs	r2, #0
 800745e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007462:	2303      	movs	r3, #3
 8007464:	e00f      	b.n	8007486 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	4013      	ands	r3, r2
 8007470:	68ba      	ldr	r2, [r7, #8]
 8007472:	429a      	cmp	r2, r3
 8007474:	bf0c      	ite	eq
 8007476:	2301      	moveq	r3, #1
 8007478:	2300      	movne	r3, #0
 800747a:	b2db      	uxtb	r3, r3
 800747c:	461a      	mov	r2, r3
 800747e:	79fb      	ldrb	r3, [r7, #7]
 8007480:	429a      	cmp	r2, r3
 8007482:	d09f      	beq.n	80073c4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007484:	2300      	movs	r3, #0
}
 8007486:	4618      	mov	r0, r3
 8007488:	3740      	adds	r7, #64	; 0x40
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
	...

08007490 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007490:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007494:	b0c0      	sub	sp, #256	; 0x100
 8007496:	af00      	add	r7, sp, #0
 8007498:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800749c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	691b      	ldr	r3, [r3, #16]
 80074a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80074a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074ac:	68d9      	ldr	r1, [r3, #12]
 80074ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	ea40 0301 	orr.w	r3, r0, r1
 80074b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80074ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074be:	689a      	ldr	r2, [r3, #8]
 80074c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074c4:	691b      	ldr	r3, [r3, #16]
 80074c6:	431a      	orrs	r2, r3
 80074c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074cc:	695b      	ldr	r3, [r3, #20]
 80074ce:	431a      	orrs	r2, r3
 80074d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074d4:	69db      	ldr	r3, [r3, #28]
 80074d6:	4313      	orrs	r3, r2
 80074d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80074dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	68db      	ldr	r3, [r3, #12]
 80074e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80074e8:	f021 010c 	bic.w	r1, r1, #12
 80074ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80074f6:	430b      	orrs	r3, r1
 80074f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80074fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	695b      	ldr	r3, [r3, #20]
 8007502:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800750a:	6999      	ldr	r1, [r3, #24]
 800750c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	ea40 0301 	orr.w	r3, r0, r1
 8007516:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800751c:	681a      	ldr	r2, [r3, #0]
 800751e:	4b8f      	ldr	r3, [pc, #572]	; (800775c <UART_SetConfig+0x2cc>)
 8007520:	429a      	cmp	r2, r3
 8007522:	d005      	beq.n	8007530 <UART_SetConfig+0xa0>
 8007524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	4b8d      	ldr	r3, [pc, #564]	; (8007760 <UART_SetConfig+0x2d0>)
 800752c:	429a      	cmp	r2, r3
 800752e:	d104      	bne.n	800753a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007530:	f7fe f86a 	bl	8005608 <HAL_RCC_GetPCLK2Freq>
 8007534:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007538:	e003      	b.n	8007542 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800753a:	f7fe f851 	bl	80055e0 <HAL_RCC_GetPCLK1Freq>
 800753e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007546:	69db      	ldr	r3, [r3, #28]
 8007548:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800754c:	f040 810c 	bne.w	8007768 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007550:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007554:	2200      	movs	r2, #0
 8007556:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800755a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800755e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007562:	4622      	mov	r2, r4
 8007564:	462b      	mov	r3, r5
 8007566:	1891      	adds	r1, r2, r2
 8007568:	65b9      	str	r1, [r7, #88]	; 0x58
 800756a:	415b      	adcs	r3, r3
 800756c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800756e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007572:	4621      	mov	r1, r4
 8007574:	eb12 0801 	adds.w	r8, r2, r1
 8007578:	4629      	mov	r1, r5
 800757a:	eb43 0901 	adc.w	r9, r3, r1
 800757e:	f04f 0200 	mov.w	r2, #0
 8007582:	f04f 0300 	mov.w	r3, #0
 8007586:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800758a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800758e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007592:	4690      	mov	r8, r2
 8007594:	4699      	mov	r9, r3
 8007596:	4623      	mov	r3, r4
 8007598:	eb18 0303 	adds.w	r3, r8, r3
 800759c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80075a0:	462b      	mov	r3, r5
 80075a2:	eb49 0303 	adc.w	r3, r9, r3
 80075a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80075aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80075b6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80075ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80075be:	460b      	mov	r3, r1
 80075c0:	18db      	adds	r3, r3, r3
 80075c2:	653b      	str	r3, [r7, #80]	; 0x50
 80075c4:	4613      	mov	r3, r2
 80075c6:	eb42 0303 	adc.w	r3, r2, r3
 80075ca:	657b      	str	r3, [r7, #84]	; 0x54
 80075cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80075d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80075d4:	f7f9 fa9a 	bl	8000b0c <__aeabi_uldivmod>
 80075d8:	4602      	mov	r2, r0
 80075da:	460b      	mov	r3, r1
 80075dc:	4b61      	ldr	r3, [pc, #388]	; (8007764 <UART_SetConfig+0x2d4>)
 80075de:	fba3 2302 	umull	r2, r3, r3, r2
 80075e2:	095b      	lsrs	r3, r3, #5
 80075e4:	011c      	lsls	r4, r3, #4
 80075e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075ea:	2200      	movs	r2, #0
 80075ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80075f0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80075f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80075f8:	4642      	mov	r2, r8
 80075fa:	464b      	mov	r3, r9
 80075fc:	1891      	adds	r1, r2, r2
 80075fe:	64b9      	str	r1, [r7, #72]	; 0x48
 8007600:	415b      	adcs	r3, r3
 8007602:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007604:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007608:	4641      	mov	r1, r8
 800760a:	eb12 0a01 	adds.w	sl, r2, r1
 800760e:	4649      	mov	r1, r9
 8007610:	eb43 0b01 	adc.w	fp, r3, r1
 8007614:	f04f 0200 	mov.w	r2, #0
 8007618:	f04f 0300 	mov.w	r3, #0
 800761c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007620:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007624:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007628:	4692      	mov	sl, r2
 800762a:	469b      	mov	fp, r3
 800762c:	4643      	mov	r3, r8
 800762e:	eb1a 0303 	adds.w	r3, sl, r3
 8007632:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007636:	464b      	mov	r3, r9
 8007638:	eb4b 0303 	adc.w	r3, fp, r3
 800763c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800764c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007650:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007654:	460b      	mov	r3, r1
 8007656:	18db      	adds	r3, r3, r3
 8007658:	643b      	str	r3, [r7, #64]	; 0x40
 800765a:	4613      	mov	r3, r2
 800765c:	eb42 0303 	adc.w	r3, r2, r3
 8007660:	647b      	str	r3, [r7, #68]	; 0x44
 8007662:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007666:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800766a:	f7f9 fa4f 	bl	8000b0c <__aeabi_uldivmod>
 800766e:	4602      	mov	r2, r0
 8007670:	460b      	mov	r3, r1
 8007672:	4611      	mov	r1, r2
 8007674:	4b3b      	ldr	r3, [pc, #236]	; (8007764 <UART_SetConfig+0x2d4>)
 8007676:	fba3 2301 	umull	r2, r3, r3, r1
 800767a:	095b      	lsrs	r3, r3, #5
 800767c:	2264      	movs	r2, #100	; 0x64
 800767e:	fb02 f303 	mul.w	r3, r2, r3
 8007682:	1acb      	subs	r3, r1, r3
 8007684:	00db      	lsls	r3, r3, #3
 8007686:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800768a:	4b36      	ldr	r3, [pc, #216]	; (8007764 <UART_SetConfig+0x2d4>)
 800768c:	fba3 2302 	umull	r2, r3, r3, r2
 8007690:	095b      	lsrs	r3, r3, #5
 8007692:	005b      	lsls	r3, r3, #1
 8007694:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007698:	441c      	add	r4, r3
 800769a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800769e:	2200      	movs	r2, #0
 80076a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80076a4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80076a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80076ac:	4642      	mov	r2, r8
 80076ae:	464b      	mov	r3, r9
 80076b0:	1891      	adds	r1, r2, r2
 80076b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80076b4:	415b      	adcs	r3, r3
 80076b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80076bc:	4641      	mov	r1, r8
 80076be:	1851      	adds	r1, r2, r1
 80076c0:	6339      	str	r1, [r7, #48]	; 0x30
 80076c2:	4649      	mov	r1, r9
 80076c4:	414b      	adcs	r3, r1
 80076c6:	637b      	str	r3, [r7, #52]	; 0x34
 80076c8:	f04f 0200 	mov.w	r2, #0
 80076cc:	f04f 0300 	mov.w	r3, #0
 80076d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80076d4:	4659      	mov	r1, fp
 80076d6:	00cb      	lsls	r3, r1, #3
 80076d8:	4651      	mov	r1, sl
 80076da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80076de:	4651      	mov	r1, sl
 80076e0:	00ca      	lsls	r2, r1, #3
 80076e2:	4610      	mov	r0, r2
 80076e4:	4619      	mov	r1, r3
 80076e6:	4603      	mov	r3, r0
 80076e8:	4642      	mov	r2, r8
 80076ea:	189b      	adds	r3, r3, r2
 80076ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80076f0:	464b      	mov	r3, r9
 80076f2:	460a      	mov	r2, r1
 80076f4:	eb42 0303 	adc.w	r3, r2, r3
 80076f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80076fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	2200      	movs	r2, #0
 8007704:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007708:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800770c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007710:	460b      	mov	r3, r1
 8007712:	18db      	adds	r3, r3, r3
 8007714:	62bb      	str	r3, [r7, #40]	; 0x28
 8007716:	4613      	mov	r3, r2
 8007718:	eb42 0303 	adc.w	r3, r2, r3
 800771c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800771e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007722:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007726:	f7f9 f9f1 	bl	8000b0c <__aeabi_uldivmod>
 800772a:	4602      	mov	r2, r0
 800772c:	460b      	mov	r3, r1
 800772e:	4b0d      	ldr	r3, [pc, #52]	; (8007764 <UART_SetConfig+0x2d4>)
 8007730:	fba3 1302 	umull	r1, r3, r3, r2
 8007734:	095b      	lsrs	r3, r3, #5
 8007736:	2164      	movs	r1, #100	; 0x64
 8007738:	fb01 f303 	mul.w	r3, r1, r3
 800773c:	1ad3      	subs	r3, r2, r3
 800773e:	00db      	lsls	r3, r3, #3
 8007740:	3332      	adds	r3, #50	; 0x32
 8007742:	4a08      	ldr	r2, [pc, #32]	; (8007764 <UART_SetConfig+0x2d4>)
 8007744:	fba2 2303 	umull	r2, r3, r2, r3
 8007748:	095b      	lsrs	r3, r3, #5
 800774a:	f003 0207 	and.w	r2, r3, #7
 800774e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4422      	add	r2, r4
 8007756:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007758:	e105      	b.n	8007966 <UART_SetConfig+0x4d6>
 800775a:	bf00      	nop
 800775c:	40011000 	.word	0x40011000
 8007760:	40011400 	.word	0x40011400
 8007764:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007768:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800776c:	2200      	movs	r2, #0
 800776e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007772:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007776:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800777a:	4642      	mov	r2, r8
 800777c:	464b      	mov	r3, r9
 800777e:	1891      	adds	r1, r2, r2
 8007780:	6239      	str	r1, [r7, #32]
 8007782:	415b      	adcs	r3, r3
 8007784:	627b      	str	r3, [r7, #36]	; 0x24
 8007786:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800778a:	4641      	mov	r1, r8
 800778c:	1854      	adds	r4, r2, r1
 800778e:	4649      	mov	r1, r9
 8007790:	eb43 0501 	adc.w	r5, r3, r1
 8007794:	f04f 0200 	mov.w	r2, #0
 8007798:	f04f 0300 	mov.w	r3, #0
 800779c:	00eb      	lsls	r3, r5, #3
 800779e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80077a2:	00e2      	lsls	r2, r4, #3
 80077a4:	4614      	mov	r4, r2
 80077a6:	461d      	mov	r5, r3
 80077a8:	4643      	mov	r3, r8
 80077aa:	18e3      	adds	r3, r4, r3
 80077ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80077b0:	464b      	mov	r3, r9
 80077b2:	eb45 0303 	adc.w	r3, r5, r3
 80077b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80077ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	2200      	movs	r2, #0
 80077c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80077c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80077ca:	f04f 0200 	mov.w	r2, #0
 80077ce:	f04f 0300 	mov.w	r3, #0
 80077d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80077d6:	4629      	mov	r1, r5
 80077d8:	008b      	lsls	r3, r1, #2
 80077da:	4621      	mov	r1, r4
 80077dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80077e0:	4621      	mov	r1, r4
 80077e2:	008a      	lsls	r2, r1, #2
 80077e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80077e8:	f7f9 f990 	bl	8000b0c <__aeabi_uldivmod>
 80077ec:	4602      	mov	r2, r0
 80077ee:	460b      	mov	r3, r1
 80077f0:	4b60      	ldr	r3, [pc, #384]	; (8007974 <UART_SetConfig+0x4e4>)
 80077f2:	fba3 2302 	umull	r2, r3, r3, r2
 80077f6:	095b      	lsrs	r3, r3, #5
 80077f8:	011c      	lsls	r4, r3, #4
 80077fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077fe:	2200      	movs	r2, #0
 8007800:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007804:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007808:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800780c:	4642      	mov	r2, r8
 800780e:	464b      	mov	r3, r9
 8007810:	1891      	adds	r1, r2, r2
 8007812:	61b9      	str	r1, [r7, #24]
 8007814:	415b      	adcs	r3, r3
 8007816:	61fb      	str	r3, [r7, #28]
 8007818:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800781c:	4641      	mov	r1, r8
 800781e:	1851      	adds	r1, r2, r1
 8007820:	6139      	str	r1, [r7, #16]
 8007822:	4649      	mov	r1, r9
 8007824:	414b      	adcs	r3, r1
 8007826:	617b      	str	r3, [r7, #20]
 8007828:	f04f 0200 	mov.w	r2, #0
 800782c:	f04f 0300 	mov.w	r3, #0
 8007830:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007834:	4659      	mov	r1, fp
 8007836:	00cb      	lsls	r3, r1, #3
 8007838:	4651      	mov	r1, sl
 800783a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800783e:	4651      	mov	r1, sl
 8007840:	00ca      	lsls	r2, r1, #3
 8007842:	4610      	mov	r0, r2
 8007844:	4619      	mov	r1, r3
 8007846:	4603      	mov	r3, r0
 8007848:	4642      	mov	r2, r8
 800784a:	189b      	adds	r3, r3, r2
 800784c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007850:	464b      	mov	r3, r9
 8007852:	460a      	mov	r2, r1
 8007854:	eb42 0303 	adc.w	r3, r2, r3
 8007858:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800785c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	2200      	movs	r2, #0
 8007864:	67bb      	str	r3, [r7, #120]	; 0x78
 8007866:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007868:	f04f 0200 	mov.w	r2, #0
 800786c:	f04f 0300 	mov.w	r3, #0
 8007870:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007874:	4649      	mov	r1, r9
 8007876:	008b      	lsls	r3, r1, #2
 8007878:	4641      	mov	r1, r8
 800787a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800787e:	4641      	mov	r1, r8
 8007880:	008a      	lsls	r2, r1, #2
 8007882:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007886:	f7f9 f941 	bl	8000b0c <__aeabi_uldivmod>
 800788a:	4602      	mov	r2, r0
 800788c:	460b      	mov	r3, r1
 800788e:	4b39      	ldr	r3, [pc, #228]	; (8007974 <UART_SetConfig+0x4e4>)
 8007890:	fba3 1302 	umull	r1, r3, r3, r2
 8007894:	095b      	lsrs	r3, r3, #5
 8007896:	2164      	movs	r1, #100	; 0x64
 8007898:	fb01 f303 	mul.w	r3, r1, r3
 800789c:	1ad3      	subs	r3, r2, r3
 800789e:	011b      	lsls	r3, r3, #4
 80078a0:	3332      	adds	r3, #50	; 0x32
 80078a2:	4a34      	ldr	r2, [pc, #208]	; (8007974 <UART_SetConfig+0x4e4>)
 80078a4:	fba2 2303 	umull	r2, r3, r2, r3
 80078a8:	095b      	lsrs	r3, r3, #5
 80078aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80078ae:	441c      	add	r4, r3
 80078b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078b4:	2200      	movs	r2, #0
 80078b6:	673b      	str	r3, [r7, #112]	; 0x70
 80078b8:	677a      	str	r2, [r7, #116]	; 0x74
 80078ba:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80078be:	4642      	mov	r2, r8
 80078c0:	464b      	mov	r3, r9
 80078c2:	1891      	adds	r1, r2, r2
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	415b      	adcs	r3, r3
 80078c8:	60fb      	str	r3, [r7, #12]
 80078ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80078ce:	4641      	mov	r1, r8
 80078d0:	1851      	adds	r1, r2, r1
 80078d2:	6039      	str	r1, [r7, #0]
 80078d4:	4649      	mov	r1, r9
 80078d6:	414b      	adcs	r3, r1
 80078d8:	607b      	str	r3, [r7, #4]
 80078da:	f04f 0200 	mov.w	r2, #0
 80078de:	f04f 0300 	mov.w	r3, #0
 80078e2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80078e6:	4659      	mov	r1, fp
 80078e8:	00cb      	lsls	r3, r1, #3
 80078ea:	4651      	mov	r1, sl
 80078ec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80078f0:	4651      	mov	r1, sl
 80078f2:	00ca      	lsls	r2, r1, #3
 80078f4:	4610      	mov	r0, r2
 80078f6:	4619      	mov	r1, r3
 80078f8:	4603      	mov	r3, r0
 80078fa:	4642      	mov	r2, r8
 80078fc:	189b      	adds	r3, r3, r2
 80078fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8007900:	464b      	mov	r3, r9
 8007902:	460a      	mov	r2, r1
 8007904:	eb42 0303 	adc.w	r3, r2, r3
 8007908:	66fb      	str	r3, [r7, #108]	; 0x6c
 800790a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	663b      	str	r3, [r7, #96]	; 0x60
 8007914:	667a      	str	r2, [r7, #100]	; 0x64
 8007916:	f04f 0200 	mov.w	r2, #0
 800791a:	f04f 0300 	mov.w	r3, #0
 800791e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007922:	4649      	mov	r1, r9
 8007924:	008b      	lsls	r3, r1, #2
 8007926:	4641      	mov	r1, r8
 8007928:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800792c:	4641      	mov	r1, r8
 800792e:	008a      	lsls	r2, r1, #2
 8007930:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007934:	f7f9 f8ea 	bl	8000b0c <__aeabi_uldivmod>
 8007938:	4602      	mov	r2, r0
 800793a:	460b      	mov	r3, r1
 800793c:	4b0d      	ldr	r3, [pc, #52]	; (8007974 <UART_SetConfig+0x4e4>)
 800793e:	fba3 1302 	umull	r1, r3, r3, r2
 8007942:	095b      	lsrs	r3, r3, #5
 8007944:	2164      	movs	r1, #100	; 0x64
 8007946:	fb01 f303 	mul.w	r3, r1, r3
 800794a:	1ad3      	subs	r3, r2, r3
 800794c:	011b      	lsls	r3, r3, #4
 800794e:	3332      	adds	r3, #50	; 0x32
 8007950:	4a08      	ldr	r2, [pc, #32]	; (8007974 <UART_SetConfig+0x4e4>)
 8007952:	fba2 2303 	umull	r2, r3, r2, r3
 8007956:	095b      	lsrs	r3, r3, #5
 8007958:	f003 020f 	and.w	r2, r3, #15
 800795c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4422      	add	r2, r4
 8007964:	609a      	str	r2, [r3, #8]
}
 8007966:	bf00      	nop
 8007968:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800796c:	46bd      	mov	sp, r7
 800796e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007972:	bf00      	nop
 8007974:	51eb851f 	.word	0x51eb851f

08007978 <__errno>:
 8007978:	4b01      	ldr	r3, [pc, #4]	; (8007980 <__errno+0x8>)
 800797a:	6818      	ldr	r0, [r3, #0]
 800797c:	4770      	bx	lr
 800797e:	bf00      	nop
 8007980:	20000064 	.word	0x20000064

08007984 <__libc_init_array>:
 8007984:	b570      	push	{r4, r5, r6, lr}
 8007986:	4d0d      	ldr	r5, [pc, #52]	; (80079bc <__libc_init_array+0x38>)
 8007988:	4c0d      	ldr	r4, [pc, #52]	; (80079c0 <__libc_init_array+0x3c>)
 800798a:	1b64      	subs	r4, r4, r5
 800798c:	10a4      	asrs	r4, r4, #2
 800798e:	2600      	movs	r6, #0
 8007990:	42a6      	cmp	r6, r4
 8007992:	d109      	bne.n	80079a8 <__libc_init_array+0x24>
 8007994:	4d0b      	ldr	r5, [pc, #44]	; (80079c4 <__libc_init_array+0x40>)
 8007996:	4c0c      	ldr	r4, [pc, #48]	; (80079c8 <__libc_init_array+0x44>)
 8007998:	f000 fc8e 	bl	80082b8 <_init>
 800799c:	1b64      	subs	r4, r4, r5
 800799e:	10a4      	asrs	r4, r4, #2
 80079a0:	2600      	movs	r6, #0
 80079a2:	42a6      	cmp	r6, r4
 80079a4:	d105      	bne.n	80079b2 <__libc_init_array+0x2e>
 80079a6:	bd70      	pop	{r4, r5, r6, pc}
 80079a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80079ac:	4798      	blx	r3
 80079ae:	3601      	adds	r6, #1
 80079b0:	e7ee      	b.n	8007990 <__libc_init_array+0xc>
 80079b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80079b6:	4798      	blx	r3
 80079b8:	3601      	adds	r6, #1
 80079ba:	e7f2      	b.n	80079a2 <__libc_init_array+0x1e>
 80079bc:	08008450 	.word	0x08008450
 80079c0:	08008450 	.word	0x08008450
 80079c4:	08008450 	.word	0x08008450
 80079c8:	08008454 	.word	0x08008454

080079cc <memset>:
 80079cc:	4402      	add	r2, r0
 80079ce:	4603      	mov	r3, r0
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d100      	bne.n	80079d6 <memset+0xa>
 80079d4:	4770      	bx	lr
 80079d6:	f803 1b01 	strb.w	r1, [r3], #1
 80079da:	e7f9      	b.n	80079d0 <memset+0x4>

080079dc <siprintf>:
 80079dc:	b40e      	push	{r1, r2, r3}
 80079de:	b500      	push	{lr}
 80079e0:	b09c      	sub	sp, #112	; 0x70
 80079e2:	ab1d      	add	r3, sp, #116	; 0x74
 80079e4:	9002      	str	r0, [sp, #8]
 80079e6:	9006      	str	r0, [sp, #24]
 80079e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80079ec:	4809      	ldr	r0, [pc, #36]	; (8007a14 <siprintf+0x38>)
 80079ee:	9107      	str	r1, [sp, #28]
 80079f0:	9104      	str	r1, [sp, #16]
 80079f2:	4909      	ldr	r1, [pc, #36]	; (8007a18 <siprintf+0x3c>)
 80079f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80079f8:	9105      	str	r1, [sp, #20]
 80079fa:	6800      	ldr	r0, [r0, #0]
 80079fc:	9301      	str	r3, [sp, #4]
 80079fe:	a902      	add	r1, sp, #8
 8007a00:	f000 f868 	bl	8007ad4 <_svfiprintf_r>
 8007a04:	9b02      	ldr	r3, [sp, #8]
 8007a06:	2200      	movs	r2, #0
 8007a08:	701a      	strb	r2, [r3, #0]
 8007a0a:	b01c      	add	sp, #112	; 0x70
 8007a0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a10:	b003      	add	sp, #12
 8007a12:	4770      	bx	lr
 8007a14:	20000064 	.word	0x20000064
 8007a18:	ffff0208 	.word	0xffff0208

08007a1c <__ssputs_r>:
 8007a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a20:	688e      	ldr	r6, [r1, #8]
 8007a22:	429e      	cmp	r6, r3
 8007a24:	4682      	mov	sl, r0
 8007a26:	460c      	mov	r4, r1
 8007a28:	4690      	mov	r8, r2
 8007a2a:	461f      	mov	r7, r3
 8007a2c:	d838      	bhi.n	8007aa0 <__ssputs_r+0x84>
 8007a2e:	898a      	ldrh	r2, [r1, #12]
 8007a30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007a34:	d032      	beq.n	8007a9c <__ssputs_r+0x80>
 8007a36:	6825      	ldr	r5, [r4, #0]
 8007a38:	6909      	ldr	r1, [r1, #16]
 8007a3a:	eba5 0901 	sub.w	r9, r5, r1
 8007a3e:	6965      	ldr	r5, [r4, #20]
 8007a40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a48:	3301      	adds	r3, #1
 8007a4a:	444b      	add	r3, r9
 8007a4c:	106d      	asrs	r5, r5, #1
 8007a4e:	429d      	cmp	r5, r3
 8007a50:	bf38      	it	cc
 8007a52:	461d      	movcc	r5, r3
 8007a54:	0553      	lsls	r3, r2, #21
 8007a56:	d531      	bpl.n	8007abc <__ssputs_r+0xa0>
 8007a58:	4629      	mov	r1, r5
 8007a5a:	f000 fb63 	bl	8008124 <_malloc_r>
 8007a5e:	4606      	mov	r6, r0
 8007a60:	b950      	cbnz	r0, 8007a78 <__ssputs_r+0x5c>
 8007a62:	230c      	movs	r3, #12
 8007a64:	f8ca 3000 	str.w	r3, [sl]
 8007a68:	89a3      	ldrh	r3, [r4, #12]
 8007a6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a6e:	81a3      	strh	r3, [r4, #12]
 8007a70:	f04f 30ff 	mov.w	r0, #4294967295
 8007a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a78:	6921      	ldr	r1, [r4, #16]
 8007a7a:	464a      	mov	r2, r9
 8007a7c:	f000 fabe 	bl	8007ffc <memcpy>
 8007a80:	89a3      	ldrh	r3, [r4, #12]
 8007a82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007a86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a8a:	81a3      	strh	r3, [r4, #12]
 8007a8c:	6126      	str	r6, [r4, #16]
 8007a8e:	6165      	str	r5, [r4, #20]
 8007a90:	444e      	add	r6, r9
 8007a92:	eba5 0509 	sub.w	r5, r5, r9
 8007a96:	6026      	str	r6, [r4, #0]
 8007a98:	60a5      	str	r5, [r4, #8]
 8007a9a:	463e      	mov	r6, r7
 8007a9c:	42be      	cmp	r6, r7
 8007a9e:	d900      	bls.n	8007aa2 <__ssputs_r+0x86>
 8007aa0:	463e      	mov	r6, r7
 8007aa2:	6820      	ldr	r0, [r4, #0]
 8007aa4:	4632      	mov	r2, r6
 8007aa6:	4641      	mov	r1, r8
 8007aa8:	f000 fab6 	bl	8008018 <memmove>
 8007aac:	68a3      	ldr	r3, [r4, #8]
 8007aae:	1b9b      	subs	r3, r3, r6
 8007ab0:	60a3      	str	r3, [r4, #8]
 8007ab2:	6823      	ldr	r3, [r4, #0]
 8007ab4:	4433      	add	r3, r6
 8007ab6:	6023      	str	r3, [r4, #0]
 8007ab8:	2000      	movs	r0, #0
 8007aba:	e7db      	b.n	8007a74 <__ssputs_r+0x58>
 8007abc:	462a      	mov	r2, r5
 8007abe:	f000 fba5 	bl	800820c <_realloc_r>
 8007ac2:	4606      	mov	r6, r0
 8007ac4:	2800      	cmp	r0, #0
 8007ac6:	d1e1      	bne.n	8007a8c <__ssputs_r+0x70>
 8007ac8:	6921      	ldr	r1, [r4, #16]
 8007aca:	4650      	mov	r0, sl
 8007acc:	f000 fabe 	bl	800804c <_free_r>
 8007ad0:	e7c7      	b.n	8007a62 <__ssputs_r+0x46>
	...

08007ad4 <_svfiprintf_r>:
 8007ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ad8:	4698      	mov	r8, r3
 8007ada:	898b      	ldrh	r3, [r1, #12]
 8007adc:	061b      	lsls	r3, r3, #24
 8007ade:	b09d      	sub	sp, #116	; 0x74
 8007ae0:	4607      	mov	r7, r0
 8007ae2:	460d      	mov	r5, r1
 8007ae4:	4614      	mov	r4, r2
 8007ae6:	d50e      	bpl.n	8007b06 <_svfiprintf_r+0x32>
 8007ae8:	690b      	ldr	r3, [r1, #16]
 8007aea:	b963      	cbnz	r3, 8007b06 <_svfiprintf_r+0x32>
 8007aec:	2140      	movs	r1, #64	; 0x40
 8007aee:	f000 fb19 	bl	8008124 <_malloc_r>
 8007af2:	6028      	str	r0, [r5, #0]
 8007af4:	6128      	str	r0, [r5, #16]
 8007af6:	b920      	cbnz	r0, 8007b02 <_svfiprintf_r+0x2e>
 8007af8:	230c      	movs	r3, #12
 8007afa:	603b      	str	r3, [r7, #0]
 8007afc:	f04f 30ff 	mov.w	r0, #4294967295
 8007b00:	e0d1      	b.n	8007ca6 <_svfiprintf_r+0x1d2>
 8007b02:	2340      	movs	r3, #64	; 0x40
 8007b04:	616b      	str	r3, [r5, #20]
 8007b06:	2300      	movs	r3, #0
 8007b08:	9309      	str	r3, [sp, #36]	; 0x24
 8007b0a:	2320      	movs	r3, #32
 8007b0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b10:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b14:	2330      	movs	r3, #48	; 0x30
 8007b16:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007cc0 <_svfiprintf_r+0x1ec>
 8007b1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b1e:	f04f 0901 	mov.w	r9, #1
 8007b22:	4623      	mov	r3, r4
 8007b24:	469a      	mov	sl, r3
 8007b26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b2a:	b10a      	cbz	r2, 8007b30 <_svfiprintf_r+0x5c>
 8007b2c:	2a25      	cmp	r2, #37	; 0x25
 8007b2e:	d1f9      	bne.n	8007b24 <_svfiprintf_r+0x50>
 8007b30:	ebba 0b04 	subs.w	fp, sl, r4
 8007b34:	d00b      	beq.n	8007b4e <_svfiprintf_r+0x7a>
 8007b36:	465b      	mov	r3, fp
 8007b38:	4622      	mov	r2, r4
 8007b3a:	4629      	mov	r1, r5
 8007b3c:	4638      	mov	r0, r7
 8007b3e:	f7ff ff6d 	bl	8007a1c <__ssputs_r>
 8007b42:	3001      	adds	r0, #1
 8007b44:	f000 80aa 	beq.w	8007c9c <_svfiprintf_r+0x1c8>
 8007b48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b4a:	445a      	add	r2, fp
 8007b4c:	9209      	str	r2, [sp, #36]	; 0x24
 8007b4e:	f89a 3000 	ldrb.w	r3, [sl]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	f000 80a2 	beq.w	8007c9c <_svfiprintf_r+0x1c8>
 8007b58:	2300      	movs	r3, #0
 8007b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8007b5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b62:	f10a 0a01 	add.w	sl, sl, #1
 8007b66:	9304      	str	r3, [sp, #16]
 8007b68:	9307      	str	r3, [sp, #28]
 8007b6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b6e:	931a      	str	r3, [sp, #104]	; 0x68
 8007b70:	4654      	mov	r4, sl
 8007b72:	2205      	movs	r2, #5
 8007b74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b78:	4851      	ldr	r0, [pc, #324]	; (8007cc0 <_svfiprintf_r+0x1ec>)
 8007b7a:	f7f8 fb59 	bl	8000230 <memchr>
 8007b7e:	9a04      	ldr	r2, [sp, #16]
 8007b80:	b9d8      	cbnz	r0, 8007bba <_svfiprintf_r+0xe6>
 8007b82:	06d0      	lsls	r0, r2, #27
 8007b84:	bf44      	itt	mi
 8007b86:	2320      	movmi	r3, #32
 8007b88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b8c:	0711      	lsls	r1, r2, #28
 8007b8e:	bf44      	itt	mi
 8007b90:	232b      	movmi	r3, #43	; 0x2b
 8007b92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b96:	f89a 3000 	ldrb.w	r3, [sl]
 8007b9a:	2b2a      	cmp	r3, #42	; 0x2a
 8007b9c:	d015      	beq.n	8007bca <_svfiprintf_r+0xf6>
 8007b9e:	9a07      	ldr	r2, [sp, #28]
 8007ba0:	4654      	mov	r4, sl
 8007ba2:	2000      	movs	r0, #0
 8007ba4:	f04f 0c0a 	mov.w	ip, #10
 8007ba8:	4621      	mov	r1, r4
 8007baa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bae:	3b30      	subs	r3, #48	; 0x30
 8007bb0:	2b09      	cmp	r3, #9
 8007bb2:	d94e      	bls.n	8007c52 <_svfiprintf_r+0x17e>
 8007bb4:	b1b0      	cbz	r0, 8007be4 <_svfiprintf_r+0x110>
 8007bb6:	9207      	str	r2, [sp, #28]
 8007bb8:	e014      	b.n	8007be4 <_svfiprintf_r+0x110>
 8007bba:	eba0 0308 	sub.w	r3, r0, r8
 8007bbe:	fa09 f303 	lsl.w	r3, r9, r3
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	9304      	str	r3, [sp, #16]
 8007bc6:	46a2      	mov	sl, r4
 8007bc8:	e7d2      	b.n	8007b70 <_svfiprintf_r+0x9c>
 8007bca:	9b03      	ldr	r3, [sp, #12]
 8007bcc:	1d19      	adds	r1, r3, #4
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	9103      	str	r1, [sp, #12]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	bfbb      	ittet	lt
 8007bd6:	425b      	neglt	r3, r3
 8007bd8:	f042 0202 	orrlt.w	r2, r2, #2
 8007bdc:	9307      	strge	r3, [sp, #28]
 8007bde:	9307      	strlt	r3, [sp, #28]
 8007be0:	bfb8      	it	lt
 8007be2:	9204      	strlt	r2, [sp, #16]
 8007be4:	7823      	ldrb	r3, [r4, #0]
 8007be6:	2b2e      	cmp	r3, #46	; 0x2e
 8007be8:	d10c      	bne.n	8007c04 <_svfiprintf_r+0x130>
 8007bea:	7863      	ldrb	r3, [r4, #1]
 8007bec:	2b2a      	cmp	r3, #42	; 0x2a
 8007bee:	d135      	bne.n	8007c5c <_svfiprintf_r+0x188>
 8007bf0:	9b03      	ldr	r3, [sp, #12]
 8007bf2:	1d1a      	adds	r2, r3, #4
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	9203      	str	r2, [sp, #12]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	bfb8      	it	lt
 8007bfc:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c00:	3402      	adds	r4, #2
 8007c02:	9305      	str	r3, [sp, #20]
 8007c04:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007cd0 <_svfiprintf_r+0x1fc>
 8007c08:	7821      	ldrb	r1, [r4, #0]
 8007c0a:	2203      	movs	r2, #3
 8007c0c:	4650      	mov	r0, sl
 8007c0e:	f7f8 fb0f 	bl	8000230 <memchr>
 8007c12:	b140      	cbz	r0, 8007c26 <_svfiprintf_r+0x152>
 8007c14:	2340      	movs	r3, #64	; 0x40
 8007c16:	eba0 000a 	sub.w	r0, r0, sl
 8007c1a:	fa03 f000 	lsl.w	r0, r3, r0
 8007c1e:	9b04      	ldr	r3, [sp, #16]
 8007c20:	4303      	orrs	r3, r0
 8007c22:	3401      	adds	r4, #1
 8007c24:	9304      	str	r3, [sp, #16]
 8007c26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c2a:	4826      	ldr	r0, [pc, #152]	; (8007cc4 <_svfiprintf_r+0x1f0>)
 8007c2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c30:	2206      	movs	r2, #6
 8007c32:	f7f8 fafd 	bl	8000230 <memchr>
 8007c36:	2800      	cmp	r0, #0
 8007c38:	d038      	beq.n	8007cac <_svfiprintf_r+0x1d8>
 8007c3a:	4b23      	ldr	r3, [pc, #140]	; (8007cc8 <_svfiprintf_r+0x1f4>)
 8007c3c:	bb1b      	cbnz	r3, 8007c86 <_svfiprintf_r+0x1b2>
 8007c3e:	9b03      	ldr	r3, [sp, #12]
 8007c40:	3307      	adds	r3, #7
 8007c42:	f023 0307 	bic.w	r3, r3, #7
 8007c46:	3308      	adds	r3, #8
 8007c48:	9303      	str	r3, [sp, #12]
 8007c4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c4c:	4433      	add	r3, r6
 8007c4e:	9309      	str	r3, [sp, #36]	; 0x24
 8007c50:	e767      	b.n	8007b22 <_svfiprintf_r+0x4e>
 8007c52:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c56:	460c      	mov	r4, r1
 8007c58:	2001      	movs	r0, #1
 8007c5a:	e7a5      	b.n	8007ba8 <_svfiprintf_r+0xd4>
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	3401      	adds	r4, #1
 8007c60:	9305      	str	r3, [sp, #20]
 8007c62:	4619      	mov	r1, r3
 8007c64:	f04f 0c0a 	mov.w	ip, #10
 8007c68:	4620      	mov	r0, r4
 8007c6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c6e:	3a30      	subs	r2, #48	; 0x30
 8007c70:	2a09      	cmp	r2, #9
 8007c72:	d903      	bls.n	8007c7c <_svfiprintf_r+0x1a8>
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d0c5      	beq.n	8007c04 <_svfiprintf_r+0x130>
 8007c78:	9105      	str	r1, [sp, #20]
 8007c7a:	e7c3      	b.n	8007c04 <_svfiprintf_r+0x130>
 8007c7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c80:	4604      	mov	r4, r0
 8007c82:	2301      	movs	r3, #1
 8007c84:	e7f0      	b.n	8007c68 <_svfiprintf_r+0x194>
 8007c86:	ab03      	add	r3, sp, #12
 8007c88:	9300      	str	r3, [sp, #0]
 8007c8a:	462a      	mov	r2, r5
 8007c8c:	4b0f      	ldr	r3, [pc, #60]	; (8007ccc <_svfiprintf_r+0x1f8>)
 8007c8e:	a904      	add	r1, sp, #16
 8007c90:	4638      	mov	r0, r7
 8007c92:	f3af 8000 	nop.w
 8007c96:	1c42      	adds	r2, r0, #1
 8007c98:	4606      	mov	r6, r0
 8007c9a:	d1d6      	bne.n	8007c4a <_svfiprintf_r+0x176>
 8007c9c:	89ab      	ldrh	r3, [r5, #12]
 8007c9e:	065b      	lsls	r3, r3, #25
 8007ca0:	f53f af2c 	bmi.w	8007afc <_svfiprintf_r+0x28>
 8007ca4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ca6:	b01d      	add	sp, #116	; 0x74
 8007ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cac:	ab03      	add	r3, sp, #12
 8007cae:	9300      	str	r3, [sp, #0]
 8007cb0:	462a      	mov	r2, r5
 8007cb2:	4b06      	ldr	r3, [pc, #24]	; (8007ccc <_svfiprintf_r+0x1f8>)
 8007cb4:	a904      	add	r1, sp, #16
 8007cb6:	4638      	mov	r0, r7
 8007cb8:	f000 f87a 	bl	8007db0 <_printf_i>
 8007cbc:	e7eb      	b.n	8007c96 <_svfiprintf_r+0x1c2>
 8007cbe:	bf00      	nop
 8007cc0:	08008414 	.word	0x08008414
 8007cc4:	0800841e 	.word	0x0800841e
 8007cc8:	00000000 	.word	0x00000000
 8007ccc:	08007a1d 	.word	0x08007a1d
 8007cd0:	0800841a 	.word	0x0800841a

08007cd4 <_printf_common>:
 8007cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cd8:	4616      	mov	r6, r2
 8007cda:	4699      	mov	r9, r3
 8007cdc:	688a      	ldr	r2, [r1, #8]
 8007cde:	690b      	ldr	r3, [r1, #16]
 8007ce0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	bfb8      	it	lt
 8007ce8:	4613      	movlt	r3, r2
 8007cea:	6033      	str	r3, [r6, #0]
 8007cec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007cf0:	4607      	mov	r7, r0
 8007cf2:	460c      	mov	r4, r1
 8007cf4:	b10a      	cbz	r2, 8007cfa <_printf_common+0x26>
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	6033      	str	r3, [r6, #0]
 8007cfa:	6823      	ldr	r3, [r4, #0]
 8007cfc:	0699      	lsls	r1, r3, #26
 8007cfe:	bf42      	ittt	mi
 8007d00:	6833      	ldrmi	r3, [r6, #0]
 8007d02:	3302      	addmi	r3, #2
 8007d04:	6033      	strmi	r3, [r6, #0]
 8007d06:	6825      	ldr	r5, [r4, #0]
 8007d08:	f015 0506 	ands.w	r5, r5, #6
 8007d0c:	d106      	bne.n	8007d1c <_printf_common+0x48>
 8007d0e:	f104 0a19 	add.w	sl, r4, #25
 8007d12:	68e3      	ldr	r3, [r4, #12]
 8007d14:	6832      	ldr	r2, [r6, #0]
 8007d16:	1a9b      	subs	r3, r3, r2
 8007d18:	42ab      	cmp	r3, r5
 8007d1a:	dc26      	bgt.n	8007d6a <_printf_common+0x96>
 8007d1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007d20:	1e13      	subs	r3, r2, #0
 8007d22:	6822      	ldr	r2, [r4, #0]
 8007d24:	bf18      	it	ne
 8007d26:	2301      	movne	r3, #1
 8007d28:	0692      	lsls	r2, r2, #26
 8007d2a:	d42b      	bmi.n	8007d84 <_printf_common+0xb0>
 8007d2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d30:	4649      	mov	r1, r9
 8007d32:	4638      	mov	r0, r7
 8007d34:	47c0      	blx	r8
 8007d36:	3001      	adds	r0, #1
 8007d38:	d01e      	beq.n	8007d78 <_printf_common+0xa4>
 8007d3a:	6823      	ldr	r3, [r4, #0]
 8007d3c:	68e5      	ldr	r5, [r4, #12]
 8007d3e:	6832      	ldr	r2, [r6, #0]
 8007d40:	f003 0306 	and.w	r3, r3, #6
 8007d44:	2b04      	cmp	r3, #4
 8007d46:	bf08      	it	eq
 8007d48:	1aad      	subeq	r5, r5, r2
 8007d4a:	68a3      	ldr	r3, [r4, #8]
 8007d4c:	6922      	ldr	r2, [r4, #16]
 8007d4e:	bf0c      	ite	eq
 8007d50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d54:	2500      	movne	r5, #0
 8007d56:	4293      	cmp	r3, r2
 8007d58:	bfc4      	itt	gt
 8007d5a:	1a9b      	subgt	r3, r3, r2
 8007d5c:	18ed      	addgt	r5, r5, r3
 8007d5e:	2600      	movs	r6, #0
 8007d60:	341a      	adds	r4, #26
 8007d62:	42b5      	cmp	r5, r6
 8007d64:	d11a      	bne.n	8007d9c <_printf_common+0xc8>
 8007d66:	2000      	movs	r0, #0
 8007d68:	e008      	b.n	8007d7c <_printf_common+0xa8>
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	4652      	mov	r2, sl
 8007d6e:	4649      	mov	r1, r9
 8007d70:	4638      	mov	r0, r7
 8007d72:	47c0      	blx	r8
 8007d74:	3001      	adds	r0, #1
 8007d76:	d103      	bne.n	8007d80 <_printf_common+0xac>
 8007d78:	f04f 30ff 	mov.w	r0, #4294967295
 8007d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d80:	3501      	adds	r5, #1
 8007d82:	e7c6      	b.n	8007d12 <_printf_common+0x3e>
 8007d84:	18e1      	adds	r1, r4, r3
 8007d86:	1c5a      	adds	r2, r3, #1
 8007d88:	2030      	movs	r0, #48	; 0x30
 8007d8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d8e:	4422      	add	r2, r4
 8007d90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d98:	3302      	adds	r3, #2
 8007d9a:	e7c7      	b.n	8007d2c <_printf_common+0x58>
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	4622      	mov	r2, r4
 8007da0:	4649      	mov	r1, r9
 8007da2:	4638      	mov	r0, r7
 8007da4:	47c0      	blx	r8
 8007da6:	3001      	adds	r0, #1
 8007da8:	d0e6      	beq.n	8007d78 <_printf_common+0xa4>
 8007daa:	3601      	adds	r6, #1
 8007dac:	e7d9      	b.n	8007d62 <_printf_common+0x8e>
	...

08007db0 <_printf_i>:
 8007db0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007db4:	7e0f      	ldrb	r7, [r1, #24]
 8007db6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007db8:	2f78      	cmp	r7, #120	; 0x78
 8007dba:	4691      	mov	r9, r2
 8007dbc:	4680      	mov	r8, r0
 8007dbe:	460c      	mov	r4, r1
 8007dc0:	469a      	mov	sl, r3
 8007dc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007dc6:	d807      	bhi.n	8007dd8 <_printf_i+0x28>
 8007dc8:	2f62      	cmp	r7, #98	; 0x62
 8007dca:	d80a      	bhi.n	8007de2 <_printf_i+0x32>
 8007dcc:	2f00      	cmp	r7, #0
 8007dce:	f000 80d8 	beq.w	8007f82 <_printf_i+0x1d2>
 8007dd2:	2f58      	cmp	r7, #88	; 0x58
 8007dd4:	f000 80a3 	beq.w	8007f1e <_printf_i+0x16e>
 8007dd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ddc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007de0:	e03a      	b.n	8007e58 <_printf_i+0xa8>
 8007de2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007de6:	2b15      	cmp	r3, #21
 8007de8:	d8f6      	bhi.n	8007dd8 <_printf_i+0x28>
 8007dea:	a101      	add	r1, pc, #4	; (adr r1, 8007df0 <_printf_i+0x40>)
 8007dec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007df0:	08007e49 	.word	0x08007e49
 8007df4:	08007e5d 	.word	0x08007e5d
 8007df8:	08007dd9 	.word	0x08007dd9
 8007dfc:	08007dd9 	.word	0x08007dd9
 8007e00:	08007dd9 	.word	0x08007dd9
 8007e04:	08007dd9 	.word	0x08007dd9
 8007e08:	08007e5d 	.word	0x08007e5d
 8007e0c:	08007dd9 	.word	0x08007dd9
 8007e10:	08007dd9 	.word	0x08007dd9
 8007e14:	08007dd9 	.word	0x08007dd9
 8007e18:	08007dd9 	.word	0x08007dd9
 8007e1c:	08007f69 	.word	0x08007f69
 8007e20:	08007e8d 	.word	0x08007e8d
 8007e24:	08007f4b 	.word	0x08007f4b
 8007e28:	08007dd9 	.word	0x08007dd9
 8007e2c:	08007dd9 	.word	0x08007dd9
 8007e30:	08007f8b 	.word	0x08007f8b
 8007e34:	08007dd9 	.word	0x08007dd9
 8007e38:	08007e8d 	.word	0x08007e8d
 8007e3c:	08007dd9 	.word	0x08007dd9
 8007e40:	08007dd9 	.word	0x08007dd9
 8007e44:	08007f53 	.word	0x08007f53
 8007e48:	682b      	ldr	r3, [r5, #0]
 8007e4a:	1d1a      	adds	r2, r3, #4
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	602a      	str	r2, [r5, #0]
 8007e50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e58:	2301      	movs	r3, #1
 8007e5a:	e0a3      	b.n	8007fa4 <_printf_i+0x1f4>
 8007e5c:	6820      	ldr	r0, [r4, #0]
 8007e5e:	6829      	ldr	r1, [r5, #0]
 8007e60:	0606      	lsls	r6, r0, #24
 8007e62:	f101 0304 	add.w	r3, r1, #4
 8007e66:	d50a      	bpl.n	8007e7e <_printf_i+0xce>
 8007e68:	680e      	ldr	r6, [r1, #0]
 8007e6a:	602b      	str	r3, [r5, #0]
 8007e6c:	2e00      	cmp	r6, #0
 8007e6e:	da03      	bge.n	8007e78 <_printf_i+0xc8>
 8007e70:	232d      	movs	r3, #45	; 0x2d
 8007e72:	4276      	negs	r6, r6
 8007e74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e78:	485e      	ldr	r0, [pc, #376]	; (8007ff4 <_printf_i+0x244>)
 8007e7a:	230a      	movs	r3, #10
 8007e7c:	e019      	b.n	8007eb2 <_printf_i+0x102>
 8007e7e:	680e      	ldr	r6, [r1, #0]
 8007e80:	602b      	str	r3, [r5, #0]
 8007e82:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007e86:	bf18      	it	ne
 8007e88:	b236      	sxthne	r6, r6
 8007e8a:	e7ef      	b.n	8007e6c <_printf_i+0xbc>
 8007e8c:	682b      	ldr	r3, [r5, #0]
 8007e8e:	6820      	ldr	r0, [r4, #0]
 8007e90:	1d19      	adds	r1, r3, #4
 8007e92:	6029      	str	r1, [r5, #0]
 8007e94:	0601      	lsls	r1, r0, #24
 8007e96:	d501      	bpl.n	8007e9c <_printf_i+0xec>
 8007e98:	681e      	ldr	r6, [r3, #0]
 8007e9a:	e002      	b.n	8007ea2 <_printf_i+0xf2>
 8007e9c:	0646      	lsls	r6, r0, #25
 8007e9e:	d5fb      	bpl.n	8007e98 <_printf_i+0xe8>
 8007ea0:	881e      	ldrh	r6, [r3, #0]
 8007ea2:	4854      	ldr	r0, [pc, #336]	; (8007ff4 <_printf_i+0x244>)
 8007ea4:	2f6f      	cmp	r7, #111	; 0x6f
 8007ea6:	bf0c      	ite	eq
 8007ea8:	2308      	moveq	r3, #8
 8007eaa:	230a      	movne	r3, #10
 8007eac:	2100      	movs	r1, #0
 8007eae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007eb2:	6865      	ldr	r5, [r4, #4]
 8007eb4:	60a5      	str	r5, [r4, #8]
 8007eb6:	2d00      	cmp	r5, #0
 8007eb8:	bfa2      	ittt	ge
 8007eba:	6821      	ldrge	r1, [r4, #0]
 8007ebc:	f021 0104 	bicge.w	r1, r1, #4
 8007ec0:	6021      	strge	r1, [r4, #0]
 8007ec2:	b90e      	cbnz	r6, 8007ec8 <_printf_i+0x118>
 8007ec4:	2d00      	cmp	r5, #0
 8007ec6:	d04d      	beq.n	8007f64 <_printf_i+0x1b4>
 8007ec8:	4615      	mov	r5, r2
 8007eca:	fbb6 f1f3 	udiv	r1, r6, r3
 8007ece:	fb03 6711 	mls	r7, r3, r1, r6
 8007ed2:	5dc7      	ldrb	r7, [r0, r7]
 8007ed4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007ed8:	4637      	mov	r7, r6
 8007eda:	42bb      	cmp	r3, r7
 8007edc:	460e      	mov	r6, r1
 8007ede:	d9f4      	bls.n	8007eca <_printf_i+0x11a>
 8007ee0:	2b08      	cmp	r3, #8
 8007ee2:	d10b      	bne.n	8007efc <_printf_i+0x14c>
 8007ee4:	6823      	ldr	r3, [r4, #0]
 8007ee6:	07de      	lsls	r6, r3, #31
 8007ee8:	d508      	bpl.n	8007efc <_printf_i+0x14c>
 8007eea:	6923      	ldr	r3, [r4, #16]
 8007eec:	6861      	ldr	r1, [r4, #4]
 8007eee:	4299      	cmp	r1, r3
 8007ef0:	bfde      	ittt	le
 8007ef2:	2330      	movle	r3, #48	; 0x30
 8007ef4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ef8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007efc:	1b52      	subs	r2, r2, r5
 8007efe:	6122      	str	r2, [r4, #16]
 8007f00:	f8cd a000 	str.w	sl, [sp]
 8007f04:	464b      	mov	r3, r9
 8007f06:	aa03      	add	r2, sp, #12
 8007f08:	4621      	mov	r1, r4
 8007f0a:	4640      	mov	r0, r8
 8007f0c:	f7ff fee2 	bl	8007cd4 <_printf_common>
 8007f10:	3001      	adds	r0, #1
 8007f12:	d14c      	bne.n	8007fae <_printf_i+0x1fe>
 8007f14:	f04f 30ff 	mov.w	r0, #4294967295
 8007f18:	b004      	add	sp, #16
 8007f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f1e:	4835      	ldr	r0, [pc, #212]	; (8007ff4 <_printf_i+0x244>)
 8007f20:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007f24:	6829      	ldr	r1, [r5, #0]
 8007f26:	6823      	ldr	r3, [r4, #0]
 8007f28:	f851 6b04 	ldr.w	r6, [r1], #4
 8007f2c:	6029      	str	r1, [r5, #0]
 8007f2e:	061d      	lsls	r5, r3, #24
 8007f30:	d514      	bpl.n	8007f5c <_printf_i+0x1ac>
 8007f32:	07df      	lsls	r7, r3, #31
 8007f34:	bf44      	itt	mi
 8007f36:	f043 0320 	orrmi.w	r3, r3, #32
 8007f3a:	6023      	strmi	r3, [r4, #0]
 8007f3c:	b91e      	cbnz	r6, 8007f46 <_printf_i+0x196>
 8007f3e:	6823      	ldr	r3, [r4, #0]
 8007f40:	f023 0320 	bic.w	r3, r3, #32
 8007f44:	6023      	str	r3, [r4, #0]
 8007f46:	2310      	movs	r3, #16
 8007f48:	e7b0      	b.n	8007eac <_printf_i+0xfc>
 8007f4a:	6823      	ldr	r3, [r4, #0]
 8007f4c:	f043 0320 	orr.w	r3, r3, #32
 8007f50:	6023      	str	r3, [r4, #0]
 8007f52:	2378      	movs	r3, #120	; 0x78
 8007f54:	4828      	ldr	r0, [pc, #160]	; (8007ff8 <_printf_i+0x248>)
 8007f56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f5a:	e7e3      	b.n	8007f24 <_printf_i+0x174>
 8007f5c:	0659      	lsls	r1, r3, #25
 8007f5e:	bf48      	it	mi
 8007f60:	b2b6      	uxthmi	r6, r6
 8007f62:	e7e6      	b.n	8007f32 <_printf_i+0x182>
 8007f64:	4615      	mov	r5, r2
 8007f66:	e7bb      	b.n	8007ee0 <_printf_i+0x130>
 8007f68:	682b      	ldr	r3, [r5, #0]
 8007f6a:	6826      	ldr	r6, [r4, #0]
 8007f6c:	6961      	ldr	r1, [r4, #20]
 8007f6e:	1d18      	adds	r0, r3, #4
 8007f70:	6028      	str	r0, [r5, #0]
 8007f72:	0635      	lsls	r5, r6, #24
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	d501      	bpl.n	8007f7c <_printf_i+0x1cc>
 8007f78:	6019      	str	r1, [r3, #0]
 8007f7a:	e002      	b.n	8007f82 <_printf_i+0x1d2>
 8007f7c:	0670      	lsls	r0, r6, #25
 8007f7e:	d5fb      	bpl.n	8007f78 <_printf_i+0x1c8>
 8007f80:	8019      	strh	r1, [r3, #0]
 8007f82:	2300      	movs	r3, #0
 8007f84:	6123      	str	r3, [r4, #16]
 8007f86:	4615      	mov	r5, r2
 8007f88:	e7ba      	b.n	8007f00 <_printf_i+0x150>
 8007f8a:	682b      	ldr	r3, [r5, #0]
 8007f8c:	1d1a      	adds	r2, r3, #4
 8007f8e:	602a      	str	r2, [r5, #0]
 8007f90:	681d      	ldr	r5, [r3, #0]
 8007f92:	6862      	ldr	r2, [r4, #4]
 8007f94:	2100      	movs	r1, #0
 8007f96:	4628      	mov	r0, r5
 8007f98:	f7f8 f94a 	bl	8000230 <memchr>
 8007f9c:	b108      	cbz	r0, 8007fa2 <_printf_i+0x1f2>
 8007f9e:	1b40      	subs	r0, r0, r5
 8007fa0:	6060      	str	r0, [r4, #4]
 8007fa2:	6863      	ldr	r3, [r4, #4]
 8007fa4:	6123      	str	r3, [r4, #16]
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fac:	e7a8      	b.n	8007f00 <_printf_i+0x150>
 8007fae:	6923      	ldr	r3, [r4, #16]
 8007fb0:	462a      	mov	r2, r5
 8007fb2:	4649      	mov	r1, r9
 8007fb4:	4640      	mov	r0, r8
 8007fb6:	47d0      	blx	sl
 8007fb8:	3001      	adds	r0, #1
 8007fba:	d0ab      	beq.n	8007f14 <_printf_i+0x164>
 8007fbc:	6823      	ldr	r3, [r4, #0]
 8007fbe:	079b      	lsls	r3, r3, #30
 8007fc0:	d413      	bmi.n	8007fea <_printf_i+0x23a>
 8007fc2:	68e0      	ldr	r0, [r4, #12]
 8007fc4:	9b03      	ldr	r3, [sp, #12]
 8007fc6:	4298      	cmp	r0, r3
 8007fc8:	bfb8      	it	lt
 8007fca:	4618      	movlt	r0, r3
 8007fcc:	e7a4      	b.n	8007f18 <_printf_i+0x168>
 8007fce:	2301      	movs	r3, #1
 8007fd0:	4632      	mov	r2, r6
 8007fd2:	4649      	mov	r1, r9
 8007fd4:	4640      	mov	r0, r8
 8007fd6:	47d0      	blx	sl
 8007fd8:	3001      	adds	r0, #1
 8007fda:	d09b      	beq.n	8007f14 <_printf_i+0x164>
 8007fdc:	3501      	adds	r5, #1
 8007fde:	68e3      	ldr	r3, [r4, #12]
 8007fe0:	9903      	ldr	r1, [sp, #12]
 8007fe2:	1a5b      	subs	r3, r3, r1
 8007fe4:	42ab      	cmp	r3, r5
 8007fe6:	dcf2      	bgt.n	8007fce <_printf_i+0x21e>
 8007fe8:	e7eb      	b.n	8007fc2 <_printf_i+0x212>
 8007fea:	2500      	movs	r5, #0
 8007fec:	f104 0619 	add.w	r6, r4, #25
 8007ff0:	e7f5      	b.n	8007fde <_printf_i+0x22e>
 8007ff2:	bf00      	nop
 8007ff4:	08008425 	.word	0x08008425
 8007ff8:	08008436 	.word	0x08008436

08007ffc <memcpy>:
 8007ffc:	440a      	add	r2, r1
 8007ffe:	4291      	cmp	r1, r2
 8008000:	f100 33ff 	add.w	r3, r0, #4294967295
 8008004:	d100      	bne.n	8008008 <memcpy+0xc>
 8008006:	4770      	bx	lr
 8008008:	b510      	push	{r4, lr}
 800800a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800800e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008012:	4291      	cmp	r1, r2
 8008014:	d1f9      	bne.n	800800a <memcpy+0xe>
 8008016:	bd10      	pop	{r4, pc}

08008018 <memmove>:
 8008018:	4288      	cmp	r0, r1
 800801a:	b510      	push	{r4, lr}
 800801c:	eb01 0402 	add.w	r4, r1, r2
 8008020:	d902      	bls.n	8008028 <memmove+0x10>
 8008022:	4284      	cmp	r4, r0
 8008024:	4623      	mov	r3, r4
 8008026:	d807      	bhi.n	8008038 <memmove+0x20>
 8008028:	1e43      	subs	r3, r0, #1
 800802a:	42a1      	cmp	r1, r4
 800802c:	d008      	beq.n	8008040 <memmove+0x28>
 800802e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008032:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008036:	e7f8      	b.n	800802a <memmove+0x12>
 8008038:	4402      	add	r2, r0
 800803a:	4601      	mov	r1, r0
 800803c:	428a      	cmp	r2, r1
 800803e:	d100      	bne.n	8008042 <memmove+0x2a>
 8008040:	bd10      	pop	{r4, pc}
 8008042:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008046:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800804a:	e7f7      	b.n	800803c <memmove+0x24>

0800804c <_free_r>:
 800804c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800804e:	2900      	cmp	r1, #0
 8008050:	d044      	beq.n	80080dc <_free_r+0x90>
 8008052:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008056:	9001      	str	r0, [sp, #4]
 8008058:	2b00      	cmp	r3, #0
 800805a:	f1a1 0404 	sub.w	r4, r1, #4
 800805e:	bfb8      	it	lt
 8008060:	18e4      	addlt	r4, r4, r3
 8008062:	f000 f913 	bl	800828c <__malloc_lock>
 8008066:	4a1e      	ldr	r2, [pc, #120]	; (80080e0 <_free_r+0x94>)
 8008068:	9801      	ldr	r0, [sp, #4]
 800806a:	6813      	ldr	r3, [r2, #0]
 800806c:	b933      	cbnz	r3, 800807c <_free_r+0x30>
 800806e:	6063      	str	r3, [r4, #4]
 8008070:	6014      	str	r4, [r2, #0]
 8008072:	b003      	add	sp, #12
 8008074:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008078:	f000 b90e 	b.w	8008298 <__malloc_unlock>
 800807c:	42a3      	cmp	r3, r4
 800807e:	d908      	bls.n	8008092 <_free_r+0x46>
 8008080:	6825      	ldr	r5, [r4, #0]
 8008082:	1961      	adds	r1, r4, r5
 8008084:	428b      	cmp	r3, r1
 8008086:	bf01      	itttt	eq
 8008088:	6819      	ldreq	r1, [r3, #0]
 800808a:	685b      	ldreq	r3, [r3, #4]
 800808c:	1949      	addeq	r1, r1, r5
 800808e:	6021      	streq	r1, [r4, #0]
 8008090:	e7ed      	b.n	800806e <_free_r+0x22>
 8008092:	461a      	mov	r2, r3
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	b10b      	cbz	r3, 800809c <_free_r+0x50>
 8008098:	42a3      	cmp	r3, r4
 800809a:	d9fa      	bls.n	8008092 <_free_r+0x46>
 800809c:	6811      	ldr	r1, [r2, #0]
 800809e:	1855      	adds	r5, r2, r1
 80080a0:	42a5      	cmp	r5, r4
 80080a2:	d10b      	bne.n	80080bc <_free_r+0x70>
 80080a4:	6824      	ldr	r4, [r4, #0]
 80080a6:	4421      	add	r1, r4
 80080a8:	1854      	adds	r4, r2, r1
 80080aa:	42a3      	cmp	r3, r4
 80080ac:	6011      	str	r1, [r2, #0]
 80080ae:	d1e0      	bne.n	8008072 <_free_r+0x26>
 80080b0:	681c      	ldr	r4, [r3, #0]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	6053      	str	r3, [r2, #4]
 80080b6:	4421      	add	r1, r4
 80080b8:	6011      	str	r1, [r2, #0]
 80080ba:	e7da      	b.n	8008072 <_free_r+0x26>
 80080bc:	d902      	bls.n	80080c4 <_free_r+0x78>
 80080be:	230c      	movs	r3, #12
 80080c0:	6003      	str	r3, [r0, #0]
 80080c2:	e7d6      	b.n	8008072 <_free_r+0x26>
 80080c4:	6825      	ldr	r5, [r4, #0]
 80080c6:	1961      	adds	r1, r4, r5
 80080c8:	428b      	cmp	r3, r1
 80080ca:	bf04      	itt	eq
 80080cc:	6819      	ldreq	r1, [r3, #0]
 80080ce:	685b      	ldreq	r3, [r3, #4]
 80080d0:	6063      	str	r3, [r4, #4]
 80080d2:	bf04      	itt	eq
 80080d4:	1949      	addeq	r1, r1, r5
 80080d6:	6021      	streq	r1, [r4, #0]
 80080d8:	6054      	str	r4, [r2, #4]
 80080da:	e7ca      	b.n	8008072 <_free_r+0x26>
 80080dc:	b003      	add	sp, #12
 80080de:	bd30      	pop	{r4, r5, pc}
 80080e0:	20000394 	.word	0x20000394

080080e4 <sbrk_aligned>:
 80080e4:	b570      	push	{r4, r5, r6, lr}
 80080e6:	4e0e      	ldr	r6, [pc, #56]	; (8008120 <sbrk_aligned+0x3c>)
 80080e8:	460c      	mov	r4, r1
 80080ea:	6831      	ldr	r1, [r6, #0]
 80080ec:	4605      	mov	r5, r0
 80080ee:	b911      	cbnz	r1, 80080f6 <sbrk_aligned+0x12>
 80080f0:	f000 f8bc 	bl	800826c <_sbrk_r>
 80080f4:	6030      	str	r0, [r6, #0]
 80080f6:	4621      	mov	r1, r4
 80080f8:	4628      	mov	r0, r5
 80080fa:	f000 f8b7 	bl	800826c <_sbrk_r>
 80080fe:	1c43      	adds	r3, r0, #1
 8008100:	d00a      	beq.n	8008118 <sbrk_aligned+0x34>
 8008102:	1cc4      	adds	r4, r0, #3
 8008104:	f024 0403 	bic.w	r4, r4, #3
 8008108:	42a0      	cmp	r0, r4
 800810a:	d007      	beq.n	800811c <sbrk_aligned+0x38>
 800810c:	1a21      	subs	r1, r4, r0
 800810e:	4628      	mov	r0, r5
 8008110:	f000 f8ac 	bl	800826c <_sbrk_r>
 8008114:	3001      	adds	r0, #1
 8008116:	d101      	bne.n	800811c <sbrk_aligned+0x38>
 8008118:	f04f 34ff 	mov.w	r4, #4294967295
 800811c:	4620      	mov	r0, r4
 800811e:	bd70      	pop	{r4, r5, r6, pc}
 8008120:	20000398 	.word	0x20000398

08008124 <_malloc_r>:
 8008124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008128:	1ccd      	adds	r5, r1, #3
 800812a:	f025 0503 	bic.w	r5, r5, #3
 800812e:	3508      	adds	r5, #8
 8008130:	2d0c      	cmp	r5, #12
 8008132:	bf38      	it	cc
 8008134:	250c      	movcc	r5, #12
 8008136:	2d00      	cmp	r5, #0
 8008138:	4607      	mov	r7, r0
 800813a:	db01      	blt.n	8008140 <_malloc_r+0x1c>
 800813c:	42a9      	cmp	r1, r5
 800813e:	d905      	bls.n	800814c <_malloc_r+0x28>
 8008140:	230c      	movs	r3, #12
 8008142:	603b      	str	r3, [r7, #0]
 8008144:	2600      	movs	r6, #0
 8008146:	4630      	mov	r0, r6
 8008148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800814c:	4e2e      	ldr	r6, [pc, #184]	; (8008208 <_malloc_r+0xe4>)
 800814e:	f000 f89d 	bl	800828c <__malloc_lock>
 8008152:	6833      	ldr	r3, [r6, #0]
 8008154:	461c      	mov	r4, r3
 8008156:	bb34      	cbnz	r4, 80081a6 <_malloc_r+0x82>
 8008158:	4629      	mov	r1, r5
 800815a:	4638      	mov	r0, r7
 800815c:	f7ff ffc2 	bl	80080e4 <sbrk_aligned>
 8008160:	1c43      	adds	r3, r0, #1
 8008162:	4604      	mov	r4, r0
 8008164:	d14d      	bne.n	8008202 <_malloc_r+0xde>
 8008166:	6834      	ldr	r4, [r6, #0]
 8008168:	4626      	mov	r6, r4
 800816a:	2e00      	cmp	r6, #0
 800816c:	d140      	bne.n	80081f0 <_malloc_r+0xcc>
 800816e:	6823      	ldr	r3, [r4, #0]
 8008170:	4631      	mov	r1, r6
 8008172:	4638      	mov	r0, r7
 8008174:	eb04 0803 	add.w	r8, r4, r3
 8008178:	f000 f878 	bl	800826c <_sbrk_r>
 800817c:	4580      	cmp	r8, r0
 800817e:	d13a      	bne.n	80081f6 <_malloc_r+0xd2>
 8008180:	6821      	ldr	r1, [r4, #0]
 8008182:	3503      	adds	r5, #3
 8008184:	1a6d      	subs	r5, r5, r1
 8008186:	f025 0503 	bic.w	r5, r5, #3
 800818a:	3508      	adds	r5, #8
 800818c:	2d0c      	cmp	r5, #12
 800818e:	bf38      	it	cc
 8008190:	250c      	movcc	r5, #12
 8008192:	4629      	mov	r1, r5
 8008194:	4638      	mov	r0, r7
 8008196:	f7ff ffa5 	bl	80080e4 <sbrk_aligned>
 800819a:	3001      	adds	r0, #1
 800819c:	d02b      	beq.n	80081f6 <_malloc_r+0xd2>
 800819e:	6823      	ldr	r3, [r4, #0]
 80081a0:	442b      	add	r3, r5
 80081a2:	6023      	str	r3, [r4, #0]
 80081a4:	e00e      	b.n	80081c4 <_malloc_r+0xa0>
 80081a6:	6822      	ldr	r2, [r4, #0]
 80081a8:	1b52      	subs	r2, r2, r5
 80081aa:	d41e      	bmi.n	80081ea <_malloc_r+0xc6>
 80081ac:	2a0b      	cmp	r2, #11
 80081ae:	d916      	bls.n	80081de <_malloc_r+0xba>
 80081b0:	1961      	adds	r1, r4, r5
 80081b2:	42a3      	cmp	r3, r4
 80081b4:	6025      	str	r5, [r4, #0]
 80081b6:	bf18      	it	ne
 80081b8:	6059      	strne	r1, [r3, #4]
 80081ba:	6863      	ldr	r3, [r4, #4]
 80081bc:	bf08      	it	eq
 80081be:	6031      	streq	r1, [r6, #0]
 80081c0:	5162      	str	r2, [r4, r5]
 80081c2:	604b      	str	r3, [r1, #4]
 80081c4:	4638      	mov	r0, r7
 80081c6:	f104 060b 	add.w	r6, r4, #11
 80081ca:	f000 f865 	bl	8008298 <__malloc_unlock>
 80081ce:	f026 0607 	bic.w	r6, r6, #7
 80081d2:	1d23      	adds	r3, r4, #4
 80081d4:	1af2      	subs	r2, r6, r3
 80081d6:	d0b6      	beq.n	8008146 <_malloc_r+0x22>
 80081d8:	1b9b      	subs	r3, r3, r6
 80081da:	50a3      	str	r3, [r4, r2]
 80081dc:	e7b3      	b.n	8008146 <_malloc_r+0x22>
 80081de:	6862      	ldr	r2, [r4, #4]
 80081e0:	42a3      	cmp	r3, r4
 80081e2:	bf0c      	ite	eq
 80081e4:	6032      	streq	r2, [r6, #0]
 80081e6:	605a      	strne	r2, [r3, #4]
 80081e8:	e7ec      	b.n	80081c4 <_malloc_r+0xa0>
 80081ea:	4623      	mov	r3, r4
 80081ec:	6864      	ldr	r4, [r4, #4]
 80081ee:	e7b2      	b.n	8008156 <_malloc_r+0x32>
 80081f0:	4634      	mov	r4, r6
 80081f2:	6876      	ldr	r6, [r6, #4]
 80081f4:	e7b9      	b.n	800816a <_malloc_r+0x46>
 80081f6:	230c      	movs	r3, #12
 80081f8:	603b      	str	r3, [r7, #0]
 80081fa:	4638      	mov	r0, r7
 80081fc:	f000 f84c 	bl	8008298 <__malloc_unlock>
 8008200:	e7a1      	b.n	8008146 <_malloc_r+0x22>
 8008202:	6025      	str	r5, [r4, #0]
 8008204:	e7de      	b.n	80081c4 <_malloc_r+0xa0>
 8008206:	bf00      	nop
 8008208:	20000394 	.word	0x20000394

0800820c <_realloc_r>:
 800820c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008210:	4680      	mov	r8, r0
 8008212:	4614      	mov	r4, r2
 8008214:	460e      	mov	r6, r1
 8008216:	b921      	cbnz	r1, 8008222 <_realloc_r+0x16>
 8008218:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800821c:	4611      	mov	r1, r2
 800821e:	f7ff bf81 	b.w	8008124 <_malloc_r>
 8008222:	b92a      	cbnz	r2, 8008230 <_realloc_r+0x24>
 8008224:	f7ff ff12 	bl	800804c <_free_r>
 8008228:	4625      	mov	r5, r4
 800822a:	4628      	mov	r0, r5
 800822c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008230:	f000 f838 	bl	80082a4 <_malloc_usable_size_r>
 8008234:	4284      	cmp	r4, r0
 8008236:	4607      	mov	r7, r0
 8008238:	d802      	bhi.n	8008240 <_realloc_r+0x34>
 800823a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800823e:	d812      	bhi.n	8008266 <_realloc_r+0x5a>
 8008240:	4621      	mov	r1, r4
 8008242:	4640      	mov	r0, r8
 8008244:	f7ff ff6e 	bl	8008124 <_malloc_r>
 8008248:	4605      	mov	r5, r0
 800824a:	2800      	cmp	r0, #0
 800824c:	d0ed      	beq.n	800822a <_realloc_r+0x1e>
 800824e:	42bc      	cmp	r4, r7
 8008250:	4622      	mov	r2, r4
 8008252:	4631      	mov	r1, r6
 8008254:	bf28      	it	cs
 8008256:	463a      	movcs	r2, r7
 8008258:	f7ff fed0 	bl	8007ffc <memcpy>
 800825c:	4631      	mov	r1, r6
 800825e:	4640      	mov	r0, r8
 8008260:	f7ff fef4 	bl	800804c <_free_r>
 8008264:	e7e1      	b.n	800822a <_realloc_r+0x1e>
 8008266:	4635      	mov	r5, r6
 8008268:	e7df      	b.n	800822a <_realloc_r+0x1e>
	...

0800826c <_sbrk_r>:
 800826c:	b538      	push	{r3, r4, r5, lr}
 800826e:	4d06      	ldr	r5, [pc, #24]	; (8008288 <_sbrk_r+0x1c>)
 8008270:	2300      	movs	r3, #0
 8008272:	4604      	mov	r4, r0
 8008274:	4608      	mov	r0, r1
 8008276:	602b      	str	r3, [r5, #0]
 8008278:	f7fa f9d6 	bl	8002628 <_sbrk>
 800827c:	1c43      	adds	r3, r0, #1
 800827e:	d102      	bne.n	8008286 <_sbrk_r+0x1a>
 8008280:	682b      	ldr	r3, [r5, #0]
 8008282:	b103      	cbz	r3, 8008286 <_sbrk_r+0x1a>
 8008284:	6023      	str	r3, [r4, #0]
 8008286:	bd38      	pop	{r3, r4, r5, pc}
 8008288:	2000039c 	.word	0x2000039c

0800828c <__malloc_lock>:
 800828c:	4801      	ldr	r0, [pc, #4]	; (8008294 <__malloc_lock+0x8>)
 800828e:	f000 b811 	b.w	80082b4 <__retarget_lock_acquire_recursive>
 8008292:	bf00      	nop
 8008294:	200003a0 	.word	0x200003a0

08008298 <__malloc_unlock>:
 8008298:	4801      	ldr	r0, [pc, #4]	; (80082a0 <__malloc_unlock+0x8>)
 800829a:	f000 b80c 	b.w	80082b6 <__retarget_lock_release_recursive>
 800829e:	bf00      	nop
 80082a0:	200003a0 	.word	0x200003a0

080082a4 <_malloc_usable_size_r>:
 80082a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082a8:	1f18      	subs	r0, r3, #4
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	bfbc      	itt	lt
 80082ae:	580b      	ldrlt	r3, [r1, r0]
 80082b0:	18c0      	addlt	r0, r0, r3
 80082b2:	4770      	bx	lr

080082b4 <__retarget_lock_acquire_recursive>:
 80082b4:	4770      	bx	lr

080082b6 <__retarget_lock_release_recursive>:
 80082b6:	4770      	bx	lr

080082b8 <_init>:
 80082b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ba:	bf00      	nop
 80082bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082be:	bc08      	pop	{r3}
 80082c0:	469e      	mov	lr, r3
 80082c2:	4770      	bx	lr

080082c4 <_fini>:
 80082c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082c6:	bf00      	nop
 80082c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ca:	bc08      	pop	{r3}
 80082cc:	469e      	mov	lr, r3
 80082ce:	4770      	bx	lr
